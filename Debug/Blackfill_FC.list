
Blackfill_FC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008640  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  080087d8  080087d8  000097d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080089d8  080089d8  0000a0b8  2**0
                  CONTENTS
  4 .ARM          00000008  080089d8  080089d8  000099d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080089e0  080089e0  0000a0b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080089e0  080089e0  000099e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080089e4  080089e4  000099e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  080089e8  0000a000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000418  200000b8  08008aa0  0000a0b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004d0  08008aa0  0000a4d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a0b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010cbf  00000000  00000000  0000a0e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ece  00000000  00000000  0001ada7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f08  00000000  00000000  0001cc78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e78  00000000  00000000  0001db80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000026ad  00000000  00000000  0001e9f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012224  00000000  00000000  000210a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090fa9  00000000  00000000  000332c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c4272  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000473c  00000000  00000000  000c42b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000b8 	.word	0x200000b8
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080087c0 	.word	0x080087c0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200000bc 	.word	0x200000bc
 80001d4:	080087c0 	.word	0x080087c0

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2f>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b08:	bf24      	itt	cs
 8000b0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b12:	d90d      	bls.n	8000b30 <__aeabi_d2f+0x30>
 8000b14:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b20:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b34:	d121      	bne.n	8000b7a <__aeabi_d2f+0x7a>
 8000b36:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b3a:	bfbc      	itt	lt
 8000b3c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b40:	4770      	bxlt	lr
 8000b42:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4a:	f1c2 0218 	rsb	r2, r2, #24
 8000b4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b56:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5a:	bf18      	it	ne
 8000b5c:	f040 0001 	orrne.w	r0, r0, #1
 8000b60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b6c:	ea40 000c 	orr.w	r0, r0, ip
 8000b70:	fa23 f302 	lsr.w	r3, r3, r2
 8000b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b78:	e7cc      	b.n	8000b14 <__aeabi_d2f+0x14>
 8000b7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7e:	d107      	bne.n	8000b90 <__aeabi_d2f+0x90>
 8000b80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b84:	bf1e      	ittt	ne
 8000b86:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b8a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b8e:	4770      	bxne	lr
 8000b90:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b94:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b98:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb4:	f000 b96a 	b.w	8000e8c <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f806 	bl	8000bd0 <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__udivmoddi4>:
 8000bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd4:	9d08      	ldr	r5, [sp, #32]
 8000bd6:	460c      	mov	r4, r1
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d14e      	bne.n	8000c7a <__udivmoddi4+0xaa>
 8000bdc:	4694      	mov	ip, r2
 8000bde:	458c      	cmp	ip, r1
 8000be0:	4686      	mov	lr, r0
 8000be2:	fab2 f282 	clz	r2, r2
 8000be6:	d962      	bls.n	8000cae <__udivmoddi4+0xde>
 8000be8:	b14a      	cbz	r2, 8000bfe <__udivmoddi4+0x2e>
 8000bea:	f1c2 0320 	rsb	r3, r2, #32
 8000bee:	4091      	lsls	r1, r2
 8000bf0:	fa20 f303 	lsr.w	r3, r0, r3
 8000bf4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bf8:	4319      	orrs	r1, r3
 8000bfa:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bfe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c02:	fa1f f68c 	uxth.w	r6, ip
 8000c06:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c0a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c0e:	fb07 1114 	mls	r1, r7, r4, r1
 8000c12:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c16:	fb04 f106 	mul.w	r1, r4, r6
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	d90a      	bls.n	8000c34 <__udivmoddi4+0x64>
 8000c1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c22:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c26:	f080 8112 	bcs.w	8000e4e <__udivmoddi4+0x27e>
 8000c2a:	4299      	cmp	r1, r3
 8000c2c:	f240 810f 	bls.w	8000e4e <__udivmoddi4+0x27e>
 8000c30:	3c02      	subs	r4, #2
 8000c32:	4463      	add	r3, ip
 8000c34:	1a59      	subs	r1, r3, r1
 8000c36:	fa1f f38e 	uxth.w	r3, lr
 8000c3a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c3e:	fb07 1110 	mls	r1, r7, r0, r1
 8000c42:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c46:	fb00 f606 	mul.w	r6, r0, r6
 8000c4a:	429e      	cmp	r6, r3
 8000c4c:	d90a      	bls.n	8000c64 <__udivmoddi4+0x94>
 8000c4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c52:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c56:	f080 80fc 	bcs.w	8000e52 <__udivmoddi4+0x282>
 8000c5a:	429e      	cmp	r6, r3
 8000c5c:	f240 80f9 	bls.w	8000e52 <__udivmoddi4+0x282>
 8000c60:	4463      	add	r3, ip
 8000c62:	3802      	subs	r0, #2
 8000c64:	1b9b      	subs	r3, r3, r6
 8000c66:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	b11d      	cbz	r5, 8000c76 <__udivmoddi4+0xa6>
 8000c6e:	40d3      	lsrs	r3, r2
 8000c70:	2200      	movs	r2, #0
 8000c72:	e9c5 3200 	strd	r3, r2, [r5]
 8000c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7a:	428b      	cmp	r3, r1
 8000c7c:	d905      	bls.n	8000c8a <__udivmoddi4+0xba>
 8000c7e:	b10d      	cbz	r5, 8000c84 <__udivmoddi4+0xb4>
 8000c80:	e9c5 0100 	strd	r0, r1, [r5]
 8000c84:	2100      	movs	r1, #0
 8000c86:	4608      	mov	r0, r1
 8000c88:	e7f5      	b.n	8000c76 <__udivmoddi4+0xa6>
 8000c8a:	fab3 f183 	clz	r1, r3
 8000c8e:	2900      	cmp	r1, #0
 8000c90:	d146      	bne.n	8000d20 <__udivmoddi4+0x150>
 8000c92:	42a3      	cmp	r3, r4
 8000c94:	d302      	bcc.n	8000c9c <__udivmoddi4+0xcc>
 8000c96:	4290      	cmp	r0, r2
 8000c98:	f0c0 80f0 	bcc.w	8000e7c <__udivmoddi4+0x2ac>
 8000c9c:	1a86      	subs	r6, r0, r2
 8000c9e:	eb64 0303 	sbc.w	r3, r4, r3
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	2d00      	cmp	r5, #0
 8000ca6:	d0e6      	beq.n	8000c76 <__udivmoddi4+0xa6>
 8000ca8:	e9c5 6300 	strd	r6, r3, [r5]
 8000cac:	e7e3      	b.n	8000c76 <__udivmoddi4+0xa6>
 8000cae:	2a00      	cmp	r2, #0
 8000cb0:	f040 8090 	bne.w	8000dd4 <__udivmoddi4+0x204>
 8000cb4:	eba1 040c 	sub.w	r4, r1, ip
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	fa1f f78c 	uxth.w	r7, ip
 8000cc0:	2101      	movs	r1, #1
 8000cc2:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cc6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cca:	fb08 4416 	mls	r4, r8, r6, r4
 8000cce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cd2:	fb07 f006 	mul.w	r0, r7, r6
 8000cd6:	4298      	cmp	r0, r3
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x11c>
 8000cda:	eb1c 0303 	adds.w	r3, ip, r3
 8000cde:	f106 34ff 	add.w	r4, r6, #4294967295
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0x11a>
 8000ce4:	4298      	cmp	r0, r3
 8000ce6:	f200 80cd 	bhi.w	8000e84 <__udivmoddi4+0x2b4>
 8000cea:	4626      	mov	r6, r4
 8000cec:	1a1c      	subs	r4, r3, r0
 8000cee:	fa1f f38e 	uxth.w	r3, lr
 8000cf2:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cf6:	fb08 4410 	mls	r4, r8, r0, r4
 8000cfa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cfe:	fb00 f707 	mul.w	r7, r0, r7
 8000d02:	429f      	cmp	r7, r3
 8000d04:	d908      	bls.n	8000d18 <__udivmoddi4+0x148>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d0e:	d202      	bcs.n	8000d16 <__udivmoddi4+0x146>
 8000d10:	429f      	cmp	r7, r3
 8000d12:	f200 80b0 	bhi.w	8000e76 <__udivmoddi4+0x2a6>
 8000d16:	4620      	mov	r0, r4
 8000d18:	1bdb      	subs	r3, r3, r7
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	e7a5      	b.n	8000c6c <__udivmoddi4+0x9c>
 8000d20:	f1c1 0620 	rsb	r6, r1, #32
 8000d24:	408b      	lsls	r3, r1
 8000d26:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2a:	431f      	orrs	r7, r3
 8000d2c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d30:	fa04 f301 	lsl.w	r3, r4, r1
 8000d34:	ea43 030c 	orr.w	r3, r3, ip
 8000d38:	40f4      	lsrs	r4, r6
 8000d3a:	fa00 f801 	lsl.w	r8, r0, r1
 8000d3e:	0c38      	lsrs	r0, r7, #16
 8000d40:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d44:	fbb4 fef0 	udiv	lr, r4, r0
 8000d48:	fa1f fc87 	uxth.w	ip, r7
 8000d4c:	fb00 441e 	mls	r4, r0, lr, r4
 8000d50:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d54:	fb0e f90c 	mul.w	r9, lr, ip
 8000d58:	45a1      	cmp	r9, r4
 8000d5a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d5e:	d90a      	bls.n	8000d76 <__udivmoddi4+0x1a6>
 8000d60:	193c      	adds	r4, r7, r4
 8000d62:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d66:	f080 8084 	bcs.w	8000e72 <__udivmoddi4+0x2a2>
 8000d6a:	45a1      	cmp	r9, r4
 8000d6c:	f240 8081 	bls.w	8000e72 <__udivmoddi4+0x2a2>
 8000d70:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d74:	443c      	add	r4, r7
 8000d76:	eba4 0409 	sub.w	r4, r4, r9
 8000d7a:	fa1f f983 	uxth.w	r9, r3
 8000d7e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d82:	fb00 4413 	mls	r4, r0, r3, r4
 8000d86:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d8a:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d8e:	45a4      	cmp	ip, r4
 8000d90:	d907      	bls.n	8000da2 <__udivmoddi4+0x1d2>
 8000d92:	193c      	adds	r4, r7, r4
 8000d94:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d98:	d267      	bcs.n	8000e6a <__udivmoddi4+0x29a>
 8000d9a:	45a4      	cmp	ip, r4
 8000d9c:	d965      	bls.n	8000e6a <__udivmoddi4+0x29a>
 8000d9e:	3b02      	subs	r3, #2
 8000da0:	443c      	add	r4, r7
 8000da2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000da6:	fba0 9302 	umull	r9, r3, r0, r2
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	429c      	cmp	r4, r3
 8000db0:	46ce      	mov	lr, r9
 8000db2:	469c      	mov	ip, r3
 8000db4:	d351      	bcc.n	8000e5a <__udivmoddi4+0x28a>
 8000db6:	d04e      	beq.n	8000e56 <__udivmoddi4+0x286>
 8000db8:	b155      	cbz	r5, 8000dd0 <__udivmoddi4+0x200>
 8000dba:	ebb8 030e 	subs.w	r3, r8, lr
 8000dbe:	eb64 040c 	sbc.w	r4, r4, ip
 8000dc2:	fa04 f606 	lsl.w	r6, r4, r6
 8000dc6:	40cb      	lsrs	r3, r1
 8000dc8:	431e      	orrs	r6, r3
 8000dca:	40cc      	lsrs	r4, r1
 8000dcc:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	e750      	b.n	8000c76 <__udivmoddi4+0xa6>
 8000dd4:	f1c2 0320 	rsb	r3, r2, #32
 8000dd8:	fa20 f103 	lsr.w	r1, r0, r3
 8000ddc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de0:	fa24 f303 	lsr.w	r3, r4, r3
 8000de4:	4094      	lsls	r4, r2
 8000de6:	430c      	orrs	r4, r1
 8000de8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dec:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df0:	fa1f f78c 	uxth.w	r7, ip
 8000df4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000df8:	fb08 3110 	mls	r1, r8, r0, r3
 8000dfc:	0c23      	lsrs	r3, r4, #16
 8000dfe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e02:	fb00 f107 	mul.w	r1, r0, r7
 8000e06:	4299      	cmp	r1, r3
 8000e08:	d908      	bls.n	8000e1c <__udivmoddi4+0x24c>
 8000e0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e0e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e12:	d22c      	bcs.n	8000e6e <__udivmoddi4+0x29e>
 8000e14:	4299      	cmp	r1, r3
 8000e16:	d92a      	bls.n	8000e6e <__udivmoddi4+0x29e>
 8000e18:	3802      	subs	r0, #2
 8000e1a:	4463      	add	r3, ip
 8000e1c:	1a5b      	subs	r3, r3, r1
 8000e1e:	b2a4      	uxth	r4, r4
 8000e20:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e24:	fb08 3311 	mls	r3, r8, r1, r3
 8000e28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e2c:	fb01 f307 	mul.w	r3, r1, r7
 8000e30:	42a3      	cmp	r3, r4
 8000e32:	d908      	bls.n	8000e46 <__udivmoddi4+0x276>
 8000e34:	eb1c 0404 	adds.w	r4, ip, r4
 8000e38:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e3c:	d213      	bcs.n	8000e66 <__udivmoddi4+0x296>
 8000e3e:	42a3      	cmp	r3, r4
 8000e40:	d911      	bls.n	8000e66 <__udivmoddi4+0x296>
 8000e42:	3902      	subs	r1, #2
 8000e44:	4464      	add	r4, ip
 8000e46:	1ae4      	subs	r4, r4, r3
 8000e48:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e4c:	e739      	b.n	8000cc2 <__udivmoddi4+0xf2>
 8000e4e:	4604      	mov	r4, r0
 8000e50:	e6f0      	b.n	8000c34 <__udivmoddi4+0x64>
 8000e52:	4608      	mov	r0, r1
 8000e54:	e706      	b.n	8000c64 <__udivmoddi4+0x94>
 8000e56:	45c8      	cmp	r8, r9
 8000e58:	d2ae      	bcs.n	8000db8 <__udivmoddi4+0x1e8>
 8000e5a:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e5e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e62:	3801      	subs	r0, #1
 8000e64:	e7a8      	b.n	8000db8 <__udivmoddi4+0x1e8>
 8000e66:	4631      	mov	r1, r6
 8000e68:	e7ed      	b.n	8000e46 <__udivmoddi4+0x276>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	e799      	b.n	8000da2 <__udivmoddi4+0x1d2>
 8000e6e:	4630      	mov	r0, r6
 8000e70:	e7d4      	b.n	8000e1c <__udivmoddi4+0x24c>
 8000e72:	46d6      	mov	lr, sl
 8000e74:	e77f      	b.n	8000d76 <__udivmoddi4+0x1a6>
 8000e76:	4463      	add	r3, ip
 8000e78:	3802      	subs	r0, #2
 8000e7a:	e74d      	b.n	8000d18 <__udivmoddi4+0x148>
 8000e7c:	4606      	mov	r6, r0
 8000e7e:	4623      	mov	r3, r4
 8000e80:	4608      	mov	r0, r1
 8000e82:	e70f      	b.n	8000ca4 <__udivmoddi4+0xd4>
 8000e84:	3e02      	subs	r6, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	e730      	b.n	8000cec <__udivmoddi4+0x11c>
 8000e8a:	bf00      	nop

08000e8c <__aeabi_idiv0>:
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop

08000e90 <MPU6050_Init>:

float uncertainity_pitch;
float uncertainity_roll;

void MPU6050_Init (void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af04      	add	r7, sp, #16
	uint8_t check;
	uint8_t Data;

	// check device ID WHO_AM_I

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 8000e96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e9a:	9302      	str	r3, [sp, #8]
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	9301      	str	r3, [sp, #4]
 8000ea0:	1dfb      	adds	r3, r7, #7
 8000ea2:	9300      	str	r3, [sp, #0]
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	2275      	movs	r2, #117	@ 0x75
 8000ea8:	21d0      	movs	r1, #208	@ 0xd0
 8000eaa:	4823      	ldr	r0, [pc, #140]	@ (8000f38 <MPU6050_Init+0xa8>)
 8000eac:	f003 f828 	bl	8003f00 <HAL_I2C_Mem_Read>

	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8000eb0:	79fb      	ldrb	r3, [r7, #7]
 8000eb2:	2b68      	cmp	r3, #104	@ 0x68
 8000eb4:	d13b      	bne.n	8000f2e <MPU6050_Init+0x9e>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 8000eba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ebe:	9302      	str	r3, [sp, #8]
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	9301      	str	r3, [sp, #4]
 8000ec4:	1dbb      	adds	r3, r7, #6
 8000ec6:	9300      	str	r3, [sp, #0]
 8000ec8:	2301      	movs	r3, #1
 8000eca:	226b      	movs	r2, #107	@ 0x6b
 8000ecc:	21d0      	movs	r1, #208	@ 0xd0
 8000ece:	481a      	ldr	r0, [pc, #104]	@ (8000f38 <MPU6050_Init+0xa8>)
 8000ed0:	f002 ff1c 	bl	8003d0c <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x03;
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, DLPF_CFG, 1, &Data, 1, 1000);
 8000ed8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000edc:	9302      	str	r3, [sp, #8]
 8000ede:	2301      	movs	r3, #1
 8000ee0:	9301      	str	r3, [sp, #4]
 8000ee2:	1dbb      	adds	r3, r7, #6
 8000ee4:	9300      	str	r3, [sp, #0]
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	221a      	movs	r2, #26
 8000eea:	21d0      	movs	r1, #208	@ 0xd0
 8000eec:	4812      	ldr	r0, [pc, #72]	@ (8000f38 <MPU6050_Init+0xa8>)
 8000eee:	f002 ff0d 	bl	8003d0c <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 8g
		Data = 0x10;
 8000ef2:	2310      	movs	r3, #16
 8000ef4:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8000ef6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000efa:	9302      	str	r3, [sp, #8]
 8000efc:	2301      	movs	r3, #1
 8000efe:	9301      	str	r3, [sp, #4]
 8000f00:	1dbb      	adds	r3, r7, #6
 8000f02:	9300      	str	r3, [sp, #0]
 8000f04:	2301      	movs	r3, #1
 8000f06:	221c      	movs	r2, #28
 8000f08:	21d0      	movs	r1, #208	@ 0xd0
 8000f0a:	480b      	ldr	r0, [pc, #44]	@ (8000f38 <MPU6050_Init+0xa8>)
 8000f0c:	f002 fefe 	bl	8003d0c <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 500 �/s
		Data = 0x08;
 8000f10:	2308      	movs	r3, #8
 8000f12:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8000f14:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f18:	9302      	str	r3, [sp, #8]
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	9301      	str	r3, [sp, #4]
 8000f1e:	1dbb      	adds	r3, r7, #6
 8000f20:	9300      	str	r3, [sp, #0]
 8000f22:	2301      	movs	r3, #1
 8000f24:	221b      	movs	r2, #27
 8000f26:	21d0      	movs	r1, #208	@ 0xd0
 8000f28:	4803      	ldr	r0, [pc, #12]	@ (8000f38 <MPU6050_Init+0xa8>)
 8000f2a:	f002 feef 	bl	8003d0c <HAL_I2C_Mem_Write>
	}

}
 8000f2e:	bf00      	nop
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	200000d4 	.word	0x200000d4

08000f3c <gyro_get_data>:

void gyro_get_data(){
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b088      	sub	sp, #32
 8000f40:	af04      	add	r7, sp, #16

	uint8_t Accel_Val_Raw[6];
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Accel_Val_Raw, 6, 1000);
 8000f42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f46:	9302      	str	r3, [sp, #8]
 8000f48:	2306      	movs	r3, #6
 8000f4a:	9301      	str	r3, [sp, #4]
 8000f4c:	f107 0308 	add.w	r3, r7, #8
 8000f50:	9300      	str	r3, [sp, #0]
 8000f52:	2301      	movs	r3, #1
 8000f54:	223b      	movs	r2, #59	@ 0x3b
 8000f56:	21d0      	movs	r1, #208	@ 0xd0
 8000f58:	482c      	ldr	r0, [pc, #176]	@ (800100c <gyro_get_data+0xd0>)
 8000f5a:	f002 ffd1 	bl	8003f00 <HAL_I2C_Mem_Read>

	acc_y = (int16_t) (Accel_Val_Raw[0] << 8 | Accel_Val_Raw [1]);
 8000f5e:	7a3b      	ldrb	r3, [r7, #8]
 8000f60:	021b      	lsls	r3, r3, #8
 8000f62:	b21a      	sxth	r2, r3
 8000f64:	7a7b      	ldrb	r3, [r7, #9]
 8000f66:	b21b      	sxth	r3, r3
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	b21b      	sxth	r3, r3
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	4b28      	ldr	r3, [pc, #160]	@ (8001010 <gyro_get_data+0xd4>)
 8000f70:	601a      	str	r2, [r3, #0]
	acc_x = (int16_t) (Accel_Val_Raw[2] << 8 | Accel_Val_Raw [3]);
 8000f72:	7abb      	ldrb	r3, [r7, #10]
 8000f74:	021b      	lsls	r3, r3, #8
 8000f76:	b21a      	sxth	r2, r3
 8000f78:	7afb      	ldrb	r3, [r7, #11]
 8000f7a:	b21b      	sxth	r3, r3
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	b21b      	sxth	r3, r3
 8000f80:	461a      	mov	r2, r3
 8000f82:	4b24      	ldr	r3, [pc, #144]	@ (8001014 <gyro_get_data+0xd8>)
 8000f84:	601a      	str	r2, [r3, #0]
	acc_z = (int16_t) (Accel_Val_Raw[4] << 8 | Accel_Val_Raw [5]);
 8000f86:	7b3b      	ldrb	r3, [r7, #12]
 8000f88:	021b      	lsls	r3, r3, #8
 8000f8a:	b21a      	sxth	r2, r3
 8000f8c:	7b7b      	ldrb	r3, [r7, #13]
 8000f8e:	b21b      	sxth	r3, r3
 8000f90:	4313      	orrs	r3, r2
 8000f92:	b21b      	sxth	r3, r3
 8000f94:	461a      	mov	r2, r3
 8000f96:	4b20      	ldr	r3, [pc, #128]	@ (8001018 <gyro_get_data+0xdc>)
 8000f98:	601a      	str	r2, [r3, #0]

	uint8_t Gyro_Val_Raw[6];
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Gyro_Val_Raw, 6, 1000);
 8000f9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f9e:	9302      	str	r3, [sp, #8]
 8000fa0:	2306      	movs	r3, #6
 8000fa2:	9301      	str	r3, [sp, #4]
 8000fa4:	463b      	mov	r3, r7
 8000fa6:	9300      	str	r3, [sp, #0]
 8000fa8:	2301      	movs	r3, #1
 8000faa:	2243      	movs	r2, #67	@ 0x43
 8000fac:	21d0      	movs	r1, #208	@ 0xd0
 8000fae:	4817      	ldr	r0, [pc, #92]	@ (800100c <gyro_get_data+0xd0>)
 8000fb0:	f002 ffa6 	bl	8003f00 <HAL_I2C_Mem_Read>

	gyro_y = (int16_t) (Gyro_Val_Raw[0] << 8 | Gyro_Val_Raw [1]);
 8000fb4:	783b      	ldrb	r3, [r7, #0]
 8000fb6:	021b      	lsls	r3, r3, #8
 8000fb8:	b21a      	sxth	r2, r3
 8000fba:	787b      	ldrb	r3, [r7, #1]
 8000fbc:	b21b      	sxth	r3, r3
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	b21b      	sxth	r3, r3
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	4b15      	ldr	r3, [pc, #84]	@ (800101c <gyro_get_data+0xe0>)
 8000fc6:	601a      	str	r2, [r3, #0]
	gyro_x = (int16_t) (Gyro_Val_Raw[2] << 8 | Gyro_Val_Raw [3]);
 8000fc8:	78bb      	ldrb	r3, [r7, #2]
 8000fca:	021b      	lsls	r3, r3, #8
 8000fcc:	b21a      	sxth	r2, r3
 8000fce:	78fb      	ldrb	r3, [r7, #3]
 8000fd0:	b21b      	sxth	r3, r3
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	b21b      	sxth	r3, r3
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	4b11      	ldr	r3, [pc, #68]	@ (8001020 <gyro_get_data+0xe4>)
 8000fda:	601a      	str	r2, [r3, #0]
	gyro_z = (int16_t) (Gyro_Val_Raw[4] << 8 | Gyro_Val_Raw [5]);
 8000fdc:	793b      	ldrb	r3, [r7, #4]
 8000fde:	021b      	lsls	r3, r3, #8
 8000fe0:	b21a      	sxth	r2, r3
 8000fe2:	797b      	ldrb	r3, [r7, #5]
 8000fe4:	b21b      	sxth	r3, r3
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	b21b      	sxth	r3, r3
 8000fea:	461a      	mov	r2, r3
 8000fec:	4b0d      	ldr	r3, [pc, #52]	@ (8001024 <gyro_get_data+0xe8>)
 8000fee:	601a      	str	r2, [r3, #0]

	gyro_x *= -1;
 8000ff0:	4b0b      	ldr	r3, [pc, #44]	@ (8001020 <gyro_get_data+0xe4>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	425b      	negs	r3, r3
 8000ff6:	4a0a      	ldr	r2, [pc, #40]	@ (8001020 <gyro_get_data+0xe4>)
 8000ff8:	6013      	str	r3, [r2, #0]
	//gyro_y *= -1;
	gyro_z *= -1;
 8000ffa:	4b0a      	ldr	r3, [pc, #40]	@ (8001024 <gyro_get_data+0xe8>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	425b      	negs	r3, r3
 8001000:	4a08      	ldr	r2, [pc, #32]	@ (8001024 <gyro_get_data+0xe8>)
 8001002:	6013      	str	r3, [r2, #0]

}
 8001004:	bf00      	nop
 8001006:	3710      	adds	r7, #16
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	200000d4 	.word	0x200000d4
 8001010:	2000014c 	.word	0x2000014c
 8001014:	20000148 	.word	0x20000148
 8001018:	20000150 	.word	0x20000150
 800101c:	20000140 	.word	0x20000140
 8001020:	2000013c 	.word	0x2000013c
 8001024:	20000144 	.word	0x20000144

08001028 <mpu6050_cal>:

void mpu6050_cal(){
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0

	for( int i = 0; i < 2000; i++){
 800102e:	2300      	movs	r3, #0
 8001030:	607b      	str	r3, [r7, #4]
 8001032:	e0cf      	b.n	80011d4 <mpu6050_cal+0x1ac>
		if ( i % 15 == 0 ) HAL_GPIO_TogglePin(GPIOC, led_cal_Pin);
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	4b88      	ldr	r3, [pc, #544]	@ (8001258 <mpu6050_cal+0x230>)
 8001038:	fb83 1302 	smull	r1, r3, r3, r2
 800103c:	4413      	add	r3, r2
 800103e:	10d9      	asrs	r1, r3, #3
 8001040:	17d3      	asrs	r3, r2, #31
 8001042:	1ac9      	subs	r1, r1, r3
 8001044:	460b      	mov	r3, r1
 8001046:	011b      	lsls	r3, r3, #4
 8001048:	1a5b      	subs	r3, r3, r1
 800104a:	1ad1      	subs	r1, r2, r3
 800104c:	2900      	cmp	r1, #0
 800104e:	d104      	bne.n	800105a <mpu6050_cal+0x32>
 8001050:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001054:	4881      	ldr	r0, [pc, #516]	@ (800125c <mpu6050_cal+0x234>)
 8001056:	f002 fce2 	bl	8003a1e <HAL_GPIO_TogglePin>
		gyro_get_data();
 800105a:	f7ff ff6f 	bl	8000f3c <gyro_get_data>

		gyro_x_cal += gyro_x;
 800105e:	4b80      	ldr	r3, [pc, #512]	@ (8001260 <mpu6050_cal+0x238>)
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	4b80      	ldr	r3, [pc, #512]	@ (8001264 <mpu6050_cal+0x23c>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4413      	add	r3, r2
 8001068:	4a7d      	ldr	r2, [pc, #500]	@ (8001260 <mpu6050_cal+0x238>)
 800106a:	6013      	str	r3, [r2, #0]
		gyro_y_cal += gyro_y;
 800106c:	4b7e      	ldr	r3, [pc, #504]	@ (8001268 <mpu6050_cal+0x240>)
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	4b7e      	ldr	r3, [pc, #504]	@ (800126c <mpu6050_cal+0x244>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4413      	add	r3, r2
 8001076:	4a7c      	ldr	r2, [pc, #496]	@ (8001268 <mpu6050_cal+0x240>)
 8001078:	6013      	str	r3, [r2, #0]
		gyro_z_cal += gyro_z;
 800107a:	4b7d      	ldr	r3, [pc, #500]	@ (8001270 <mpu6050_cal+0x248>)
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	4b7d      	ldr	r3, [pc, #500]	@ (8001274 <mpu6050_cal+0x24c>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4413      	add	r3, r2
 8001084:	4a7a      	ldr	r2, [pc, #488]	@ (8001270 <mpu6050_cal+0x248>)
 8001086:	6013      	str	r3, [r2, #0]


		acc_total_vector = sqrt( ( acc_x*acc_x ) + ( acc_y * acc_y) + ( acc_z * acc_z ) );
 8001088:	4b7b      	ldr	r3, [pc, #492]	@ (8001278 <mpu6050_cal+0x250>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a7a      	ldr	r2, [pc, #488]	@ (8001278 <mpu6050_cal+0x250>)
 800108e:	6812      	ldr	r2, [r2, #0]
 8001090:	fb03 f202 	mul.w	r2, r3, r2
 8001094:	4b79      	ldr	r3, [pc, #484]	@ (800127c <mpu6050_cal+0x254>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4978      	ldr	r1, [pc, #480]	@ (800127c <mpu6050_cal+0x254>)
 800109a:	6809      	ldr	r1, [r1, #0]
 800109c:	fb01 f303 	mul.w	r3, r1, r3
 80010a0:	441a      	add	r2, r3
 80010a2:	4b77      	ldr	r3, [pc, #476]	@ (8001280 <mpu6050_cal+0x258>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4976      	ldr	r1, [pc, #472]	@ (8001280 <mpu6050_cal+0x258>)
 80010a8:	6809      	ldr	r1, [r1, #0]
 80010aa:	fb01 f303 	mul.w	r3, r1, r3
 80010ae:	4413      	add	r3, r2
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff f9e3 	bl	800047c <__aeabi_i2d>
 80010b6:	4602      	mov	r2, r0
 80010b8:	460b      	mov	r3, r1
 80010ba:	ec43 2b10 	vmov	d0, r2, r3
 80010be:	f006 f839 	bl	8007134 <sqrt>
 80010c2:	ec53 2b10 	vmov	r2, r3, d0
 80010c6:	4610      	mov	r0, r2
 80010c8:	4619      	mov	r1, r3
 80010ca:	f7ff fcf1 	bl	8000ab0 <__aeabi_d2iz>
 80010ce:	4603      	mov	r3, r0
 80010d0:	4a6c      	ldr	r2, [pc, #432]	@ (8001284 <mpu6050_cal+0x25c>)
 80010d2:	6013      	str	r3, [r2, #0]

		  if ( abs(acc_y) < acc_total_vector ){
 80010d4:	4b69      	ldr	r3, [pc, #420]	@ (800127c <mpu6050_cal+0x254>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80010dc:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80010e0:	4b68      	ldr	r3, [pc, #416]	@ (8001284 <mpu6050_cal+0x25c>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	da27      	bge.n	8001138 <mpu6050_cal+0x110>
			  angle_pitch_acc = asin( (float) acc_y / acc_total_vector ) * 57.296;
 80010e8:	4b64      	ldr	r3, [pc, #400]	@ (800127c <mpu6050_cal+0x254>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	ee07 3a90 	vmov	s15, r3
 80010f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010f4:	4b63      	ldr	r3, [pc, #396]	@ (8001284 <mpu6050_cal+0x25c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	ee07 3a90 	vmov	s15, r3
 80010fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001100:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001104:	ee16 0a90 	vmov	r0, s13
 8001108:	f7ff f9ca 	bl	80004a0 <__aeabi_f2d>
 800110c:	4602      	mov	r2, r0
 800110e:	460b      	mov	r3, r1
 8001110:	ec43 2b10 	vmov	d0, r2, r3
 8001114:	f005 ffda 	bl	80070cc <asin>
 8001118:	ec51 0b10 	vmov	r0, r1, d0
 800111c:	a34c      	add	r3, pc, #304	@ (adr r3, 8001250 <mpu6050_cal+0x228>)
 800111e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001122:	f7ff fa15 	bl	8000550 <__aeabi_dmul>
 8001126:	4602      	mov	r2, r0
 8001128:	460b      	mov	r3, r1
 800112a:	4610      	mov	r0, r2
 800112c:	4619      	mov	r1, r3
 800112e:	f7ff fce7 	bl	8000b00 <__aeabi_d2f>
 8001132:	4603      	mov	r3, r0
 8001134:	4a54      	ldr	r2, [pc, #336]	@ (8001288 <mpu6050_cal+0x260>)
 8001136:	6013      	str	r3, [r2, #0]
		  }

		  if ( abs(acc_x) < acc_total_vector ){
 8001138:	4b4f      	ldr	r3, [pc, #316]	@ (8001278 <mpu6050_cal+0x250>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001140:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001144:	4b4f      	ldr	r3, [pc, #316]	@ (8001284 <mpu6050_cal+0x25c>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	429a      	cmp	r2, r3
 800114a:	da27      	bge.n	800119c <mpu6050_cal+0x174>
			  angle_roll_acc = asin( (float) acc_x / acc_total_vector ) * 57.296;
 800114c:	4b4a      	ldr	r3, [pc, #296]	@ (8001278 <mpu6050_cal+0x250>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	ee07 3a90 	vmov	s15, r3
 8001154:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001158:	4b4a      	ldr	r3, [pc, #296]	@ (8001284 <mpu6050_cal+0x25c>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	ee07 3a90 	vmov	s15, r3
 8001160:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001164:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001168:	ee16 0a90 	vmov	r0, s13
 800116c:	f7ff f998 	bl	80004a0 <__aeabi_f2d>
 8001170:	4602      	mov	r2, r0
 8001172:	460b      	mov	r3, r1
 8001174:	ec43 2b10 	vmov	d0, r2, r3
 8001178:	f005 ffa8 	bl	80070cc <asin>
 800117c:	ec51 0b10 	vmov	r0, r1, d0
 8001180:	a333      	add	r3, pc, #204	@ (adr r3, 8001250 <mpu6050_cal+0x228>)
 8001182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001186:	f7ff f9e3 	bl	8000550 <__aeabi_dmul>
 800118a:	4602      	mov	r2, r0
 800118c:	460b      	mov	r3, r1
 800118e:	4610      	mov	r0, r2
 8001190:	4619      	mov	r1, r3
 8001192:	f7ff fcb5 	bl	8000b00 <__aeabi_d2f>
 8001196:	4603      	mov	r3, r0
 8001198:	4a3c      	ldr	r2, [pc, #240]	@ (800128c <mpu6050_cal+0x264>)
 800119a:	6013      	str	r3, [r2, #0]
		  }

		  angle_pitch_acc_cal += angle_pitch_acc;
 800119c:	4b3c      	ldr	r3, [pc, #240]	@ (8001290 <mpu6050_cal+0x268>)
 800119e:	ed93 7a00 	vldr	s14, [r3]
 80011a2:	4b39      	ldr	r3, [pc, #228]	@ (8001288 <mpu6050_cal+0x260>)
 80011a4:	edd3 7a00 	vldr	s15, [r3]
 80011a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011ac:	4b38      	ldr	r3, [pc, #224]	@ (8001290 <mpu6050_cal+0x268>)
 80011ae:	edc3 7a00 	vstr	s15, [r3]
		  angle_roll_acc_cal += angle_roll_acc;
 80011b2:	4b38      	ldr	r3, [pc, #224]	@ (8001294 <mpu6050_cal+0x26c>)
 80011b4:	ed93 7a00 	vldr	s14, [r3]
 80011b8:	4b34      	ldr	r3, [pc, #208]	@ (800128c <mpu6050_cal+0x264>)
 80011ba:	edd3 7a00 	vldr	s15, [r3]
 80011be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011c2:	4b34      	ldr	r3, [pc, #208]	@ (8001294 <mpu6050_cal+0x26c>)
 80011c4:	edc3 7a00 	vstr	s15, [r3]

		HAL_Delay(4);
 80011c8:	2004      	movs	r0, #4
 80011ca:	f001 fdd9 	bl	8002d80 <HAL_Delay>
	for( int i = 0; i < 2000; i++){
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	3301      	adds	r3, #1
 80011d2:	607b      	str	r3, [r7, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80011da:	f6ff af2b 	blt.w	8001034 <mpu6050_cal+0xc>

	}

	gyro_x_cal /= 2000;
 80011de:	4b20      	ldr	r3, [pc, #128]	@ (8001260 <mpu6050_cal+0x238>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a2d      	ldr	r2, [pc, #180]	@ (8001298 <mpu6050_cal+0x270>)
 80011e4:	fb82 1203 	smull	r1, r2, r2, r3
 80011e8:	11d2      	asrs	r2, r2, #7
 80011ea:	17db      	asrs	r3, r3, #31
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	4a1c      	ldr	r2, [pc, #112]	@ (8001260 <mpu6050_cal+0x238>)
 80011f0:	6013      	str	r3, [r2, #0]
	gyro_y_cal /= 2000;
 80011f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001268 <mpu6050_cal+0x240>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a28      	ldr	r2, [pc, #160]	@ (8001298 <mpu6050_cal+0x270>)
 80011f8:	fb82 1203 	smull	r1, r2, r2, r3
 80011fc:	11d2      	asrs	r2, r2, #7
 80011fe:	17db      	asrs	r3, r3, #31
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	4a19      	ldr	r2, [pc, #100]	@ (8001268 <mpu6050_cal+0x240>)
 8001204:	6013      	str	r3, [r2, #0]
	gyro_z_cal /= 2000;
 8001206:	4b1a      	ldr	r3, [pc, #104]	@ (8001270 <mpu6050_cal+0x248>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a23      	ldr	r2, [pc, #140]	@ (8001298 <mpu6050_cal+0x270>)
 800120c:	fb82 1203 	smull	r1, r2, r2, r3
 8001210:	11d2      	asrs	r2, r2, #7
 8001212:	17db      	asrs	r3, r3, #31
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	4a16      	ldr	r2, [pc, #88]	@ (8001270 <mpu6050_cal+0x248>)
 8001218:	6013      	str	r3, [r2, #0]

	angle_pitch_acc_cal /= 2000;
 800121a:	4b1d      	ldr	r3, [pc, #116]	@ (8001290 <mpu6050_cal+0x268>)
 800121c:	ed93 7a00 	vldr	s14, [r3]
 8001220:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800129c <mpu6050_cal+0x274>
 8001224:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001228:	4b19      	ldr	r3, [pc, #100]	@ (8001290 <mpu6050_cal+0x268>)
 800122a:	edc3 7a00 	vstr	s15, [r3]
	angle_roll_acc_cal /= 2000;
 800122e:	4b19      	ldr	r3, [pc, #100]	@ (8001294 <mpu6050_cal+0x26c>)
 8001230:	ed93 7a00 	vldr	s14, [r3]
 8001234:	eddf 6a19 	vldr	s13, [pc, #100]	@ 800129c <mpu6050_cal+0x274>
 8001238:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800123c:	4b15      	ldr	r3, [pc, #84]	@ (8001294 <mpu6050_cal+0x26c>)
 800123e:	edc3 7a00 	vstr	s15, [r3]
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	f3af 8000 	nop.w
 8001250:	53f7ced9 	.word	0x53f7ced9
 8001254:	404ca5e3 	.word	0x404ca5e3
 8001258:	88888889 	.word	0x88888889
 800125c:	40020800 	.word	0x40020800
 8001260:	20000128 	.word	0x20000128
 8001264:	2000013c 	.word	0x2000013c
 8001268:	2000012c 	.word	0x2000012c
 800126c:	20000140 	.word	0x20000140
 8001270:	20000130 	.word	0x20000130
 8001274:	20000144 	.word	0x20000144
 8001278:	20000148 	.word	0x20000148
 800127c:	2000014c 	.word	0x2000014c
 8001280:	20000150 	.word	0x20000150
 8001284:	20000154 	.word	0x20000154
 8001288:	20000164 	.word	0x20000164
 800128c:	20000160 	.word	0x20000160
 8001290:	20000134 	.word	0x20000134
 8001294:	20000138 	.word	0x20000138
 8001298:	10624dd3 	.word	0x10624dd3
 800129c:	44fa0000 	.word	0x44fa0000

080012a0 <get_angles>:

void get_angles(){
 80012a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80012a4:	af00      	add	r7, sp, #0
	gyro_get_data();
 80012a6:	f7ff fe49 	bl	8000f3c <gyro_get_data>

		  gyro_x -= gyro_x_cal;
 80012aa:	4bc5      	ldr	r3, [pc, #788]	@ (80015c0 <get_angles+0x320>)
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	4bc5      	ldr	r3, [pc, #788]	@ (80015c4 <get_angles+0x324>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	1ad3      	subs	r3, r2, r3
 80012b4:	4ac2      	ldr	r2, [pc, #776]	@ (80015c0 <get_angles+0x320>)
 80012b6:	6013      	str	r3, [r2, #0]
		  gyro_y -= gyro_y_cal;
 80012b8:	4bc3      	ldr	r3, [pc, #780]	@ (80015c8 <get_angles+0x328>)
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	4bc3      	ldr	r3, [pc, #780]	@ (80015cc <get_angles+0x32c>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	4ac1      	ldr	r2, [pc, #772]	@ (80015c8 <get_angles+0x328>)
 80012c4:	6013      	str	r3, [r2, #0]
		  gyro_z -= gyro_z_cal;
 80012c6:	4bc2      	ldr	r3, [pc, #776]	@ (80015d0 <get_angles+0x330>)
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	4bc2      	ldr	r3, [pc, #776]	@ (80015d4 <get_angles+0x334>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	4abf      	ldr	r2, [pc, #764]	@ (80015d0 <get_angles+0x330>)
 80012d2:	6013      	str	r3, [r2, #0]

	//	  acc_x -= acc_x_cal;
	//	  acc_y -= acc_y_cal;
	//	  acc_z -= acc_z_cal;

		  gyro_pitch_input 	= ( gyro_pitch_input * 0.7 ) + ((float)( gyro_x / 65.5) * 0.3);
 80012d4:	4bc0      	ldr	r3, [pc, #768]	@ (80015d8 <get_angles+0x338>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff f8e1 	bl	80004a0 <__aeabi_f2d>
 80012de:	a3ae      	add	r3, pc, #696	@ (adr r3, 8001598 <get_angles+0x2f8>)
 80012e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e4:	f7ff f934 	bl	8000550 <__aeabi_dmul>
 80012e8:	4602      	mov	r2, r0
 80012ea:	460b      	mov	r3, r1
 80012ec:	4614      	mov	r4, r2
 80012ee:	461d      	mov	r5, r3
 80012f0:	4bb3      	ldr	r3, [pc, #716]	@ (80015c0 <get_angles+0x320>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff f8c1 	bl	800047c <__aeabi_i2d>
 80012fa:	a3a9      	add	r3, pc, #676	@ (adr r3, 80015a0 <get_angles+0x300>)
 80012fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001300:	f7ff fa50 	bl	80007a4 <__aeabi_ddiv>
 8001304:	4602      	mov	r2, r0
 8001306:	460b      	mov	r3, r1
 8001308:	4610      	mov	r0, r2
 800130a:	4619      	mov	r1, r3
 800130c:	f7ff fbf8 	bl	8000b00 <__aeabi_d2f>
 8001310:	4603      	mov	r3, r0
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff f8c4 	bl	80004a0 <__aeabi_f2d>
 8001318:	a3a3      	add	r3, pc, #652	@ (adr r3, 80015a8 <get_angles+0x308>)
 800131a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800131e:	f7ff f917 	bl	8000550 <__aeabi_dmul>
 8001322:	4602      	mov	r2, r0
 8001324:	460b      	mov	r3, r1
 8001326:	4620      	mov	r0, r4
 8001328:	4629      	mov	r1, r5
 800132a:	f7fe ff5b 	bl	80001e4 <__adddf3>
 800132e:	4602      	mov	r2, r0
 8001330:	460b      	mov	r3, r1
 8001332:	4610      	mov	r0, r2
 8001334:	4619      	mov	r1, r3
 8001336:	f7ff fbe3 	bl	8000b00 <__aeabi_d2f>
 800133a:	4603      	mov	r3, r0
 800133c:	4aa6      	ldr	r2, [pc, #664]	@ (80015d8 <get_angles+0x338>)
 800133e:	6013      	str	r3, [r2, #0]
		  gyro_roll_input 	= ( gyro_roll_input * 0.7 ) + ((float)( gyro_y / 65.5) * 0.3);
 8001340:	4ba6      	ldr	r3, [pc, #664]	@ (80015dc <get_angles+0x33c>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff f8ab 	bl	80004a0 <__aeabi_f2d>
 800134a:	a393      	add	r3, pc, #588	@ (adr r3, 8001598 <get_angles+0x2f8>)
 800134c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001350:	f7ff f8fe 	bl	8000550 <__aeabi_dmul>
 8001354:	4602      	mov	r2, r0
 8001356:	460b      	mov	r3, r1
 8001358:	4614      	mov	r4, r2
 800135a:	461d      	mov	r5, r3
 800135c:	4b9a      	ldr	r3, [pc, #616]	@ (80015c8 <get_angles+0x328>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff f88b 	bl	800047c <__aeabi_i2d>
 8001366:	a38e      	add	r3, pc, #568	@ (adr r3, 80015a0 <get_angles+0x300>)
 8001368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800136c:	f7ff fa1a 	bl	80007a4 <__aeabi_ddiv>
 8001370:	4602      	mov	r2, r0
 8001372:	460b      	mov	r3, r1
 8001374:	4610      	mov	r0, r2
 8001376:	4619      	mov	r1, r3
 8001378:	f7ff fbc2 	bl	8000b00 <__aeabi_d2f>
 800137c:	4603      	mov	r3, r0
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff f88e 	bl	80004a0 <__aeabi_f2d>
 8001384:	a388      	add	r3, pc, #544	@ (adr r3, 80015a8 <get_angles+0x308>)
 8001386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800138a:	f7ff f8e1 	bl	8000550 <__aeabi_dmul>
 800138e:	4602      	mov	r2, r0
 8001390:	460b      	mov	r3, r1
 8001392:	4620      	mov	r0, r4
 8001394:	4629      	mov	r1, r5
 8001396:	f7fe ff25 	bl	80001e4 <__adddf3>
 800139a:	4602      	mov	r2, r0
 800139c:	460b      	mov	r3, r1
 800139e:	4610      	mov	r0, r2
 80013a0:	4619      	mov	r1, r3
 80013a2:	f7ff fbad 	bl	8000b00 <__aeabi_d2f>
 80013a6:	4603      	mov	r3, r0
 80013a8:	4a8c      	ldr	r2, [pc, #560]	@ (80015dc <get_angles+0x33c>)
 80013aa:	6013      	str	r3, [r2, #0]
		  gyro_yaw_input 	= ( gyro_yaw_input * 0.7 ) + ((float)( gyro_z / 65.5) * 0.3);
 80013ac:	4b8c      	ldr	r3, [pc, #560]	@ (80015e0 <get_angles+0x340>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff f875 	bl	80004a0 <__aeabi_f2d>
 80013b6:	a378      	add	r3, pc, #480	@ (adr r3, 8001598 <get_angles+0x2f8>)
 80013b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013bc:	f7ff f8c8 	bl	8000550 <__aeabi_dmul>
 80013c0:	4602      	mov	r2, r0
 80013c2:	460b      	mov	r3, r1
 80013c4:	4614      	mov	r4, r2
 80013c6:	461d      	mov	r5, r3
 80013c8:	4b81      	ldr	r3, [pc, #516]	@ (80015d0 <get_angles+0x330>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff f855 	bl	800047c <__aeabi_i2d>
 80013d2:	a373      	add	r3, pc, #460	@ (adr r3, 80015a0 <get_angles+0x300>)
 80013d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d8:	f7ff f9e4 	bl	80007a4 <__aeabi_ddiv>
 80013dc:	4602      	mov	r2, r0
 80013de:	460b      	mov	r3, r1
 80013e0:	4610      	mov	r0, r2
 80013e2:	4619      	mov	r1, r3
 80013e4:	f7ff fb8c 	bl	8000b00 <__aeabi_d2f>
 80013e8:	4603      	mov	r3, r0
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff f858 	bl	80004a0 <__aeabi_f2d>
 80013f0:	a36d      	add	r3, pc, #436	@ (adr r3, 80015a8 <get_angles+0x308>)
 80013f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f6:	f7ff f8ab 	bl	8000550 <__aeabi_dmul>
 80013fa:	4602      	mov	r2, r0
 80013fc:	460b      	mov	r3, r1
 80013fe:	4620      	mov	r0, r4
 8001400:	4629      	mov	r1, r5
 8001402:	f7fe feef 	bl	80001e4 <__adddf3>
 8001406:	4602      	mov	r2, r0
 8001408:	460b      	mov	r3, r1
 800140a:	4610      	mov	r0, r2
 800140c:	4619      	mov	r1, r3
 800140e:	f7ff fb77 	bl	8000b00 <__aeabi_d2f>
 8001412:	4603      	mov	r3, r0
 8001414:	4a72      	ldr	r2, [pc, #456]	@ (80015e0 <get_angles+0x340>)
 8001416:	6013      	str	r3, [r2, #0]

		  angle_pitch += gyro_x * 0.0000611;
 8001418:	4b72      	ldr	r3, [pc, #456]	@ (80015e4 <get_angles+0x344>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff f83f 	bl	80004a0 <__aeabi_f2d>
 8001422:	4604      	mov	r4, r0
 8001424:	460d      	mov	r5, r1
 8001426:	4b66      	ldr	r3, [pc, #408]	@ (80015c0 <get_angles+0x320>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff f826 	bl	800047c <__aeabi_i2d>
 8001430:	a35f      	add	r3, pc, #380	@ (adr r3, 80015b0 <get_angles+0x310>)
 8001432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001436:	f7ff f88b 	bl	8000550 <__aeabi_dmul>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	4620      	mov	r0, r4
 8001440:	4629      	mov	r1, r5
 8001442:	f7fe fecf 	bl	80001e4 <__adddf3>
 8001446:	4602      	mov	r2, r0
 8001448:	460b      	mov	r3, r1
 800144a:	4610      	mov	r0, r2
 800144c:	4619      	mov	r1, r3
 800144e:	f7ff fb57 	bl	8000b00 <__aeabi_d2f>
 8001452:	4603      	mov	r3, r0
 8001454:	4a63      	ldr	r2, [pc, #396]	@ (80015e4 <get_angles+0x344>)
 8001456:	6013      	str	r3, [r2, #0]
		  angle_roll += gyro_y * 0.0000611;
 8001458:	4b63      	ldr	r3, [pc, #396]	@ (80015e8 <get_angles+0x348>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff f81f 	bl	80004a0 <__aeabi_f2d>
 8001462:	4604      	mov	r4, r0
 8001464:	460d      	mov	r5, r1
 8001466:	4b58      	ldr	r3, [pc, #352]	@ (80015c8 <get_angles+0x328>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff f806 	bl	800047c <__aeabi_i2d>
 8001470:	a34f      	add	r3, pc, #316	@ (adr r3, 80015b0 <get_angles+0x310>)
 8001472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001476:	f7ff f86b 	bl	8000550 <__aeabi_dmul>
 800147a:	4602      	mov	r2, r0
 800147c:	460b      	mov	r3, r1
 800147e:	4620      	mov	r0, r4
 8001480:	4629      	mov	r1, r5
 8001482:	f7fe feaf 	bl	80001e4 <__adddf3>
 8001486:	4602      	mov	r2, r0
 8001488:	460b      	mov	r3, r1
 800148a:	4610      	mov	r0, r2
 800148c:	4619      	mov	r1, r3
 800148e:	f7ff fb37 	bl	8000b00 <__aeabi_d2f>
 8001492:	4603      	mov	r3, r0
 8001494:	4a54      	ldr	r2, [pc, #336]	@ (80015e8 <get_angles+0x348>)
 8001496:	6013      	str	r3, [r2, #0]


		  angle_pitch -= angle_roll * sin(gyro_z * 0.000001066);
 8001498:	4b52      	ldr	r3, [pc, #328]	@ (80015e4 <get_angles+0x344>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4618      	mov	r0, r3
 800149e:	f7fe ffff 	bl	80004a0 <__aeabi_f2d>
 80014a2:	4604      	mov	r4, r0
 80014a4:	460d      	mov	r5, r1
 80014a6:	4b50      	ldr	r3, [pc, #320]	@ (80015e8 <get_angles+0x348>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7fe fff8 	bl	80004a0 <__aeabi_f2d>
 80014b0:	4680      	mov	r8, r0
 80014b2:	4689      	mov	r9, r1
 80014b4:	4b46      	ldr	r3, [pc, #280]	@ (80015d0 <get_angles+0x330>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7fe ffdf 	bl	800047c <__aeabi_i2d>
 80014be:	a33e      	add	r3, pc, #248	@ (adr r3, 80015b8 <get_angles+0x318>)
 80014c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c4:	f7ff f844 	bl	8000550 <__aeabi_dmul>
 80014c8:	4602      	mov	r2, r0
 80014ca:	460b      	mov	r3, r1
 80014cc:	ec43 2b17 	vmov	d7, r2, r3
 80014d0:	eeb0 0a47 	vmov.f32	s0, s14
 80014d4:	eef0 0a67 	vmov.f32	s1, s15
 80014d8:	f005 fe62 	bl	80071a0 <sin>
 80014dc:	ec53 2b10 	vmov	r2, r3, d0
 80014e0:	4640      	mov	r0, r8
 80014e2:	4649      	mov	r1, r9
 80014e4:	f7ff f834 	bl	8000550 <__aeabi_dmul>
 80014e8:	4602      	mov	r2, r0
 80014ea:	460b      	mov	r3, r1
 80014ec:	4620      	mov	r0, r4
 80014ee:	4629      	mov	r1, r5
 80014f0:	f7fe fe76 	bl	80001e0 <__aeabi_dsub>
 80014f4:	4602      	mov	r2, r0
 80014f6:	460b      	mov	r3, r1
 80014f8:	4610      	mov	r0, r2
 80014fa:	4619      	mov	r1, r3
 80014fc:	f7ff fb00 	bl	8000b00 <__aeabi_d2f>
 8001500:	4603      	mov	r3, r0
 8001502:	4a38      	ldr	r2, [pc, #224]	@ (80015e4 <get_angles+0x344>)
 8001504:	6013      	str	r3, [r2, #0]
		  angle_roll += angle_pitch * sin(gyro_z * 0.000001066);
 8001506:	4b38      	ldr	r3, [pc, #224]	@ (80015e8 <get_angles+0x348>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4618      	mov	r0, r3
 800150c:	f7fe ffc8 	bl	80004a0 <__aeabi_f2d>
 8001510:	4604      	mov	r4, r0
 8001512:	460d      	mov	r5, r1
 8001514:	4b33      	ldr	r3, [pc, #204]	@ (80015e4 <get_angles+0x344>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4618      	mov	r0, r3
 800151a:	f7fe ffc1 	bl	80004a0 <__aeabi_f2d>
 800151e:	4680      	mov	r8, r0
 8001520:	4689      	mov	r9, r1
 8001522:	4b2b      	ldr	r3, [pc, #172]	@ (80015d0 <get_angles+0x330>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4618      	mov	r0, r3
 8001528:	f7fe ffa8 	bl	800047c <__aeabi_i2d>
 800152c:	a322      	add	r3, pc, #136	@ (adr r3, 80015b8 <get_angles+0x318>)
 800152e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001532:	f7ff f80d 	bl	8000550 <__aeabi_dmul>
 8001536:	4602      	mov	r2, r0
 8001538:	460b      	mov	r3, r1
 800153a:	ec43 2b17 	vmov	d7, r2, r3
 800153e:	eeb0 0a47 	vmov.f32	s0, s14
 8001542:	eef0 0a67 	vmov.f32	s1, s15
 8001546:	f005 fe2b 	bl	80071a0 <sin>
 800154a:	ec53 2b10 	vmov	r2, r3, d0
 800154e:	4640      	mov	r0, r8
 8001550:	4649      	mov	r1, r9
 8001552:	f7fe fffd 	bl	8000550 <__aeabi_dmul>
 8001556:	4602      	mov	r2, r0
 8001558:	460b      	mov	r3, r1
 800155a:	4620      	mov	r0, r4
 800155c:	4629      	mov	r1, r5
 800155e:	f7fe fe41 	bl	80001e4 <__adddf3>
 8001562:	4602      	mov	r2, r0
 8001564:	460b      	mov	r3, r1
 8001566:	4610      	mov	r0, r2
 8001568:	4619      	mov	r1, r3
 800156a:	f7ff fac9 	bl	8000b00 <__aeabi_d2f>
 800156e:	4603      	mov	r3, r0
 8001570:	4a1d      	ldr	r2, [pc, #116]	@ (80015e8 <get_angles+0x348>)
 8001572:	6013      	str	r3, [r2, #0]

		  acc_total_vector = sqrt( ( acc_x*acc_x ) + ( acc_y * acc_y) + ( acc_z * acc_z ) );
 8001574:	4b1d      	ldr	r3, [pc, #116]	@ (80015ec <get_angles+0x34c>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a1c      	ldr	r2, [pc, #112]	@ (80015ec <get_angles+0x34c>)
 800157a:	6812      	ldr	r2, [r2, #0]
 800157c:	fb03 f202 	mul.w	r2, r3, r2
 8001580:	4b1b      	ldr	r3, [pc, #108]	@ (80015f0 <get_angles+0x350>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	491a      	ldr	r1, [pc, #104]	@ (80015f0 <get_angles+0x350>)
 8001586:	6809      	ldr	r1, [r1, #0]
 8001588:	fb01 f303 	mul.w	r3, r1, r3
 800158c:	441a      	add	r2, r3
 800158e:	4b19      	ldr	r3, [pc, #100]	@ (80015f4 <get_angles+0x354>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4918      	ldr	r1, [pc, #96]	@ (80015f4 <get_angles+0x354>)
 8001594:	6809      	ldr	r1, [r1, #0]
 8001596:	e02f      	b.n	80015f8 <get_angles+0x358>
 8001598:	66666666 	.word	0x66666666
 800159c:	3fe66666 	.word	0x3fe66666
 80015a0:	00000000 	.word	0x00000000
 80015a4:	40506000 	.word	0x40506000
 80015a8:	33333333 	.word	0x33333333
 80015ac:	3fd33333 	.word	0x3fd33333
 80015b0:	01d41596 	.word	0x01d41596
 80015b4:	3f10045a 	.word	0x3f10045a
 80015b8:	652c6e62 	.word	0x652c6e62
 80015bc:	3eb1e26f 	.word	0x3eb1e26f
 80015c0:	2000013c 	.word	0x2000013c
 80015c4:	20000128 	.word	0x20000128
 80015c8:	20000140 	.word	0x20000140
 80015cc:	2000012c 	.word	0x2000012c
 80015d0:	20000144 	.word	0x20000144
 80015d4:	20000130 	.word	0x20000130
 80015d8:	20000174 	.word	0x20000174
 80015dc:	20000170 	.word	0x20000170
 80015e0:	20000178 	.word	0x20000178
 80015e4:	2000015c 	.word	0x2000015c
 80015e8:	20000158 	.word	0x20000158
 80015ec:	20000148 	.word	0x20000148
 80015f0:	2000014c 	.word	0x2000014c
 80015f4:	20000150 	.word	0x20000150
 80015f8:	fb01 f303 	mul.w	r3, r1, r3
 80015fc:	4413      	add	r3, r2
 80015fe:	4618      	mov	r0, r3
 8001600:	f7fe ff3c 	bl	800047c <__aeabi_i2d>
 8001604:	4602      	mov	r2, r0
 8001606:	460b      	mov	r3, r1
 8001608:	ec43 2b10 	vmov	d0, r2, r3
 800160c:	f005 fd92 	bl	8007134 <sqrt>
 8001610:	ec53 2b10 	vmov	r2, r3, d0
 8001614:	4610      	mov	r0, r2
 8001616:	4619      	mov	r1, r3
 8001618:	f7ff fa4a 	bl	8000ab0 <__aeabi_d2iz>
 800161c:	4603      	mov	r3, r0
 800161e:	4aba      	ldr	r2, [pc, #744]	@ (8001908 <get_angles+0x668>)
 8001620:	6013      	str	r3, [r2, #0]

		  if ( abs(acc_y) < acc_total_vector ){
 8001622:	4bba      	ldr	r3, [pc, #744]	@ (800190c <get_angles+0x66c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800162a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800162e:	4bb6      	ldr	r3, [pc, #728]	@ (8001908 <get_angles+0x668>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	429a      	cmp	r2, r3
 8001634:	da32      	bge.n	800169c <get_angles+0x3fc>
			  angle_pitch_acc = asin( (float) acc_y / acc_total_vector ) * 57.296;
 8001636:	4bb5      	ldr	r3, [pc, #724]	@ (800190c <get_angles+0x66c>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	ee07 3a90 	vmov	s15, r3
 800163e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001642:	4bb1      	ldr	r3, [pc, #708]	@ (8001908 <get_angles+0x668>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	ee07 3a90 	vmov	s15, r3
 800164a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800164e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001652:	ee16 0a90 	vmov	r0, s13
 8001656:	f7fe ff23 	bl	80004a0 <__aeabi_f2d>
 800165a:	4602      	mov	r2, r0
 800165c:	460b      	mov	r3, r1
 800165e:	ec43 2b10 	vmov	d0, r2, r3
 8001662:	f005 fd33 	bl	80070cc <asin>
 8001666:	ec51 0b10 	vmov	r0, r1, d0
 800166a:	a3a1      	add	r3, pc, #644	@ (adr r3, 80018f0 <get_angles+0x650>)
 800166c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001670:	f7fe ff6e 	bl	8000550 <__aeabi_dmul>
 8001674:	4602      	mov	r2, r0
 8001676:	460b      	mov	r3, r1
 8001678:	4610      	mov	r0, r2
 800167a:	4619      	mov	r1, r3
 800167c:	f7ff fa40 	bl	8000b00 <__aeabi_d2f>
 8001680:	4603      	mov	r3, r0
 8001682:	4aa3      	ldr	r2, [pc, #652]	@ (8001910 <get_angles+0x670>)
 8001684:	6013      	str	r3, [r2, #0]
			  angle_pitch_acc -= angle_pitch_acc_cal;
 8001686:	4ba2      	ldr	r3, [pc, #648]	@ (8001910 <get_angles+0x670>)
 8001688:	ed93 7a00 	vldr	s14, [r3]
 800168c:	4ba1      	ldr	r3, [pc, #644]	@ (8001914 <get_angles+0x674>)
 800168e:	edd3 7a00 	vldr	s15, [r3]
 8001692:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001696:	4b9e      	ldr	r3, [pc, #632]	@ (8001910 <get_angles+0x670>)
 8001698:	edc3 7a00 	vstr	s15, [r3]
		  }

		  if ( abs(acc_x) < acc_total_vector ){
 800169c:	4b9e      	ldr	r3, [pc, #632]	@ (8001918 <get_angles+0x678>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80016a4:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80016a8:	4b97      	ldr	r3, [pc, #604]	@ (8001908 <get_angles+0x668>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	da32      	bge.n	8001716 <get_angles+0x476>
			  angle_roll_acc = asin( (float) acc_x / acc_total_vector ) * 57.296;
 80016b0:	4b99      	ldr	r3, [pc, #612]	@ (8001918 <get_angles+0x678>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	ee07 3a90 	vmov	s15, r3
 80016b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016bc:	4b92      	ldr	r3, [pc, #584]	@ (8001908 <get_angles+0x668>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	ee07 3a90 	vmov	s15, r3
 80016c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016c8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80016cc:	ee16 0a90 	vmov	r0, s13
 80016d0:	f7fe fee6 	bl	80004a0 <__aeabi_f2d>
 80016d4:	4602      	mov	r2, r0
 80016d6:	460b      	mov	r3, r1
 80016d8:	ec43 2b10 	vmov	d0, r2, r3
 80016dc:	f005 fcf6 	bl	80070cc <asin>
 80016e0:	ec51 0b10 	vmov	r0, r1, d0
 80016e4:	a382      	add	r3, pc, #520	@ (adr r3, 80018f0 <get_angles+0x650>)
 80016e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ea:	f7fe ff31 	bl	8000550 <__aeabi_dmul>
 80016ee:	4602      	mov	r2, r0
 80016f0:	460b      	mov	r3, r1
 80016f2:	4610      	mov	r0, r2
 80016f4:	4619      	mov	r1, r3
 80016f6:	f7ff fa03 	bl	8000b00 <__aeabi_d2f>
 80016fa:	4603      	mov	r3, r0
 80016fc:	4a87      	ldr	r2, [pc, #540]	@ (800191c <get_angles+0x67c>)
 80016fe:	6013      	str	r3, [r2, #0]
			  angle_roll_acc -= angle_roll_acc_cal;
 8001700:	4b86      	ldr	r3, [pc, #536]	@ (800191c <get_angles+0x67c>)
 8001702:	ed93 7a00 	vldr	s14, [r3]
 8001706:	4b86      	ldr	r3, [pc, #536]	@ (8001920 <get_angles+0x680>)
 8001708:	edd3 7a00 	vldr	s15, [r3]
 800170c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001710:	4b82      	ldr	r3, [pc, #520]	@ (800191c <get_angles+0x67c>)
 8001712:	edc3 7a00 	vstr	s15, [r3]
		  }

		  state_pitch = state_pitch + 0.004*gyro_pitch_input;
 8001716:	4b83      	ldr	r3, [pc, #524]	@ (8001924 <get_angles+0x684>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4618      	mov	r0, r3
 800171c:	f7fe fec0 	bl	80004a0 <__aeabi_f2d>
 8001720:	4604      	mov	r4, r0
 8001722:	460d      	mov	r5, r1
 8001724:	4b80      	ldr	r3, [pc, #512]	@ (8001928 <get_angles+0x688>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4618      	mov	r0, r3
 800172a:	f7fe feb9 	bl	80004a0 <__aeabi_f2d>
 800172e:	a372      	add	r3, pc, #456	@ (adr r3, 80018f8 <get_angles+0x658>)
 8001730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001734:	f7fe ff0c 	bl	8000550 <__aeabi_dmul>
 8001738:	4602      	mov	r2, r0
 800173a:	460b      	mov	r3, r1
 800173c:	4620      	mov	r0, r4
 800173e:	4629      	mov	r1, r5
 8001740:	f7fe fd50 	bl	80001e4 <__adddf3>
 8001744:	4602      	mov	r2, r0
 8001746:	460b      	mov	r3, r1
 8001748:	4610      	mov	r0, r2
 800174a:	4619      	mov	r1, r3
 800174c:	f7ff f9d8 	bl	8000b00 <__aeabi_d2f>
 8001750:	4603      	mov	r3, r0
 8001752:	4a74      	ldr	r2, [pc, #464]	@ (8001924 <get_angles+0x684>)
 8001754:	6013      	str	r3, [r2, #0]
		  uncertainity_pitch = uncertainity_pitch + 0.004*0.004*4*4;
 8001756:	4b75      	ldr	r3, [pc, #468]	@ (800192c <get_angles+0x68c>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4618      	mov	r0, r3
 800175c:	f7fe fea0 	bl	80004a0 <__aeabi_f2d>
 8001760:	a367      	add	r3, pc, #412	@ (adr r3, 8001900 <get_angles+0x660>)
 8001762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001766:	f7fe fd3d 	bl	80001e4 <__adddf3>
 800176a:	4602      	mov	r2, r0
 800176c:	460b      	mov	r3, r1
 800176e:	4610      	mov	r0, r2
 8001770:	4619      	mov	r1, r3
 8001772:	f7ff f9c5 	bl	8000b00 <__aeabi_d2f>
 8001776:	4603      	mov	r3, r0
 8001778:	4a6c      	ldr	r2, [pc, #432]	@ (800192c <get_angles+0x68c>)
 800177a:	6013      	str	r3, [r2, #0]
		  gain_pitch = uncertainity_pitch /(uncertainity_pitch + 3*3);
 800177c:	4b6b      	ldr	r3, [pc, #428]	@ (800192c <get_angles+0x68c>)
 800177e:	edd3 6a00 	vldr	s13, [r3]
 8001782:	4b6a      	ldr	r3, [pc, #424]	@ (800192c <get_angles+0x68c>)
 8001784:	edd3 7a00 	vldr	s15, [r3]
 8001788:	eeb2 7a02 	vmov.f32	s14, #34	@ 0x41100000  9.0
 800178c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001790:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001794:	4b66      	ldr	r3, [pc, #408]	@ (8001930 <get_angles+0x690>)
 8001796:	edc3 7a00 	vstr	s15, [r3]
		  state_pitch = state_pitch + gain_pitch*(angle_pitch_acc - state_pitch);
 800179a:	4b5d      	ldr	r3, [pc, #372]	@ (8001910 <get_angles+0x670>)
 800179c:	ed93 7a00 	vldr	s14, [r3]
 80017a0:	4b60      	ldr	r3, [pc, #384]	@ (8001924 <get_angles+0x684>)
 80017a2:	edd3 7a00 	vldr	s15, [r3]
 80017a6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017aa:	4b61      	ldr	r3, [pc, #388]	@ (8001930 <get_angles+0x690>)
 80017ac:	edd3 7a00 	vldr	s15, [r3]
 80017b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017b4:	4b5b      	ldr	r3, [pc, #364]	@ (8001924 <get_angles+0x684>)
 80017b6:	edd3 7a00 	vldr	s15, [r3]
 80017ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017be:	4b59      	ldr	r3, [pc, #356]	@ (8001924 <get_angles+0x684>)
 80017c0:	edc3 7a00 	vstr	s15, [r3]
		  uncertainity_pitch = (1 - gain_pitch) * uncertainity_pitch;
 80017c4:	4b5a      	ldr	r3, [pc, #360]	@ (8001930 <get_angles+0x690>)
 80017c6:	edd3 7a00 	vldr	s15, [r3]
 80017ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80017ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017d2:	4b56      	ldr	r3, [pc, #344]	@ (800192c <get_angles+0x68c>)
 80017d4:	edd3 7a00 	vldr	s15, [r3]
 80017d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017dc:	4b53      	ldr	r3, [pc, #332]	@ (800192c <get_angles+0x68c>)
 80017de:	edc3 7a00 	vstr	s15, [r3]
		  angle_pitch = state_pitch;
 80017e2:	4b50      	ldr	r3, [pc, #320]	@ (8001924 <get_angles+0x684>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a53      	ldr	r2, [pc, #332]	@ (8001934 <get_angles+0x694>)
 80017e8:	6013      	str	r3, [r2, #0]

		  state_roll = state_roll + 0.004*gyro_roll_input;
 80017ea:	4b53      	ldr	r3, [pc, #332]	@ (8001938 <get_angles+0x698>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7fe fe56 	bl	80004a0 <__aeabi_f2d>
 80017f4:	4604      	mov	r4, r0
 80017f6:	460d      	mov	r5, r1
 80017f8:	4b50      	ldr	r3, [pc, #320]	@ (800193c <get_angles+0x69c>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7fe fe4f 	bl	80004a0 <__aeabi_f2d>
 8001802:	a33d      	add	r3, pc, #244	@ (adr r3, 80018f8 <get_angles+0x658>)
 8001804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001808:	f7fe fea2 	bl	8000550 <__aeabi_dmul>
 800180c:	4602      	mov	r2, r0
 800180e:	460b      	mov	r3, r1
 8001810:	4620      	mov	r0, r4
 8001812:	4629      	mov	r1, r5
 8001814:	f7fe fce6 	bl	80001e4 <__adddf3>
 8001818:	4602      	mov	r2, r0
 800181a:	460b      	mov	r3, r1
 800181c:	4610      	mov	r0, r2
 800181e:	4619      	mov	r1, r3
 8001820:	f7ff f96e 	bl	8000b00 <__aeabi_d2f>
 8001824:	4603      	mov	r3, r0
 8001826:	4a44      	ldr	r2, [pc, #272]	@ (8001938 <get_angles+0x698>)
 8001828:	6013      	str	r3, [r2, #0]
		  uncertainity_roll = uncertainity_roll + 0.004*0.004*4*4;
 800182a:	4b45      	ldr	r3, [pc, #276]	@ (8001940 <get_angles+0x6a0>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4618      	mov	r0, r3
 8001830:	f7fe fe36 	bl	80004a0 <__aeabi_f2d>
 8001834:	a332      	add	r3, pc, #200	@ (adr r3, 8001900 <get_angles+0x660>)
 8001836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800183a:	f7fe fcd3 	bl	80001e4 <__adddf3>
 800183e:	4602      	mov	r2, r0
 8001840:	460b      	mov	r3, r1
 8001842:	4610      	mov	r0, r2
 8001844:	4619      	mov	r1, r3
 8001846:	f7ff f95b 	bl	8000b00 <__aeabi_d2f>
 800184a:	4603      	mov	r3, r0
 800184c:	4a3c      	ldr	r2, [pc, #240]	@ (8001940 <get_angles+0x6a0>)
 800184e:	6013      	str	r3, [r2, #0]
		  gain_roll = uncertainity_roll /(uncertainity_roll + 3*3);
 8001850:	4b3b      	ldr	r3, [pc, #236]	@ (8001940 <get_angles+0x6a0>)
 8001852:	edd3 6a00 	vldr	s13, [r3]
 8001856:	4b3a      	ldr	r3, [pc, #232]	@ (8001940 <get_angles+0x6a0>)
 8001858:	edd3 7a00 	vldr	s15, [r3]
 800185c:	eeb2 7a02 	vmov.f32	s14, #34	@ 0x41100000  9.0
 8001860:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001864:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001868:	4b36      	ldr	r3, [pc, #216]	@ (8001944 <get_angles+0x6a4>)
 800186a:	edc3 7a00 	vstr	s15, [r3]
		  state_roll = state_roll + gain_roll*(angle_roll_acc - state_roll);
 800186e:	4b2b      	ldr	r3, [pc, #172]	@ (800191c <get_angles+0x67c>)
 8001870:	ed93 7a00 	vldr	s14, [r3]
 8001874:	4b30      	ldr	r3, [pc, #192]	@ (8001938 <get_angles+0x698>)
 8001876:	edd3 7a00 	vldr	s15, [r3]
 800187a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800187e:	4b31      	ldr	r3, [pc, #196]	@ (8001944 <get_angles+0x6a4>)
 8001880:	edd3 7a00 	vldr	s15, [r3]
 8001884:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001888:	4b2b      	ldr	r3, [pc, #172]	@ (8001938 <get_angles+0x698>)
 800188a:	edd3 7a00 	vldr	s15, [r3]
 800188e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001892:	4b29      	ldr	r3, [pc, #164]	@ (8001938 <get_angles+0x698>)
 8001894:	edc3 7a00 	vstr	s15, [r3]
		  uncertainity_roll = (1 - gain_roll) * uncertainity_roll;
 8001898:	4b2a      	ldr	r3, [pc, #168]	@ (8001944 <get_angles+0x6a4>)
 800189a:	edd3 7a00 	vldr	s15, [r3]
 800189e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80018a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018a6:	4b26      	ldr	r3, [pc, #152]	@ (8001940 <get_angles+0x6a0>)
 80018a8:	edd3 7a00 	vldr	s15, [r3]
 80018ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018b0:	4b23      	ldr	r3, [pc, #140]	@ (8001940 <get_angles+0x6a0>)
 80018b2:	edc3 7a00 	vstr	s15, [r3]
		  angle_roll = state_roll;
 80018b6:	4b20      	ldr	r3, [pc, #128]	@ (8001938 <get_angles+0x698>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a23      	ldr	r2, [pc, #140]	@ (8001948 <get_angles+0x6a8>)
 80018bc:	6013      	str	r3, [r2, #0]

//		  angle_pitch = angle_pitch * 0.9996 + angle_pitch_acc * 0.0004;
//		  angle_roll = angle_roll * 0.9996 + angle_roll_acc * 0.0004;

		  pitch_level_adjust = angle_pitch * 15;
 80018be:	4b1d      	ldr	r3, [pc, #116]	@ (8001934 <get_angles+0x694>)
 80018c0:	edd3 7a00 	vldr	s15, [r3]
 80018c4:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 80018c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018cc:	4b1f      	ldr	r3, [pc, #124]	@ (800194c <get_angles+0x6ac>)
 80018ce:	edc3 7a00 	vstr	s15, [r3]
		  roll_level_adjust = angle_roll * 15;
 80018d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001948 <get_angles+0x6a8>)
 80018d4:	edd3 7a00 	vldr	s15, [r3]
 80018d8:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 80018dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001950 <get_angles+0x6b0>)
 80018e2:	edc3 7a00 	vstr	s15, [r3]
}
 80018e6:	bf00      	nop
 80018e8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80018ec:	f3af 8000 	nop.w
 80018f0:	53f7ced9 	.word	0x53f7ced9
 80018f4:	404ca5e3 	.word	0x404ca5e3
 80018f8:	d2f1a9fc 	.word	0xd2f1a9fc
 80018fc:	3f70624d 	.word	0x3f70624d
 8001900:	a0b5ed8d 	.word	0xa0b5ed8d
 8001904:	3f30c6f7 	.word	0x3f30c6f7
 8001908:	20000154 	.word	0x20000154
 800190c:	2000014c 	.word	0x2000014c
 8001910:	20000164 	.word	0x20000164
 8001914:	20000134 	.word	0x20000134
 8001918:	20000148 	.word	0x20000148
 800191c:	20000160 	.word	0x20000160
 8001920:	20000138 	.word	0x20000138
 8001924:	20000184 	.word	0x20000184
 8001928:	20000174 	.word	0x20000174
 800192c:	2000018c 	.word	0x2000018c
 8001930:	2000017c 	.word	0x2000017c
 8001934:	2000015c 	.word	0x2000015c
 8001938:	20000188 	.word	0x20000188
 800193c:	20000170 	.word	0x20000170
 8001940:	20000190 	.word	0x20000190
 8001944:	20000180 	.word	0x20000180
 8001948:	20000158 	.word	0x20000158
 800194c:	2000016c 	.word	0x2000016c
 8001950:	20000168 	.word	0x20000168

08001954 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001958:	f001 f9a0 	bl	8002c9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800195c:	f000 fcfc 	bl	8002358 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001960:	f000 feba 	bl	80026d8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001964:	f000 fe98 	bl	8002698 <MX_DMA_Init>
  MX_I2C1_Init();
 8001968:	f000 fd5e 	bl	8002428 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800196c:	f000 fe6a 	bl	8002644 <MX_USART1_UART_Init>
  MX_TIM5_Init();
 8001970:	f000 fd88 	bl	8002484 <MX_TIM5_Init>
  MX_TIM11_Init();
 8001974:	f000 fe42 	bl	80025fc <MX_TIM11_Init>
  MX_TIM10_Init();
 8001978:	f000 fe1c 	bl	80025b4 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);
 800197c:	2064      	movs	r0, #100	@ 0x64
 800197e:	f001 f9ff 	bl	8002d80 <HAL_Delay>
  HAL_TIM_Base_Start(&htim11);
 8001982:	48ab      	ldr	r0, [pc, #684]	@ (8001c30 <main+0x2dc>)
 8001984:	f003 fce6 	bl	8005354 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim10);
 8001988:	48aa      	ldr	r0, [pc, #680]	@ (8001c34 <main+0x2e0>)
 800198a:	f003 fce3 	bl	8005354 <HAL_TIM_Base_Start>


  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 800198e:	2100      	movs	r1, #0
 8001990:	48a9      	ldr	r0, [pc, #676]	@ (8001c38 <main+0x2e4>)
 8001992:	f003 fd93 	bl	80054bc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8001996:	2104      	movs	r1, #4
 8001998:	48a7      	ldr	r0, [pc, #668]	@ (8001c38 <main+0x2e4>)
 800199a:	f003 fd8f 	bl	80054bc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 800199e:	2108      	movs	r1, #8
 80019a0:	48a5      	ldr	r0, [pc, #660]	@ (8001c38 <main+0x2e4>)
 80019a2:	f003 fd8b 	bl	80054bc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 80019a6:	210c      	movs	r1, #12
 80019a8:	48a3      	ldr	r0, [pc, #652]	@ (8001c38 <main+0x2e4>)
 80019aa:	f003 fd87 	bl	80054bc <HAL_TIM_PWM_Start>
  HAL_Delay(100);
 80019ae:	2064      	movs	r0, #100	@ 0x64
 80019b0:	f001 f9e6 	bl	8002d80 <HAL_Delay>

  __HAL_TIM_SET_COMPARE(&htim5,TIM_CHANNEL_1,0);
 80019b4:	4ba0      	ldr	r3, [pc, #640]	@ (8001c38 <main+0x2e4>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2200      	movs	r2, #0
 80019ba:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim5,TIM_CHANNEL_2,0);
 80019bc:	4b9e      	ldr	r3, [pc, #632]	@ (8001c38 <main+0x2e4>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2200      	movs	r2, #0
 80019c2:	639a      	str	r2, [r3, #56]	@ 0x38
  __HAL_TIM_SET_COMPARE(&htim5,TIM_CHANNEL_3,0);
 80019c4:	4b9c      	ldr	r3, [pc, #624]	@ (8001c38 <main+0x2e4>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2200      	movs	r2, #0
 80019ca:	63da      	str	r2, [r3, #60]	@ 0x3c
  __HAL_TIM_SET_COMPARE(&htim5,TIM_CHANNEL_4,0);
 80019cc:	4b9a      	ldr	r3, [pc, #616]	@ (8001c38 <main+0x2e4>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2200      	movs	r2, #0
 80019d2:	641a      	str	r2, [r3, #64]	@ 0x40

  HAL_Delay(100);
 80019d4:	2064      	movs	r0, #100	@ 0x64
 80019d6:	f001 f9d3 	bl	8002d80 <HAL_Delay>
  bmp280_init_default_params(&bmp280.params);
  bmp280.addr = BMP280_I2C_ADDRESS_0;
  bmp280.i2c = &hi2c1;
  bmp280_init(&bmp280, &bmp280.params);
*/
  MPU6050_Init();
 80019da:	f7ff fa59 	bl	8000e90 <MPU6050_Init>
  HAL_Delay(1000);
 80019de:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019e2:	f001 f9cd 	bl	8002d80 <HAL_Delay>
  mpu6050_cal();
 80019e6:	f7ff fb1f 	bl	8001028 <mpu6050_cal>
  HAL_Delay(1000);
 80019ea:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019ee:	f001 f9c7 	bl	8002d80 <HAL_Delay>
  loop_time = __HAL_TIM_GET_COUNTER(&htim10);
 80019f2:	4b90      	ldr	r3, [pc, #576]	@ (8001c34 <main+0x2e0>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019f8:	461a      	mov	r2, r3
 80019fa:	4b90      	ldr	r3, [pc, #576]	@ (8001c3c <main+0x2e8>)
 80019fc:	601a      	str	r2, [r3, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //__HAL_TIM_SET_COUNTER(&htim10,0);

	  receiver_input_channel_1 = ch[0];
 80019fe:	4b90      	ldr	r3, [pc, #576]	@ (8001c40 <main+0x2ec>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a90      	ldr	r2, [pc, #576]	@ (8001c44 <main+0x2f0>)
 8001a04:	6013      	str	r3, [r2, #0]
	  receiver_input_channel_2 = ch[1];
 8001a06:	4b8e      	ldr	r3, [pc, #568]	@ (8001c40 <main+0x2ec>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	4a8f      	ldr	r2, [pc, #572]	@ (8001c48 <main+0x2f4>)
 8001a0c:	6013      	str	r3, [r2, #0]
	  receiver_input_channel_3 = ch[2];
 8001a0e:	4b8c      	ldr	r3, [pc, #560]	@ (8001c40 <main+0x2ec>)
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	4a8e      	ldr	r2, [pc, #568]	@ (8001c4c <main+0x2f8>)
 8001a14:	6013      	str	r3, [r2, #0]
	  receiver_input_channel_4 = ch[3];
 8001a16:	4b8a      	ldr	r3, [pc, #552]	@ (8001c40 <main+0x2ec>)
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	4a8d      	ldr	r2, [pc, #564]	@ (8001c50 <main+0x2fc>)
 8001a1c:	6013      	str	r3, [r2, #0]
	  receiver_input_channel_5 = ch[4];
 8001a1e:	4b88      	ldr	r3, [pc, #544]	@ (8001c40 <main+0x2ec>)
 8001a20:	691b      	ldr	r3, [r3, #16]
 8001a22:	4a8c      	ldr	r2, [pc, #560]	@ (8001c54 <main+0x300>)
 8001a24:	6013      	str	r3, [r2, #0]
	  receiver_input_channel_6 = ch[5];
 8001a26:	4b86      	ldr	r3, [pc, #536]	@ (8001c40 <main+0x2ec>)
 8001a28:	695b      	ldr	r3, [r3, #20]
 8001a2a:	4a8b      	ldr	r2, [pc, #556]	@ (8001c58 <main+0x304>)
 8001a2c:	6013      	str	r3, [r2, #0]

	  get_angles();
 8001a2e:	f7ff fc37 	bl	80012a0 <get_angles>

	  if ( receiver_input_channel_6 > 1550 ){
 8001a32:	4b89      	ldr	r3, [pc, #548]	@ (8001c58 <main+0x304>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f240 620e 	movw	r2, #1550	@ 0x60e
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	dd24      	ble.n	8001a88 <main+0x134>
		  arm = 2;
 8001a3e:	4b87      	ldr	r3, [pc, #540]	@ (8001c5c <main+0x308>)
 8001a40:	2202      	movs	r2, #2
 8001a42:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_WritePin(led_arm_GPIO_Port, led_arm_Pin, 1);
 8001a44:	2201      	movs	r2, #1
 8001a46:	2101      	movs	r1, #1
 8001a48:	4885      	ldr	r0, [pc, #532]	@ (8001c60 <main+0x30c>)
 8001a4a:	f001 ffcf 	bl	80039ec <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(led_disarm_GPIO_Port, led_disarm_Pin, 0);
 8001a4e:	2200      	movs	r2, #0
 8001a50:	2102      	movs	r1, #2
 8001a52:	4883      	ldr	r0, [pc, #524]	@ (8001c60 <main+0x30c>)
 8001a54:	f001 ffca 	bl	80039ec <HAL_GPIO_WritePin>

		  pid_i_mem_roll = 0;
 8001a58:	4b82      	ldr	r3, [pc, #520]	@ (8001c64 <main+0x310>)
 8001a5a:	f04f 0200 	mov.w	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
		  pid_last_roll_d_error = 0;
 8001a60:	4b81      	ldr	r3, [pc, #516]	@ (8001c68 <main+0x314>)
 8001a62:	f04f 0200 	mov.w	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
		  pid_i_mem_pitch = 0;
 8001a68:	4b80      	ldr	r3, [pc, #512]	@ (8001c6c <main+0x318>)
 8001a6a:	f04f 0200 	mov.w	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
		  pid_last_pitch_d_eroor = 0;
 8001a70:	4b7f      	ldr	r3, [pc, #508]	@ (8001c70 <main+0x31c>)
 8001a72:	f04f 0200 	mov.w	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
		  pid_i_mem_yaw = 0;
 8001a78:	4b7e      	ldr	r3, [pc, #504]	@ (8001c74 <main+0x320>)
 8001a7a:	f04f 0200 	mov.w	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
		  pid_last_yaw_d_error = 0;
 8001a80:	4b7d      	ldr	r3, [pc, #500]	@ (8001c78 <main+0x324>)
 8001a82:	f04f 0200 	mov.w	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]
	  }

	  if ( arm == 2 && receiver_input_channel_6 < 1450){
 8001a88:	4b74      	ldr	r3, [pc, #464]	@ (8001c5c <main+0x308>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d112      	bne.n	8001ab6 <main+0x162>
 8001a90:	4b71      	ldr	r3, [pc, #452]	@ (8001c58 <main+0x304>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f240 52a9 	movw	r2, #1449	@ 0x5a9
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	dc0c      	bgt.n	8001ab6 <main+0x162>
		  arm =0;
 8001a9c:	4b6f      	ldr	r3, [pc, #444]	@ (8001c5c <main+0x308>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_WritePin(led_arm_GPIO_Port, led_arm_Pin, 0);
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	2101      	movs	r1, #1
 8001aa6:	486e      	ldr	r0, [pc, #440]	@ (8001c60 <main+0x30c>)
 8001aa8:	f001 ffa0 	bl	80039ec <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(led_disarm_GPIO_Port, led_disarm_Pin, 1);
 8001aac:	2201      	movs	r2, #1
 8001aae:	2102      	movs	r1, #2
 8001ab0:	486b      	ldr	r0, [pc, #428]	@ (8001c60 <main+0x30c>)
 8001ab2:	f001 ff9b 	bl	80039ec <HAL_GPIO_WritePin>
	  }


	  pid_roll_setpoint =0;
 8001ab6:	4b71      	ldr	r3, [pc, #452]	@ (8001c7c <main+0x328>)
 8001ab8:	f04f 0200 	mov.w	r2, #0
 8001abc:	601a      	str	r2, [r3, #0]
	  if ( receiver_input_channel_1 > 1508 ) {
 8001abe:	4b61      	ldr	r3, [pc, #388]	@ (8001c44 <main+0x2f0>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f240 52e4 	movw	r2, #1508	@ 0x5e4
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	dd0b      	ble.n	8001ae2 <main+0x18e>
		  pid_roll_setpoint = (receiver_input_channel_1 - 1508);
 8001aca:	4b5e      	ldr	r3, [pc, #376]	@ (8001c44 <main+0x2f0>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f2a3 53e4 	subw	r3, r3, #1508	@ 0x5e4
 8001ad2:	ee07 3a90 	vmov	s15, r3
 8001ad6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ada:	4b68      	ldr	r3, [pc, #416]	@ (8001c7c <main+0x328>)
 8001adc:	edc3 7a00 	vstr	s15, [r3]
 8001ae0:	e015      	b.n	8001b0e <main+0x1ba>
	  }
	  else if ( receiver_input_channel_1  < 1492 ){
 8001ae2:	4b58      	ldr	r3, [pc, #352]	@ (8001c44 <main+0x2f0>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f240 52d3 	movw	r2, #1491	@ 0x5d3
 8001aea:	4293      	cmp	r3, r2
 8001aec:	dc0b      	bgt.n	8001b06 <main+0x1b2>
		  pid_roll_setpoint = ( receiver_input_channel_1  - 1492 );
 8001aee:	4b55      	ldr	r3, [pc, #340]	@ (8001c44 <main+0x2f0>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f2a3 53d4 	subw	r3, r3, #1492	@ 0x5d4
 8001af6:	ee07 3a90 	vmov	s15, r3
 8001afa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001afe:	4b5f      	ldr	r3, [pc, #380]	@ (8001c7c <main+0x328>)
 8001b00:	edc3 7a00 	vstr	s15, [r3]
 8001b04:	e003      	b.n	8001b0e <main+0x1ba>
	  }
	  else{
		  receiver_input_channel_1 = 1500;
 8001b06:	4b4f      	ldr	r3, [pc, #316]	@ (8001c44 <main+0x2f0>)
 8001b08:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001b0c:	601a      	str	r2, [r3, #0]
	  }

	  pid_roll_setpoint -= roll_level_adjust;
 8001b0e:	4b5b      	ldr	r3, [pc, #364]	@ (8001c7c <main+0x328>)
 8001b10:	ed93 7a00 	vldr	s14, [r3]
 8001b14:	4b5a      	ldr	r3, [pc, #360]	@ (8001c80 <main+0x32c>)
 8001b16:	edd3 7a00 	vldr	s15, [r3]
 8001b1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b1e:	4b57      	ldr	r3, [pc, #348]	@ (8001c7c <main+0x328>)
 8001b20:	edc3 7a00 	vstr	s15, [r3]
	  pid_roll_setpoint /= turning_speed;
 8001b24:	4b55      	ldr	r3, [pc, #340]	@ (8001c7c <main+0x328>)
 8001b26:	edd3 6a00 	vldr	s13, [r3]
 8001b2a:	4b56      	ldr	r3, [pc, #344]	@ (8001c84 <main+0x330>)
 8001b2c:	ed93 7a00 	vldr	s14, [r3]
 8001b30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b34:	4b51      	ldr	r3, [pc, #324]	@ (8001c7c <main+0x328>)
 8001b36:	edc3 7a00 	vstr	s15, [r3]

	  pid_pitch_setpoint =0;
 8001b3a:	4b53      	ldr	r3, [pc, #332]	@ (8001c88 <main+0x334>)
 8001b3c:	f04f 0200 	mov.w	r2, #0
 8001b40:	601a      	str	r2, [r3, #0]
	  if ( receiver_input_channel_2 > 1508 ) {
 8001b42:	4b41      	ldr	r3, [pc, #260]	@ (8001c48 <main+0x2f4>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f240 52e4 	movw	r2, #1508	@ 0x5e4
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	dd0b      	ble.n	8001b66 <main+0x212>
		  pid_pitch_setpoint = ( receiver_input_channel_2 - 1508 );
 8001b4e:	4b3e      	ldr	r3, [pc, #248]	@ (8001c48 <main+0x2f4>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f2a3 53e4 	subw	r3, r3, #1508	@ 0x5e4
 8001b56:	ee07 3a90 	vmov	s15, r3
 8001b5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b5e:	4b4a      	ldr	r3, [pc, #296]	@ (8001c88 <main+0x334>)
 8001b60:	edc3 7a00 	vstr	s15, [r3]
 8001b64:	e015      	b.n	8001b92 <main+0x23e>
	  }
	  else if ( receiver_input_channel_2 < 1492 ) {
 8001b66:	4b38      	ldr	r3, [pc, #224]	@ (8001c48 <main+0x2f4>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f240 52d3 	movw	r2, #1491	@ 0x5d3
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	dc0b      	bgt.n	8001b8a <main+0x236>
		  pid_pitch_setpoint = ( receiver_input_channel_2 - 1492 );
 8001b72:	4b35      	ldr	r3, [pc, #212]	@ (8001c48 <main+0x2f4>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f2a3 53d4 	subw	r3, r3, #1492	@ 0x5d4
 8001b7a:	ee07 3a90 	vmov	s15, r3
 8001b7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b82:	4b41      	ldr	r3, [pc, #260]	@ (8001c88 <main+0x334>)
 8001b84:	edc3 7a00 	vstr	s15, [r3]
 8001b88:	e003      	b.n	8001b92 <main+0x23e>
	  }
	  else{
	  	receiver_input_channel_2 = 1500;
 8001b8a:	4b2f      	ldr	r3, [pc, #188]	@ (8001c48 <main+0x2f4>)
 8001b8c:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001b90:	601a      	str	r2, [r3, #0]
	  }

	  pid_pitch_setpoint -= pitch_level_adjust;
 8001b92:	4b3d      	ldr	r3, [pc, #244]	@ (8001c88 <main+0x334>)
 8001b94:	ed93 7a00 	vldr	s14, [r3]
 8001b98:	4b3c      	ldr	r3, [pc, #240]	@ (8001c8c <main+0x338>)
 8001b9a:	edd3 7a00 	vldr	s15, [r3]
 8001b9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ba2:	4b39      	ldr	r3, [pc, #228]	@ (8001c88 <main+0x334>)
 8001ba4:	edc3 7a00 	vstr	s15, [r3]
	  pid_pitch_setpoint /= turning_speed;
 8001ba8:	4b37      	ldr	r3, [pc, #220]	@ (8001c88 <main+0x334>)
 8001baa:	edd3 6a00 	vldr	s13, [r3]
 8001bae:	4b35      	ldr	r3, [pc, #212]	@ (8001c84 <main+0x330>)
 8001bb0:	ed93 7a00 	vldr	s14, [r3]
 8001bb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bb8:	4b33      	ldr	r3, [pc, #204]	@ (8001c88 <main+0x334>)
 8001bba:	edc3 7a00 	vstr	s15, [r3]


	  pid_yaw_setpoint =0;
 8001bbe:	4b34      	ldr	r3, [pc, #208]	@ (8001c90 <main+0x33c>)
 8001bc0:	f04f 0200 	mov.w	r2, #0
 8001bc4:	601a      	str	r2, [r3, #0]
	  if ( receiver_input_channel_3 > 1050 ){
 8001bc6:	4b21      	ldr	r3, [pc, #132]	@ (8001c4c <main+0x2f8>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f240 421a 	movw	r2, #1050	@ 0x41a
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	dd60      	ble.n	8001c94 <main+0x340>
		  if ( receiver_input_channel_4 > 1508 ) {
 8001bd2:	4b1f      	ldr	r3, [pc, #124]	@ (8001c50 <main+0x2fc>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f240 52e4 	movw	r2, #1508	@ 0x5e4
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	dd10      	ble.n	8001c00 <main+0x2ac>
			  pid_yaw_setpoint = ( receiver_input_channel_4 - 1508 ) / turning_speed;
 8001bde:	4b1c      	ldr	r3, [pc, #112]	@ (8001c50 <main+0x2fc>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f2a3 53e4 	subw	r3, r3, #1508	@ 0x5e4
 8001be6:	ee07 3a90 	vmov	s15, r3
 8001bea:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001bee:	4b25      	ldr	r3, [pc, #148]	@ (8001c84 <main+0x330>)
 8001bf0:	ed93 7a00 	vldr	s14, [r3]
 8001bf4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bf8:	4b25      	ldr	r3, [pc, #148]	@ (8001c90 <main+0x33c>)
 8001bfa:	edc3 7a00 	vstr	s15, [r3]
 8001bfe:	e04d      	b.n	8001c9c <main+0x348>
		  }
		  else if ( receiver_input_channel_4 < 1492 ){
 8001c00:	4b13      	ldr	r3, [pc, #76]	@ (8001c50 <main+0x2fc>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f240 52d3 	movw	r2, #1491	@ 0x5d3
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	dc47      	bgt.n	8001c9c <main+0x348>
			  pid_yaw_setpoint = ( receiver_input_channel_4 - 1492 ) / turning_speed;
 8001c0c:	4b10      	ldr	r3, [pc, #64]	@ (8001c50 <main+0x2fc>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f2a3 53d4 	subw	r3, r3, #1492	@ 0x5d4
 8001c14:	ee07 3a90 	vmov	s15, r3
 8001c18:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001c1c:	4b19      	ldr	r3, [pc, #100]	@ (8001c84 <main+0x330>)
 8001c1e:	ed93 7a00 	vldr	s14, [r3]
 8001c22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c26:	4b1a      	ldr	r3, [pc, #104]	@ (8001c90 <main+0x33c>)
 8001c28:	edc3 7a00 	vstr	s15, [r3]
 8001c2c:	e036      	b.n	8001c9c <main+0x348>
 8001c2e:	bf00      	nop
 8001c30:	20000224 	.word	0x20000224
 8001c34:	200001dc 	.word	0x200001dc
 8001c38:	20000194 	.word	0x20000194
 8001c3c:	20000390 	.word	0x20000390
 8001c40:	20000310 	.word	0x20000310
 8001c44:	20000338 	.word	0x20000338
 8001c48:	2000033c 	.word	0x2000033c
 8001c4c:	20000340 	.word	0x20000340
 8001c50:	20000344 	.word	0x20000344
 8001c54:	20000348 	.word	0x20000348
 8001c58:	2000034c 	.word	0x2000034c
 8001c5c:	2000038c 	.word	0x2000038c
 8001c60:	40020400 	.word	0x40020400
 8001c64:	20000364 	.word	0x20000364
 8001c68:	20000370 	.word	0x20000370
 8001c6c:	20000368 	.word	0x20000368
 8001c70:	20000374 	.word	0x20000374
 8001c74:	2000036c 	.word	0x2000036c
 8001c78:	20000378 	.word	0x20000378
 8001c7c:	20000354 	.word	0x20000354
 8001c80:	20000168 	.word	0x20000168
 8001c84:	20000044 	.word	0x20000044
 8001c88:	20000358 	.word	0x20000358
 8001c8c:	2000016c 	.word	0x2000016c
 8001c90:	2000035c 	.word	0x2000035c
		  }
	  }
	  else{
	  	  receiver_input_channel_4 = 1500;
 8001c94:	4bbb      	ldr	r3, [pc, #748]	@ (8001f84 <main+0x630>)
 8001c96:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001c9a:	601a      	str	r2, [r3, #0]
	  }

	  pid_error_temp = gyro_roll_input - pid_roll_setpoint;
 8001c9c:	4bba      	ldr	r3, [pc, #744]	@ (8001f88 <main+0x634>)
 8001c9e:	ed93 7a00 	vldr	s14, [r3]
 8001ca2:	4bba      	ldr	r3, [pc, #744]	@ (8001f8c <main+0x638>)
 8001ca4:	edd3 7a00 	vldr	s15, [r3]
 8001ca8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cac:	4bb8      	ldr	r3, [pc, #736]	@ (8001f90 <main+0x63c>)
 8001cae:	edc3 7a00 	vstr	s15, [r3]
	  pid_i_mem_roll += pid_i_gain_roll * pid_error_temp;
 8001cb2:	4bb8      	ldr	r3, [pc, #736]	@ (8001f94 <main+0x640>)
 8001cb4:	ed93 7a00 	vldr	s14, [r3]
 8001cb8:	4bb5      	ldr	r3, [pc, #724]	@ (8001f90 <main+0x63c>)
 8001cba:	edd3 7a00 	vldr	s15, [r3]
 8001cbe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cc2:	4bb5      	ldr	r3, [pc, #724]	@ (8001f98 <main+0x644>)
 8001cc4:	edd3 7a00 	vldr	s15, [r3]
 8001cc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ccc:	4bb2      	ldr	r3, [pc, #712]	@ (8001f98 <main+0x644>)
 8001cce:	edc3 7a00 	vstr	s15, [r3]

	  if ( pid_i_mem_roll > pid_max_roll ) pid_i_mem_roll = pid_max_roll;
 8001cd2:	4bb2      	ldr	r3, [pc, #712]	@ (8001f9c <main+0x648>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	ee07 3a90 	vmov	s15, r3
 8001cda:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cde:	4bae      	ldr	r3, [pc, #696]	@ (8001f98 <main+0x644>)
 8001ce0:	edd3 7a00 	vldr	s15, [r3]
 8001ce4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cec:	d509      	bpl.n	8001d02 <main+0x3ae>
 8001cee:	4bab      	ldr	r3, [pc, #684]	@ (8001f9c <main+0x648>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	ee07 3a90 	vmov	s15, r3
 8001cf6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cfa:	4ba7      	ldr	r3, [pc, #668]	@ (8001f98 <main+0x644>)
 8001cfc:	edc3 7a00 	vstr	s15, [r3]
 8001d00:	e018      	b.n	8001d34 <main+0x3e0>
	  else if ( pid_i_mem_roll < pid_max_roll * -1 ) pid_i_mem_roll = pid_max_roll * -1;
 8001d02:	4ba6      	ldr	r3, [pc, #664]	@ (8001f9c <main+0x648>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	425b      	negs	r3, r3
 8001d08:	ee07 3a90 	vmov	s15, r3
 8001d0c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d10:	4ba1      	ldr	r3, [pc, #644]	@ (8001f98 <main+0x644>)
 8001d12:	edd3 7a00 	vldr	s15, [r3]
 8001d16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d1e:	dd09      	ble.n	8001d34 <main+0x3e0>
 8001d20:	4b9e      	ldr	r3, [pc, #632]	@ (8001f9c <main+0x648>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	425b      	negs	r3, r3
 8001d26:	ee07 3a90 	vmov	s15, r3
 8001d2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d2e:	4b9a      	ldr	r3, [pc, #616]	@ (8001f98 <main+0x644>)
 8001d30:	edc3 7a00 	vstr	s15, [r3]

	  pid_roll_output = ( pid_p_gain_roll * pid_error_temp ) + pid_i_mem_roll + ( pid_d_gain_roll * ( pid_error_temp - pid_last_roll_d_error));
 8001d34:	4b9a      	ldr	r3, [pc, #616]	@ (8001fa0 <main+0x64c>)
 8001d36:	ed93 7a00 	vldr	s14, [r3]
 8001d3a:	4b95      	ldr	r3, [pc, #596]	@ (8001f90 <main+0x63c>)
 8001d3c:	edd3 7a00 	vldr	s15, [r3]
 8001d40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d44:	4b94      	ldr	r3, [pc, #592]	@ (8001f98 <main+0x644>)
 8001d46:	edd3 7a00 	vldr	s15, [r3]
 8001d4a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d4e:	4b90      	ldr	r3, [pc, #576]	@ (8001f90 <main+0x63c>)
 8001d50:	edd3 6a00 	vldr	s13, [r3]
 8001d54:	4b93      	ldr	r3, [pc, #588]	@ (8001fa4 <main+0x650>)
 8001d56:	edd3 7a00 	vldr	s15, [r3]
 8001d5a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001d5e:	4b92      	ldr	r3, [pc, #584]	@ (8001fa8 <main+0x654>)
 8001d60:	edd3 7a00 	vldr	s15, [r3]
 8001d64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d6c:	4b8f      	ldr	r3, [pc, #572]	@ (8001fac <main+0x658>)
 8001d6e:	edc3 7a00 	vstr	s15, [r3]

	  if ( pid_roll_output > pid_max_roll ) pid_roll_output = pid_max_roll;
 8001d72:	4b8a      	ldr	r3, [pc, #552]	@ (8001f9c <main+0x648>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	ee07 3a90 	vmov	s15, r3
 8001d7a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d7e:	4b8b      	ldr	r3, [pc, #556]	@ (8001fac <main+0x658>)
 8001d80:	edd3 7a00 	vldr	s15, [r3]
 8001d84:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d8c:	d509      	bpl.n	8001da2 <main+0x44e>
 8001d8e:	4b83      	ldr	r3, [pc, #524]	@ (8001f9c <main+0x648>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	ee07 3a90 	vmov	s15, r3
 8001d96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d9a:	4b84      	ldr	r3, [pc, #528]	@ (8001fac <main+0x658>)
 8001d9c:	edc3 7a00 	vstr	s15, [r3]
 8001da0:	e018      	b.n	8001dd4 <main+0x480>
	  else if ( pid_roll_output < pid_max_roll * -1) pid_roll_output = pid_max_roll * -1;
 8001da2:	4b7e      	ldr	r3, [pc, #504]	@ (8001f9c <main+0x648>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	425b      	negs	r3, r3
 8001da8:	ee07 3a90 	vmov	s15, r3
 8001dac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001db0:	4b7e      	ldr	r3, [pc, #504]	@ (8001fac <main+0x658>)
 8001db2:	edd3 7a00 	vldr	s15, [r3]
 8001db6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dbe:	dd09      	ble.n	8001dd4 <main+0x480>
 8001dc0:	4b76      	ldr	r3, [pc, #472]	@ (8001f9c <main+0x648>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	425b      	negs	r3, r3
 8001dc6:	ee07 3a90 	vmov	s15, r3
 8001dca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dce:	4b77      	ldr	r3, [pc, #476]	@ (8001fac <main+0x658>)
 8001dd0:	edc3 7a00 	vstr	s15, [r3]

	  pid_last_roll_d_error = pid_error_temp;
 8001dd4:	4b6e      	ldr	r3, [pc, #440]	@ (8001f90 <main+0x63c>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a72      	ldr	r2, [pc, #456]	@ (8001fa4 <main+0x650>)
 8001dda:	6013      	str	r3, [r2, #0]


	  pid_error_temp = gyro_pitch_input - pid_pitch_setpoint;
 8001ddc:	4b74      	ldr	r3, [pc, #464]	@ (8001fb0 <main+0x65c>)
 8001dde:	ed93 7a00 	vldr	s14, [r3]
 8001de2:	4b74      	ldr	r3, [pc, #464]	@ (8001fb4 <main+0x660>)
 8001de4:	edd3 7a00 	vldr	s15, [r3]
 8001de8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dec:	4b68      	ldr	r3, [pc, #416]	@ (8001f90 <main+0x63c>)
 8001dee:	edc3 7a00 	vstr	s15, [r3]
	  pid_i_mem_pitch += pid_i_gain_pitch * pid_error_temp;
 8001df2:	4b71      	ldr	r3, [pc, #452]	@ (8001fb8 <main+0x664>)
 8001df4:	ed93 7a00 	vldr	s14, [r3]
 8001df8:	4b65      	ldr	r3, [pc, #404]	@ (8001f90 <main+0x63c>)
 8001dfa:	edd3 7a00 	vldr	s15, [r3]
 8001dfe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e02:	4b6e      	ldr	r3, [pc, #440]	@ (8001fbc <main+0x668>)
 8001e04:	edd3 7a00 	vldr	s15, [r3]
 8001e08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e0c:	4b6b      	ldr	r3, [pc, #428]	@ (8001fbc <main+0x668>)
 8001e0e:	edc3 7a00 	vstr	s15, [r3]

	  if ( pid_i_mem_pitch > pid_max_pitch ) pid_i_mem_pitch = pid_max_pitch;
 8001e12:	4b6b      	ldr	r3, [pc, #428]	@ (8001fc0 <main+0x66c>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	ee07 3a90 	vmov	s15, r3
 8001e1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e1e:	4b67      	ldr	r3, [pc, #412]	@ (8001fbc <main+0x668>)
 8001e20:	edd3 7a00 	vldr	s15, [r3]
 8001e24:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e2c:	d509      	bpl.n	8001e42 <main+0x4ee>
 8001e2e:	4b64      	ldr	r3, [pc, #400]	@ (8001fc0 <main+0x66c>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	ee07 3a90 	vmov	s15, r3
 8001e36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e3a:	4b60      	ldr	r3, [pc, #384]	@ (8001fbc <main+0x668>)
 8001e3c:	edc3 7a00 	vstr	s15, [r3]
 8001e40:	e018      	b.n	8001e74 <main+0x520>
	  else if ( pid_i_mem_pitch < pid_max_pitch * -1 ) pid_i_mem_pitch = pid_max_pitch * -1;
 8001e42:	4b5f      	ldr	r3, [pc, #380]	@ (8001fc0 <main+0x66c>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	425b      	negs	r3, r3
 8001e48:	ee07 3a90 	vmov	s15, r3
 8001e4c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e50:	4b5a      	ldr	r3, [pc, #360]	@ (8001fbc <main+0x668>)
 8001e52:	edd3 7a00 	vldr	s15, [r3]
 8001e56:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e5e:	dd09      	ble.n	8001e74 <main+0x520>
 8001e60:	4b57      	ldr	r3, [pc, #348]	@ (8001fc0 <main+0x66c>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	425b      	negs	r3, r3
 8001e66:	ee07 3a90 	vmov	s15, r3
 8001e6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e6e:	4b53      	ldr	r3, [pc, #332]	@ (8001fbc <main+0x668>)
 8001e70:	edc3 7a00 	vstr	s15, [r3]

	  pid_pitch_output = ( pid_p_gain_pitch * pid_error_temp ) + pid_i_mem_pitch + ( pid_d_gain_pitch * ( pid_error_temp - pid_last_pitch_d_eroor));
 8001e74:	4b53      	ldr	r3, [pc, #332]	@ (8001fc4 <main+0x670>)
 8001e76:	ed93 7a00 	vldr	s14, [r3]
 8001e7a:	4b45      	ldr	r3, [pc, #276]	@ (8001f90 <main+0x63c>)
 8001e7c:	edd3 7a00 	vldr	s15, [r3]
 8001e80:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e84:	4b4d      	ldr	r3, [pc, #308]	@ (8001fbc <main+0x668>)
 8001e86:	edd3 7a00 	vldr	s15, [r3]
 8001e8a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e8e:	4b40      	ldr	r3, [pc, #256]	@ (8001f90 <main+0x63c>)
 8001e90:	edd3 6a00 	vldr	s13, [r3]
 8001e94:	4b4c      	ldr	r3, [pc, #304]	@ (8001fc8 <main+0x674>)
 8001e96:	edd3 7a00 	vldr	s15, [r3]
 8001e9a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001e9e:	4b4b      	ldr	r3, [pc, #300]	@ (8001fcc <main+0x678>)
 8001ea0:	edd3 7a00 	vldr	s15, [r3]
 8001ea4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ea8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eac:	4b48      	ldr	r3, [pc, #288]	@ (8001fd0 <main+0x67c>)
 8001eae:	edc3 7a00 	vstr	s15, [r3]

	  if ( pid_pitch_output > pid_max_pitch ) pid_pitch_output = pid_max_pitch;
 8001eb2:	4b43      	ldr	r3, [pc, #268]	@ (8001fc0 <main+0x66c>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	ee07 3a90 	vmov	s15, r3
 8001eba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ebe:	4b44      	ldr	r3, [pc, #272]	@ (8001fd0 <main+0x67c>)
 8001ec0:	edd3 7a00 	vldr	s15, [r3]
 8001ec4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ecc:	d509      	bpl.n	8001ee2 <main+0x58e>
 8001ece:	4b3c      	ldr	r3, [pc, #240]	@ (8001fc0 <main+0x66c>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	ee07 3a90 	vmov	s15, r3
 8001ed6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001eda:	4b3d      	ldr	r3, [pc, #244]	@ (8001fd0 <main+0x67c>)
 8001edc:	edc3 7a00 	vstr	s15, [r3]
 8001ee0:	e018      	b.n	8001f14 <main+0x5c0>
	  else if ( pid_pitch_output < pid_max_pitch * -1 ) pid_pitch_output = pid_max_pitch * -1;
 8001ee2:	4b37      	ldr	r3, [pc, #220]	@ (8001fc0 <main+0x66c>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	425b      	negs	r3, r3
 8001ee8:	ee07 3a90 	vmov	s15, r3
 8001eec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ef0:	4b37      	ldr	r3, [pc, #220]	@ (8001fd0 <main+0x67c>)
 8001ef2:	edd3 7a00 	vldr	s15, [r3]
 8001ef6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001efe:	dd09      	ble.n	8001f14 <main+0x5c0>
 8001f00:	4b2f      	ldr	r3, [pc, #188]	@ (8001fc0 <main+0x66c>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	425b      	negs	r3, r3
 8001f06:	ee07 3a90 	vmov	s15, r3
 8001f0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f0e:	4b30      	ldr	r3, [pc, #192]	@ (8001fd0 <main+0x67c>)
 8001f10:	edc3 7a00 	vstr	s15, [r3]

	  pid_last_pitch_d_eroor = pid_error_temp;
 8001f14:	4b1e      	ldr	r3, [pc, #120]	@ (8001f90 <main+0x63c>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a2b      	ldr	r2, [pc, #172]	@ (8001fc8 <main+0x674>)
 8001f1a:	6013      	str	r3, [r2, #0]


	  pid_error_temp = gyro_yaw_input - pid_yaw_setpoint;
 8001f1c:	4b2d      	ldr	r3, [pc, #180]	@ (8001fd4 <main+0x680>)
 8001f1e:	ed93 7a00 	vldr	s14, [r3]
 8001f22:	4b2d      	ldr	r3, [pc, #180]	@ (8001fd8 <main+0x684>)
 8001f24:	edd3 7a00 	vldr	s15, [r3]
 8001f28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f2c:	4b18      	ldr	r3, [pc, #96]	@ (8001f90 <main+0x63c>)
 8001f2e:	edc3 7a00 	vstr	s15, [r3]
	  pid_i_mem_yaw += pid_p_gain_yaw * pid_error_temp;
 8001f32:	4b2a      	ldr	r3, [pc, #168]	@ (8001fdc <main+0x688>)
 8001f34:	ed93 7a00 	vldr	s14, [r3]
 8001f38:	4b15      	ldr	r3, [pc, #84]	@ (8001f90 <main+0x63c>)
 8001f3a:	edd3 7a00 	vldr	s15, [r3]
 8001f3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f42:	4b27      	ldr	r3, [pc, #156]	@ (8001fe0 <main+0x68c>)
 8001f44:	edd3 7a00 	vldr	s15, [r3]
 8001f48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f4c:	4b24      	ldr	r3, [pc, #144]	@ (8001fe0 <main+0x68c>)
 8001f4e:	edc3 7a00 	vstr	s15, [r3]

	  if ( pid_i_mem_yaw > pid_max_yaw ) pid_i_mem_yaw = pid_max_yaw;
 8001f52:	4b24      	ldr	r3, [pc, #144]	@ (8001fe4 <main+0x690>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	ee07 3a90 	vmov	s15, r3
 8001f5a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f5e:	4b20      	ldr	r3, [pc, #128]	@ (8001fe0 <main+0x68c>)
 8001f60:	edd3 7a00 	vldr	s15, [r3]
 8001f64:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f6c:	d53c      	bpl.n	8001fe8 <main+0x694>
 8001f6e:	4b1d      	ldr	r3, [pc, #116]	@ (8001fe4 <main+0x690>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	ee07 3a90 	vmov	s15, r3
 8001f76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f7a:	4b19      	ldr	r3, [pc, #100]	@ (8001fe0 <main+0x68c>)
 8001f7c:	edc3 7a00 	vstr	s15, [r3]
 8001f80:	e04b      	b.n	800201a <main+0x6c6>
 8001f82:	bf00      	nop
 8001f84:	20000344 	.word	0x20000344
 8001f88:	20000170 	.word	0x20000170
 8001f8c:	20000354 	.word	0x20000354
 8001f90:	2000037c 	.word	0x2000037c
 8001f94:	20000004 	.word	0x20000004
 8001f98:	20000364 	.word	0x20000364
 8001f9c:	2000001c 	.word	0x2000001c
 8001fa0:	20000000 	.word	0x20000000
 8001fa4:	20000370 	.word	0x20000370
 8001fa8:	20000008 	.word	0x20000008
 8001fac:	20000380 	.word	0x20000380
 8001fb0:	20000174 	.word	0x20000174
 8001fb4:	20000358 	.word	0x20000358
 8001fb8:	20000010 	.word	0x20000010
 8001fbc:	20000368 	.word	0x20000368
 8001fc0:	20000020 	.word	0x20000020
 8001fc4:	2000000c 	.word	0x2000000c
 8001fc8:	20000374 	.word	0x20000374
 8001fcc:	20000014 	.word	0x20000014
 8001fd0:	20000384 	.word	0x20000384
 8001fd4:	20000178 	.word	0x20000178
 8001fd8:	2000035c 	.word	0x2000035c
 8001fdc:	20000018 	.word	0x20000018
 8001fe0:	2000036c 	.word	0x2000036c
 8001fe4:	20000024 	.word	0x20000024
	  else if ( pid_i_mem_yaw < pid_max_yaw * -1 ) pid_i_mem_yaw = pid_max_yaw * -1;
 8001fe8:	4b9d      	ldr	r3, [pc, #628]	@ (8002260 <main+0x90c>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	425b      	negs	r3, r3
 8001fee:	ee07 3a90 	vmov	s15, r3
 8001ff2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ff6:	4b9b      	ldr	r3, [pc, #620]	@ (8002264 <main+0x910>)
 8001ff8:	edd3 7a00 	vldr	s15, [r3]
 8001ffc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002004:	dd09      	ble.n	800201a <main+0x6c6>
 8002006:	4b96      	ldr	r3, [pc, #600]	@ (8002260 <main+0x90c>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	425b      	negs	r3, r3
 800200c:	ee07 3a90 	vmov	s15, r3
 8002010:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002014:	4b93      	ldr	r3, [pc, #588]	@ (8002264 <main+0x910>)
 8002016:	edc3 7a00 	vstr	s15, [r3]

	  pid_yaw_output = ( pid_p_gain_yaw * pid_error_temp ) + pid_i_mem_yaw + ( pid_d_gain_yaw * ( pid_error_temp - pid_last_yaw_d_error ));
 800201a:	4b93      	ldr	r3, [pc, #588]	@ (8002268 <main+0x914>)
 800201c:	ed93 7a00 	vldr	s14, [r3]
 8002020:	4b92      	ldr	r3, [pc, #584]	@ (800226c <main+0x918>)
 8002022:	edd3 7a00 	vldr	s15, [r3]
 8002026:	ee27 7a27 	vmul.f32	s14, s14, s15
 800202a:	4b8e      	ldr	r3, [pc, #568]	@ (8002264 <main+0x910>)
 800202c:	edd3 7a00 	vldr	s15, [r3]
 8002030:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002034:	4b8d      	ldr	r3, [pc, #564]	@ (800226c <main+0x918>)
 8002036:	edd3 6a00 	vldr	s13, [r3]
 800203a:	4b8d      	ldr	r3, [pc, #564]	@ (8002270 <main+0x91c>)
 800203c:	edd3 7a00 	vldr	s15, [r3]
 8002040:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002044:	4b8b      	ldr	r3, [pc, #556]	@ (8002274 <main+0x920>)
 8002046:	edd3 7a00 	vldr	s15, [r3]
 800204a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800204e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002052:	4b89      	ldr	r3, [pc, #548]	@ (8002278 <main+0x924>)
 8002054:	edc3 7a00 	vstr	s15, [r3]

	  if ( pid_yaw_output > pid_max_yaw ) pid_yaw_output = pid_max_yaw;
 8002058:	4b81      	ldr	r3, [pc, #516]	@ (8002260 <main+0x90c>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	ee07 3a90 	vmov	s15, r3
 8002060:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002064:	4b84      	ldr	r3, [pc, #528]	@ (8002278 <main+0x924>)
 8002066:	edd3 7a00 	vldr	s15, [r3]
 800206a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800206e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002072:	d509      	bpl.n	8002088 <main+0x734>
 8002074:	4b7a      	ldr	r3, [pc, #488]	@ (8002260 <main+0x90c>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	ee07 3a90 	vmov	s15, r3
 800207c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002080:	4b7d      	ldr	r3, [pc, #500]	@ (8002278 <main+0x924>)
 8002082:	edc3 7a00 	vstr	s15, [r3]
 8002086:	e018      	b.n	80020ba <main+0x766>
	  else if ( pid_yaw_output < pid_max_yaw * -1 ) pid_yaw_output = pid_max_yaw * -1;
 8002088:	4b75      	ldr	r3, [pc, #468]	@ (8002260 <main+0x90c>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	425b      	negs	r3, r3
 800208e:	ee07 3a90 	vmov	s15, r3
 8002092:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002096:	4b78      	ldr	r3, [pc, #480]	@ (8002278 <main+0x924>)
 8002098:	edd3 7a00 	vldr	s15, [r3]
 800209c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020a4:	dd09      	ble.n	80020ba <main+0x766>
 80020a6:	4b6e      	ldr	r3, [pc, #440]	@ (8002260 <main+0x90c>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	425b      	negs	r3, r3
 80020ac:	ee07 3a90 	vmov	s15, r3
 80020b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020b4:	4b70      	ldr	r3, [pc, #448]	@ (8002278 <main+0x924>)
 80020b6:	edc3 7a00 	vstr	s15, [r3]

	  pid_last_yaw_d_error = pid_error_temp;
 80020ba:	4b6c      	ldr	r3, [pc, #432]	@ (800226c <main+0x918>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a6c      	ldr	r2, [pc, #432]	@ (8002270 <main+0x91c>)
 80020c0:	6013      	str	r3, [r2, #0]

	  throttle = receiver_input_channel_3;
 80020c2:	4b6e      	ldr	r3, [pc, #440]	@ (800227c <main+0x928>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a6e      	ldr	r2, [pc, #440]	@ (8002280 <main+0x92c>)
 80020c8:	6013      	str	r3, [r2, #0]


	  if ( arm == 2 ){
 80020ca:	4b6e      	ldr	r3, [pc, #440]	@ (8002284 <main+0x930>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	f040 80ea 	bne.w	80022a8 <main+0x954>
		  if ( throttle > 1800 ) throttle = 1800;
 80020d4:	4b6a      	ldr	r3, [pc, #424]	@ (8002280 <main+0x92c>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 80020dc:	dd03      	ble.n	80020e6 <main+0x792>
 80020de:	4b68      	ldr	r3, [pc, #416]	@ (8002280 <main+0x92c>)
 80020e0:	f44f 62e1 	mov.w	r2, #1800	@ 0x708
 80020e4:	601a      	str	r2, [r3, #0]

		  esc_1 = throttle - pid_pitch_output + pid_roll_output - pid_yaw_output;
 80020e6:	4b66      	ldr	r3, [pc, #408]	@ (8002280 <main+0x92c>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	ee07 3a90 	vmov	s15, r3
 80020ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020f2:	4b65      	ldr	r3, [pc, #404]	@ (8002288 <main+0x934>)
 80020f4:	edd3 7a00 	vldr	s15, [r3]
 80020f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020fc:	4b63      	ldr	r3, [pc, #396]	@ (800228c <main+0x938>)
 80020fe:	edd3 7a00 	vldr	s15, [r3]
 8002102:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002106:	4b5c      	ldr	r3, [pc, #368]	@ (8002278 <main+0x924>)
 8002108:	edd3 7a00 	vldr	s15, [r3]
 800210c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002110:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002114:	ee17 2a90 	vmov	r2, s15
 8002118:	4b5d      	ldr	r3, [pc, #372]	@ (8002290 <main+0x93c>)
 800211a:	601a      	str	r2, [r3, #0]
		  esc_2 = throttle + pid_pitch_output + pid_roll_output + pid_yaw_output;
 800211c:	4b58      	ldr	r3, [pc, #352]	@ (8002280 <main+0x92c>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	ee07 3a90 	vmov	s15, r3
 8002124:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002128:	4b57      	ldr	r3, [pc, #348]	@ (8002288 <main+0x934>)
 800212a:	edd3 7a00 	vldr	s15, [r3]
 800212e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002132:	4b56      	ldr	r3, [pc, #344]	@ (800228c <main+0x938>)
 8002134:	edd3 7a00 	vldr	s15, [r3]
 8002138:	ee37 7a27 	vadd.f32	s14, s14, s15
 800213c:	4b4e      	ldr	r3, [pc, #312]	@ (8002278 <main+0x924>)
 800213e:	edd3 7a00 	vldr	s15, [r3]
 8002142:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002146:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800214a:	ee17 2a90 	vmov	r2, s15
 800214e:	4b51      	ldr	r3, [pc, #324]	@ (8002294 <main+0x940>)
 8002150:	601a      	str	r2, [r3, #0]
		  esc_3 = throttle + pid_pitch_output - pid_roll_output - pid_yaw_output;
 8002152:	4b4b      	ldr	r3, [pc, #300]	@ (8002280 <main+0x92c>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	ee07 3a90 	vmov	s15, r3
 800215a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800215e:	4b4a      	ldr	r3, [pc, #296]	@ (8002288 <main+0x934>)
 8002160:	edd3 7a00 	vldr	s15, [r3]
 8002164:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002168:	4b48      	ldr	r3, [pc, #288]	@ (800228c <main+0x938>)
 800216a:	edd3 7a00 	vldr	s15, [r3]
 800216e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002172:	4b41      	ldr	r3, [pc, #260]	@ (8002278 <main+0x924>)
 8002174:	edd3 7a00 	vldr	s15, [r3]
 8002178:	ee77 7a67 	vsub.f32	s15, s14, s15
 800217c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002180:	ee17 2a90 	vmov	r2, s15
 8002184:	4b44      	ldr	r3, [pc, #272]	@ (8002298 <main+0x944>)
 8002186:	601a      	str	r2, [r3, #0]
		  esc_4 = throttle - pid_pitch_output - pid_roll_output + pid_yaw_output;
 8002188:	4b3d      	ldr	r3, [pc, #244]	@ (8002280 <main+0x92c>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	ee07 3a90 	vmov	s15, r3
 8002190:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002194:	4b3c      	ldr	r3, [pc, #240]	@ (8002288 <main+0x934>)
 8002196:	edd3 7a00 	vldr	s15, [r3]
 800219a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800219e:	4b3b      	ldr	r3, [pc, #236]	@ (800228c <main+0x938>)
 80021a0:	edd3 7a00 	vldr	s15, [r3]
 80021a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80021a8:	4b33      	ldr	r3, [pc, #204]	@ (8002278 <main+0x924>)
 80021aa:	edd3 7a00 	vldr	s15, [r3]
 80021ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021b6:	ee17 2a90 	vmov	r2, s15
 80021ba:	4b38      	ldr	r3, [pc, #224]	@ (800229c <main+0x948>)
 80021bc:	601a      	str	r2, [r3, #0]

		  if ( esc_1 < min_throthle ) esc_1 = min_throthle;
 80021be:	4b34      	ldr	r3, [pc, #208]	@ (8002290 <main+0x93c>)
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	4b37      	ldr	r3, [pc, #220]	@ (80022a0 <main+0x94c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	429a      	cmp	r2, r3
 80021c8:	da03      	bge.n	80021d2 <main+0x87e>
 80021ca:	4b35      	ldr	r3, [pc, #212]	@ (80022a0 <main+0x94c>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a30      	ldr	r2, [pc, #192]	@ (8002290 <main+0x93c>)
 80021d0:	6013      	str	r3, [r2, #0]
		  if ( esc_2 < min_throthle ) esc_2 = min_throthle;
 80021d2:	4b30      	ldr	r3, [pc, #192]	@ (8002294 <main+0x940>)
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	4b32      	ldr	r3, [pc, #200]	@ (80022a0 <main+0x94c>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	429a      	cmp	r2, r3
 80021dc:	da03      	bge.n	80021e6 <main+0x892>
 80021de:	4b30      	ldr	r3, [pc, #192]	@ (80022a0 <main+0x94c>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a2c      	ldr	r2, [pc, #176]	@ (8002294 <main+0x940>)
 80021e4:	6013      	str	r3, [r2, #0]
		  if ( esc_3 < min_throthle ) esc_3 = min_throthle;
 80021e6:	4b2c      	ldr	r3, [pc, #176]	@ (8002298 <main+0x944>)
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	4b2d      	ldr	r3, [pc, #180]	@ (80022a0 <main+0x94c>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	da03      	bge.n	80021fa <main+0x8a6>
 80021f2:	4b2b      	ldr	r3, [pc, #172]	@ (80022a0 <main+0x94c>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a28      	ldr	r2, [pc, #160]	@ (8002298 <main+0x944>)
 80021f8:	6013      	str	r3, [r2, #0]
		  if ( esc_4 < min_throthle ) esc_4 = min_throthle;
 80021fa:	4b28      	ldr	r3, [pc, #160]	@ (800229c <main+0x948>)
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	4b28      	ldr	r3, [pc, #160]	@ (80022a0 <main+0x94c>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	429a      	cmp	r2, r3
 8002204:	da03      	bge.n	800220e <main+0x8ba>
 8002206:	4b26      	ldr	r3, [pc, #152]	@ (80022a0 <main+0x94c>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a24      	ldr	r2, [pc, #144]	@ (800229c <main+0x948>)
 800220c:	6013      	str	r3, [r2, #0]

		  if ( esc_1 > max_throthle ) esc_1 = max_throthle;
 800220e:	4b20      	ldr	r3, [pc, #128]	@ (8002290 <main+0x93c>)
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	4b24      	ldr	r3, [pc, #144]	@ (80022a4 <main+0x950>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	429a      	cmp	r2, r3
 8002218:	dd03      	ble.n	8002222 <main+0x8ce>
 800221a:	4b22      	ldr	r3, [pc, #136]	@ (80022a4 <main+0x950>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a1c      	ldr	r2, [pc, #112]	@ (8002290 <main+0x93c>)
 8002220:	6013      	str	r3, [r2, #0]
		  if ( esc_2 > max_throthle ) esc_2 = max_throthle;
 8002222:	4b1c      	ldr	r3, [pc, #112]	@ (8002294 <main+0x940>)
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	4b1f      	ldr	r3, [pc, #124]	@ (80022a4 <main+0x950>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	429a      	cmp	r2, r3
 800222c:	dd03      	ble.n	8002236 <main+0x8e2>
 800222e:	4b1d      	ldr	r3, [pc, #116]	@ (80022a4 <main+0x950>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a18      	ldr	r2, [pc, #96]	@ (8002294 <main+0x940>)
 8002234:	6013      	str	r3, [r2, #0]
		  if ( esc_3 > max_throthle ) esc_3 = max_throthle;
 8002236:	4b18      	ldr	r3, [pc, #96]	@ (8002298 <main+0x944>)
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	4b1a      	ldr	r3, [pc, #104]	@ (80022a4 <main+0x950>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	429a      	cmp	r2, r3
 8002240:	dd03      	ble.n	800224a <main+0x8f6>
 8002242:	4b18      	ldr	r3, [pc, #96]	@ (80022a4 <main+0x950>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a14      	ldr	r2, [pc, #80]	@ (8002298 <main+0x944>)
 8002248:	6013      	str	r3, [r2, #0]
		  if ( esc_4 > max_throthle ) esc_4 = max_throthle;
 800224a:	4b14      	ldr	r3, [pc, #80]	@ (800229c <main+0x948>)
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	4b15      	ldr	r3, [pc, #84]	@ (80022a4 <main+0x950>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	429a      	cmp	r2, r3
 8002254:	dd38      	ble.n	80022c8 <main+0x974>
 8002256:	4b13      	ldr	r3, [pc, #76]	@ (80022a4 <main+0x950>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a10      	ldr	r2, [pc, #64]	@ (800229c <main+0x948>)
 800225c:	6013      	str	r3, [r2, #0]
 800225e:	e033      	b.n	80022c8 <main+0x974>
 8002260:	20000024 	.word	0x20000024
 8002264:	2000036c 	.word	0x2000036c
 8002268:	20000018 	.word	0x20000018
 800226c:	2000037c 	.word	0x2000037c
 8002270:	20000378 	.word	0x20000378
 8002274:	20000360 	.word	0x20000360
 8002278:	20000388 	.word	0x20000388
 800227c:	20000340 	.word	0x20000340
 8002280:	20000350 	.word	0x20000350
 8002284:	2000038c 	.word	0x2000038c
 8002288:	20000384 	.word	0x20000384
 800228c:	20000380 	.word	0x20000380
 8002290:	20000028 	.word	0x20000028
 8002294:	2000002c 	.word	0x2000002c
 8002298:	20000030 	.word	0x20000030
 800229c:	20000034 	.word	0x20000034
 80022a0:	20000038 	.word	0x20000038
 80022a4:	2000003c 	.word	0x2000003c


	  }
	  else{
		  esc_1 = disable_motor;
 80022a8:	4b22      	ldr	r3, [pc, #136]	@ (8002334 <main+0x9e0>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a22      	ldr	r2, [pc, #136]	@ (8002338 <main+0x9e4>)
 80022ae:	6013      	str	r3, [r2, #0]
		  esc_2 = disable_motor;
 80022b0:	4b20      	ldr	r3, [pc, #128]	@ (8002334 <main+0x9e0>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a21      	ldr	r2, [pc, #132]	@ (800233c <main+0x9e8>)
 80022b6:	6013      	str	r3, [r2, #0]
		  esc_3 = disable_motor;
 80022b8:	4b1e      	ldr	r3, [pc, #120]	@ (8002334 <main+0x9e0>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a20      	ldr	r2, [pc, #128]	@ (8002340 <main+0x9ec>)
 80022be:	6013      	str	r3, [r2, #0]
		  esc_4 = disable_motor;
 80022c0:	4b1c      	ldr	r3, [pc, #112]	@ (8002334 <main+0x9e0>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a1f      	ldr	r2, [pc, #124]	@ (8002344 <main+0x9f0>)
 80022c6:	6013      	str	r3, [r2, #0]
	  }

	  __HAL_TIM_SET_COMPARE(&htim5,TIM_CHANNEL_1,esc_1);
 80022c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002338 <main+0x9e4>)
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	4b1e      	ldr	r3, [pc, #120]	@ (8002348 <main+0x9f4>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	635a      	str	r2, [r3, #52]	@ 0x34
	  __HAL_TIM_SET_COMPARE(&htim5,TIM_CHANNEL_2,esc_2);
 80022d2:	4b1a      	ldr	r3, [pc, #104]	@ (800233c <main+0x9e8>)
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	4b1c      	ldr	r3, [pc, #112]	@ (8002348 <main+0x9f4>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	639a      	str	r2, [r3, #56]	@ 0x38
	  __HAL_TIM_SET_COMPARE(&htim5,TIM_CHANNEL_3,esc_3);
 80022dc:	4b18      	ldr	r3, [pc, #96]	@ (8002340 <main+0x9ec>)
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	4b19      	ldr	r3, [pc, #100]	@ (8002348 <main+0x9f4>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	63da      	str	r2, [r3, #60]	@ 0x3c
	  __HAL_TIM_SET_COMPARE(&htim5,TIM_CHANNEL_4,esc_4);
 80022e6:	4b17      	ldr	r3, [pc, #92]	@ (8002344 <main+0x9f0>)
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	4b17      	ldr	r3, [pc, #92]	@ (8002348 <main+0x9f4>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	641a      	str	r2, [r3, #64]	@ 0x40

	  if(__HAL_TIM_GET_COUNTER(&htim10) - loop_time > 550){
 80022f0:	4b16      	ldr	r3, [pc, #88]	@ (800234c <main+0x9f8>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022f6:	4a16      	ldr	r2, [pc, #88]	@ (8002350 <main+0x9fc>)
 80022f8:	6812      	ldr	r2, [r2, #0]
 80022fa:	1a9b      	subs	r3, r3, r2
 80022fc:	f240 2226 	movw	r2, #550	@ 0x226
 8002300:	4293      	cmp	r3, r2
 8002302:	d905      	bls.n	8002310 <main+0x9bc>
		  //Turn on the LED if the loop time exceeds 4050us.
		  HAL_GPIO_WritePin(led_arm_GPIO_Port, led_cal_Pin, 0);
 8002304:	2200      	movs	r2, #0
 8002306:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800230a:	4812      	ldr	r0, [pc, #72]	@ (8002354 <main+0xa00>)
 800230c:	f001 fb6e 	bl	80039ec <HAL_GPIO_WritePin>
	  }

	  //All the information for controlling the motor's is available.
	  //The refresh rate is 250Hz. That means the esc's need there pulse every 4ms.
	  while(__HAL_TIM_GET_COUNTER(&htim10) - loop_time < 500);                                      //We wait until 4000us are passed.
 8002310:	bf00      	nop
 8002312:	4b0e      	ldr	r3, [pc, #56]	@ (800234c <main+0x9f8>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002318:	4a0d      	ldr	r2, [pc, #52]	@ (8002350 <main+0x9fc>)
 800231a:	6812      	ldr	r2, [r2, #0]
 800231c:	1a9b      	subs	r3, r3, r2
 800231e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002322:	d3f6      	bcc.n	8002312 <main+0x9be>
	  loop_time = __HAL_TIM_GET_COUNTER(&htim10);
 8002324:	4b09      	ldr	r3, [pc, #36]	@ (800234c <main+0x9f8>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800232a:	461a      	mov	r2, r3
 800232c:	4b08      	ldr	r3, [pc, #32]	@ (8002350 <main+0x9fc>)
 800232e:	601a      	str	r2, [r3, #0]
	  receiver_input_channel_1 = ch[0];
 8002330:	f7ff bb65 	b.w	80019fe <main+0xaa>
 8002334:	20000040 	.word	0x20000040
 8002338:	20000028 	.word	0x20000028
 800233c:	2000002c 	.word	0x2000002c
 8002340:	20000030 	.word	0x20000030
 8002344:	20000034 	.word	0x20000034
 8002348:	20000194 	.word	0x20000194
 800234c:	200001dc 	.word	0x200001dc
 8002350:	20000390 	.word	0x20000390
 8002354:	40020400 	.word	0x40020400

08002358 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b094      	sub	sp, #80	@ 0x50
 800235c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800235e:	f107 0320 	add.w	r3, r7, #32
 8002362:	2230      	movs	r2, #48	@ 0x30
 8002364:	2100      	movs	r1, #0
 8002366:	4618      	mov	r0, r3
 8002368:	f004 fe7e 	bl	8007068 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800236c:	f107 030c 	add.w	r3, r7, #12
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]
 8002374:	605a      	str	r2, [r3, #4]
 8002376:	609a      	str	r2, [r3, #8]
 8002378:	60da      	str	r2, [r3, #12]
 800237a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800237c:	2300      	movs	r3, #0
 800237e:	60bb      	str	r3, [r7, #8]
 8002380:	4b27      	ldr	r3, [pc, #156]	@ (8002420 <SystemClock_Config+0xc8>)
 8002382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002384:	4a26      	ldr	r2, [pc, #152]	@ (8002420 <SystemClock_Config+0xc8>)
 8002386:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800238a:	6413      	str	r3, [r2, #64]	@ 0x40
 800238c:	4b24      	ldr	r3, [pc, #144]	@ (8002420 <SystemClock_Config+0xc8>)
 800238e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002390:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002394:	60bb      	str	r3, [r7, #8]
 8002396:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002398:	2300      	movs	r3, #0
 800239a:	607b      	str	r3, [r7, #4]
 800239c:	4b21      	ldr	r3, [pc, #132]	@ (8002424 <SystemClock_Config+0xcc>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a20      	ldr	r2, [pc, #128]	@ (8002424 <SystemClock_Config+0xcc>)
 80023a2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80023a6:	6013      	str	r3, [r2, #0]
 80023a8:	4b1e      	ldr	r3, [pc, #120]	@ (8002424 <SystemClock_Config+0xcc>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80023b0:	607b      	str	r3, [r7, #4]
 80023b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80023b4:	2301      	movs	r3, #1
 80023b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80023b8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80023bc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023be:	2302      	movs	r3, #2
 80023c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80023c2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80023c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80023c8:	230c      	movs	r3, #12
 80023ca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80023cc:	2360      	movs	r3, #96	@ 0x60
 80023ce:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80023d0:	2302      	movs	r3, #2
 80023d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80023d4:	2304      	movs	r3, #4
 80023d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023d8:	f107 0320 	add.w	r3, r7, #32
 80023dc:	4618      	mov	r0, r3
 80023de:	f002 fb11 	bl	8004a04 <HAL_RCC_OscConfig>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80023e8:	f000 fa40 	bl	800286c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023ec:	230f      	movs	r3, #15
 80023ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023f0:	2302      	movs	r3, #2
 80023f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023f4:	2300      	movs	r3, #0
 80023f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80023f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023fe:	2300      	movs	r3, #0
 8002400:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002402:	f107 030c 	add.w	r3, r7, #12
 8002406:	2103      	movs	r1, #3
 8002408:	4618      	mov	r0, r3
 800240a:	f002 fd73 	bl	8004ef4 <HAL_RCC_ClockConfig>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002414:	f000 fa2a 	bl	800286c <Error_Handler>
  }
}
 8002418:	bf00      	nop
 800241a:	3750      	adds	r7, #80	@ 0x50
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	40023800 	.word	0x40023800
 8002424:	40007000 	.word	0x40007000

08002428 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800242c:	4b12      	ldr	r3, [pc, #72]	@ (8002478 <MX_I2C1_Init+0x50>)
 800242e:	4a13      	ldr	r2, [pc, #76]	@ (800247c <MX_I2C1_Init+0x54>)
 8002430:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002432:	4b11      	ldr	r3, [pc, #68]	@ (8002478 <MX_I2C1_Init+0x50>)
 8002434:	4a12      	ldr	r2, [pc, #72]	@ (8002480 <MX_I2C1_Init+0x58>)
 8002436:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002438:	4b0f      	ldr	r3, [pc, #60]	@ (8002478 <MX_I2C1_Init+0x50>)
 800243a:	2200      	movs	r2, #0
 800243c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800243e:	4b0e      	ldr	r3, [pc, #56]	@ (8002478 <MX_I2C1_Init+0x50>)
 8002440:	2200      	movs	r2, #0
 8002442:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002444:	4b0c      	ldr	r3, [pc, #48]	@ (8002478 <MX_I2C1_Init+0x50>)
 8002446:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800244a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800244c:	4b0a      	ldr	r3, [pc, #40]	@ (8002478 <MX_I2C1_Init+0x50>)
 800244e:	2200      	movs	r2, #0
 8002450:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002452:	4b09      	ldr	r3, [pc, #36]	@ (8002478 <MX_I2C1_Init+0x50>)
 8002454:	2200      	movs	r2, #0
 8002456:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002458:	4b07      	ldr	r3, [pc, #28]	@ (8002478 <MX_I2C1_Init+0x50>)
 800245a:	2200      	movs	r2, #0
 800245c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800245e:	4b06      	ldr	r3, [pc, #24]	@ (8002478 <MX_I2C1_Init+0x50>)
 8002460:	2200      	movs	r2, #0
 8002462:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002464:	4804      	ldr	r0, [pc, #16]	@ (8002478 <MX_I2C1_Init+0x50>)
 8002466:	f001 fb0d 	bl	8003a84 <HAL_I2C_Init>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d001      	beq.n	8002474 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002470:	f000 f9fc 	bl	800286c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002474:	bf00      	nop
 8002476:	bd80      	pop	{r7, pc}
 8002478:	200000d4 	.word	0x200000d4
 800247c:	40005400 	.word	0x40005400
 8002480:	00061a80 	.word	0x00061a80

08002484 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b08e      	sub	sp, #56	@ 0x38
 8002488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800248a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800248e:	2200      	movs	r2, #0
 8002490:	601a      	str	r2, [r3, #0]
 8002492:	605a      	str	r2, [r3, #4]
 8002494:	609a      	str	r2, [r3, #8]
 8002496:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002498:	f107 0320 	add.w	r3, r7, #32
 800249c:	2200      	movs	r2, #0
 800249e:	601a      	str	r2, [r3, #0]
 80024a0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024a2:	1d3b      	adds	r3, r7, #4
 80024a4:	2200      	movs	r2, #0
 80024a6:	601a      	str	r2, [r3, #0]
 80024a8:	605a      	str	r2, [r3, #4]
 80024aa:	609a      	str	r2, [r3, #8]
 80024ac:	60da      	str	r2, [r3, #12]
 80024ae:	611a      	str	r2, [r3, #16]
 80024b0:	615a      	str	r2, [r3, #20]
 80024b2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80024b4:	4b3d      	ldr	r3, [pc, #244]	@ (80025ac <MX_TIM5_Init+0x128>)
 80024b6:	4a3e      	ldr	r2, [pc, #248]	@ (80025b0 <MX_TIM5_Init+0x12c>)
 80024b8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 100-1;
 80024ba:	4b3c      	ldr	r3, [pc, #240]	@ (80025ac <MX_TIM5_Init+0x128>)
 80024bc:	2263      	movs	r2, #99	@ 0x63
 80024be:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024c0:	4b3a      	ldr	r3, [pc, #232]	@ (80025ac <MX_TIM5_Init+0x128>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 2000-1;
 80024c6:	4b39      	ldr	r3, [pc, #228]	@ (80025ac <MX_TIM5_Init+0x128>)
 80024c8:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80024cc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024ce:	4b37      	ldr	r3, [pc, #220]	@ (80025ac <MX_TIM5_Init+0x128>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024d4:	4b35      	ldr	r3, [pc, #212]	@ (80025ac <MX_TIM5_Init+0x128>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80024da:	4834      	ldr	r0, [pc, #208]	@ (80025ac <MX_TIM5_Init+0x128>)
 80024dc:	f002 feea 	bl	80052b4 <HAL_TIM_Base_Init>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 80024e6:	f000 f9c1 	bl	800286c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80024f0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80024f4:	4619      	mov	r1, r3
 80024f6:	482d      	ldr	r0, [pc, #180]	@ (80025ac <MX_TIM5_Init+0x128>)
 80024f8:	f003 fa5a 	bl	80059b0 <HAL_TIM_ConfigClockSource>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8002502:	f000 f9b3 	bl	800286c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002506:	4829      	ldr	r0, [pc, #164]	@ (80025ac <MX_TIM5_Init+0x128>)
 8002508:	f002 ff7e 	bl	8005408 <HAL_TIM_PWM_Init>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8002512:	f000 f9ab 	bl	800286c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002516:	2300      	movs	r3, #0
 8002518:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800251a:	2300      	movs	r3, #0
 800251c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800251e:	f107 0320 	add.w	r3, r7, #32
 8002522:	4619      	mov	r1, r3
 8002524:	4821      	ldr	r0, [pc, #132]	@ (80025ac <MX_TIM5_Init+0x128>)
 8002526:	f003 fe09 	bl	800613c <HAL_TIMEx_MasterConfigSynchronization>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d001      	beq.n	8002534 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8002530:	f000 f99c 	bl	800286c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002534:	2360      	movs	r3, #96	@ 0x60
 8002536:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002538:	2300      	movs	r3, #0
 800253a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800253c:	2300      	movs	r3, #0
 800253e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002540:	2300      	movs	r3, #0
 8002542:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002544:	1d3b      	adds	r3, r7, #4
 8002546:	2200      	movs	r2, #0
 8002548:	4619      	mov	r1, r3
 800254a:	4818      	ldr	r0, [pc, #96]	@ (80025ac <MX_TIM5_Init+0x128>)
 800254c:	f003 f96e 	bl	800582c <HAL_TIM_PWM_ConfigChannel>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8002556:	f000 f989 	bl	800286c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800255a:	1d3b      	adds	r3, r7, #4
 800255c:	2204      	movs	r2, #4
 800255e:	4619      	mov	r1, r3
 8002560:	4812      	ldr	r0, [pc, #72]	@ (80025ac <MX_TIM5_Init+0x128>)
 8002562:	f003 f963 	bl	800582c <HAL_TIM_PWM_ConfigChannel>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <MX_TIM5_Init+0xec>
  {
    Error_Handler();
 800256c:	f000 f97e 	bl	800286c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002570:	1d3b      	adds	r3, r7, #4
 8002572:	2208      	movs	r2, #8
 8002574:	4619      	mov	r1, r3
 8002576:	480d      	ldr	r0, [pc, #52]	@ (80025ac <MX_TIM5_Init+0x128>)
 8002578:	f003 f958 	bl	800582c <HAL_TIM_PWM_ConfigChannel>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d001      	beq.n	8002586 <MX_TIM5_Init+0x102>
  {
    Error_Handler();
 8002582:	f000 f973 	bl	800286c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002586:	1d3b      	adds	r3, r7, #4
 8002588:	220c      	movs	r2, #12
 800258a:	4619      	mov	r1, r3
 800258c:	4807      	ldr	r0, [pc, #28]	@ (80025ac <MX_TIM5_Init+0x128>)
 800258e:	f003 f94d 	bl	800582c <HAL_TIM_PWM_ConfigChannel>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <MX_TIM5_Init+0x118>
  {
    Error_Handler();
 8002598:	f000 f968 	bl	800286c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800259c:	4803      	ldr	r0, [pc, #12]	@ (80025ac <MX_TIM5_Init+0x128>)
 800259e:	f000 fa2f 	bl	8002a00 <HAL_TIM_MspPostInit>

}
 80025a2:	bf00      	nop
 80025a4:	3738      	adds	r7, #56	@ 0x38
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	20000194 	.word	0x20000194
 80025b0:	40000c00 	.word	0x40000c00

080025b4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80025b8:	4b0e      	ldr	r3, [pc, #56]	@ (80025f4 <MX_TIM10_Init+0x40>)
 80025ba:	4a0f      	ldr	r2, [pc, #60]	@ (80025f8 <MX_TIM10_Init+0x44>)
 80025bc:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 100-1;
 80025be:	4b0d      	ldr	r3, [pc, #52]	@ (80025f4 <MX_TIM10_Init+0x40>)
 80025c0:	2263      	movs	r2, #99	@ 0x63
 80025c2:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025c4:	4b0b      	ldr	r3, [pc, #44]	@ (80025f4 <MX_TIM10_Init+0x40>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 0xffff;
 80025ca:	4b0a      	ldr	r3, [pc, #40]	@ (80025f4 <MX_TIM10_Init+0x40>)
 80025cc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80025d0:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025d2:	4b08      	ldr	r3, [pc, #32]	@ (80025f4 <MX_TIM10_Init+0x40>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025d8:	4b06      	ldr	r3, [pc, #24]	@ (80025f4 <MX_TIM10_Init+0x40>)
 80025da:	2200      	movs	r2, #0
 80025dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80025de:	4805      	ldr	r0, [pc, #20]	@ (80025f4 <MX_TIM10_Init+0x40>)
 80025e0:	f002 fe68 	bl	80052b4 <HAL_TIM_Base_Init>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80025ea:	f000 f93f 	bl	800286c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80025ee:	bf00      	nop
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	200001dc 	.word	0x200001dc
 80025f8:	40014400 	.word	0x40014400

080025fc <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002600:	4b0e      	ldr	r3, [pc, #56]	@ (800263c <MX_TIM11_Init+0x40>)
 8002602:	4a0f      	ldr	r2, [pc, #60]	@ (8002640 <MX_TIM11_Init+0x44>)
 8002604:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 100-1;
 8002606:	4b0d      	ldr	r3, [pc, #52]	@ (800263c <MX_TIM11_Init+0x40>)
 8002608:	2263      	movs	r2, #99	@ 0x63
 800260a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800260c:	4b0b      	ldr	r3, [pc, #44]	@ (800263c <MX_TIM11_Init+0x40>)
 800260e:	2200      	movs	r2, #0
 8002610:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 0xffff;
 8002612:	4b0a      	ldr	r3, [pc, #40]	@ (800263c <MX_TIM11_Init+0x40>)
 8002614:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002618:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800261a:	4b08      	ldr	r3, [pc, #32]	@ (800263c <MX_TIM11_Init+0x40>)
 800261c:	2200      	movs	r2, #0
 800261e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002620:	4b06      	ldr	r3, [pc, #24]	@ (800263c <MX_TIM11_Init+0x40>)
 8002622:	2200      	movs	r2, #0
 8002624:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002626:	4805      	ldr	r0, [pc, #20]	@ (800263c <MX_TIM11_Init+0x40>)
 8002628:	f002 fe44 	bl	80052b4 <HAL_TIM_Base_Init>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8002632:	f000 f91b 	bl	800286c <Error_Handler>
  /* USER CODE BEGIN TIM11_Init 2 */


  /* USER CODE END TIM11_Init 2 */

}
 8002636:	bf00      	nop
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	20000224 	.word	0x20000224
 8002640:	40014800 	.word	0x40014800

08002644 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002648:	4b11      	ldr	r3, [pc, #68]	@ (8002690 <MX_USART1_UART_Init+0x4c>)
 800264a:	4a12      	ldr	r2, [pc, #72]	@ (8002694 <MX_USART1_UART_Init+0x50>)
 800264c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800264e:	4b10      	ldr	r3, [pc, #64]	@ (8002690 <MX_USART1_UART_Init+0x4c>)
 8002650:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002654:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002656:	4b0e      	ldr	r3, [pc, #56]	@ (8002690 <MX_USART1_UART_Init+0x4c>)
 8002658:	2200      	movs	r2, #0
 800265a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800265c:	4b0c      	ldr	r3, [pc, #48]	@ (8002690 <MX_USART1_UART_Init+0x4c>)
 800265e:	2200      	movs	r2, #0
 8002660:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002662:	4b0b      	ldr	r3, [pc, #44]	@ (8002690 <MX_USART1_UART_Init+0x4c>)
 8002664:	2200      	movs	r2, #0
 8002666:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002668:	4b09      	ldr	r3, [pc, #36]	@ (8002690 <MX_USART1_UART_Init+0x4c>)
 800266a:	220c      	movs	r2, #12
 800266c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800266e:	4b08      	ldr	r3, [pc, #32]	@ (8002690 <MX_USART1_UART_Init+0x4c>)
 8002670:	2200      	movs	r2, #0
 8002672:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002674:	4b06      	ldr	r3, [pc, #24]	@ (8002690 <MX_USART1_UART_Init+0x4c>)
 8002676:	2200      	movs	r2, #0
 8002678:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800267a:	4805      	ldr	r0, [pc, #20]	@ (8002690 <MX_USART1_UART_Init+0x4c>)
 800267c:	f003 fde0 	bl	8006240 <HAL_UART_Init>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002686:	f000 f8f1 	bl	800286c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800268a:	bf00      	nop
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	2000026c 	.word	0x2000026c
 8002694:	40011000 	.word	0x40011000

08002698 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800269e:	2300      	movs	r3, #0
 80026a0:	607b      	str	r3, [r7, #4]
 80026a2:	4b0c      	ldr	r3, [pc, #48]	@ (80026d4 <MX_DMA_Init+0x3c>)
 80026a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a6:	4a0b      	ldr	r2, [pc, #44]	@ (80026d4 <MX_DMA_Init+0x3c>)
 80026a8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80026ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80026ae:	4b09      	ldr	r3, [pc, #36]	@ (80026d4 <MX_DMA_Init+0x3c>)
 80026b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026b6:	607b      	str	r3, [r7, #4]
 80026b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80026ba:	2200      	movs	r2, #0
 80026bc:	2100      	movs	r1, #0
 80026be:	203a      	movs	r0, #58	@ 0x3a
 80026c0:	f000 fc5d 	bl	8002f7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80026c4:	203a      	movs	r0, #58	@ 0x3a
 80026c6:	f000 fc76 	bl	8002fb6 <HAL_NVIC_EnableIRQ>

}
 80026ca:	bf00      	nop
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	40023800 	.word	0x40023800

080026d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b08a      	sub	sp, #40	@ 0x28
 80026dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026de:	f107 0314 	add.w	r3, r7, #20
 80026e2:	2200      	movs	r2, #0
 80026e4:	601a      	str	r2, [r3, #0]
 80026e6:	605a      	str	r2, [r3, #4]
 80026e8:	609a      	str	r2, [r3, #8]
 80026ea:	60da      	str	r2, [r3, #12]
 80026ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026ee:	2300      	movs	r3, #0
 80026f0:	613b      	str	r3, [r7, #16]
 80026f2:	4b3b      	ldr	r3, [pc, #236]	@ (80027e0 <MX_GPIO_Init+0x108>)
 80026f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f6:	4a3a      	ldr	r2, [pc, #232]	@ (80027e0 <MX_GPIO_Init+0x108>)
 80026f8:	f043 0304 	orr.w	r3, r3, #4
 80026fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80026fe:	4b38      	ldr	r3, [pc, #224]	@ (80027e0 <MX_GPIO_Init+0x108>)
 8002700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002702:	f003 0304 	and.w	r3, r3, #4
 8002706:	613b      	str	r3, [r7, #16]
 8002708:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800270a:	2300      	movs	r3, #0
 800270c:	60fb      	str	r3, [r7, #12]
 800270e:	4b34      	ldr	r3, [pc, #208]	@ (80027e0 <MX_GPIO_Init+0x108>)
 8002710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002712:	4a33      	ldr	r2, [pc, #204]	@ (80027e0 <MX_GPIO_Init+0x108>)
 8002714:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002718:	6313      	str	r3, [r2, #48]	@ 0x30
 800271a:	4b31      	ldr	r3, [pc, #196]	@ (80027e0 <MX_GPIO_Init+0x108>)
 800271c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800271e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002722:	60fb      	str	r3, [r7, #12]
 8002724:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002726:	2300      	movs	r3, #0
 8002728:	60bb      	str	r3, [r7, #8]
 800272a:	4b2d      	ldr	r3, [pc, #180]	@ (80027e0 <MX_GPIO_Init+0x108>)
 800272c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800272e:	4a2c      	ldr	r2, [pc, #176]	@ (80027e0 <MX_GPIO_Init+0x108>)
 8002730:	f043 0301 	orr.w	r3, r3, #1
 8002734:	6313      	str	r3, [r2, #48]	@ 0x30
 8002736:	4b2a      	ldr	r3, [pc, #168]	@ (80027e0 <MX_GPIO_Init+0x108>)
 8002738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	60bb      	str	r3, [r7, #8]
 8002740:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002742:	2300      	movs	r3, #0
 8002744:	607b      	str	r3, [r7, #4]
 8002746:	4b26      	ldr	r3, [pc, #152]	@ (80027e0 <MX_GPIO_Init+0x108>)
 8002748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800274a:	4a25      	ldr	r2, [pc, #148]	@ (80027e0 <MX_GPIO_Init+0x108>)
 800274c:	f043 0302 	orr.w	r3, r3, #2
 8002750:	6313      	str	r3, [r2, #48]	@ 0x30
 8002752:	4b23      	ldr	r3, [pc, #140]	@ (80027e0 <MX_GPIO_Init+0x108>)
 8002754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	607b      	str	r3, [r7, #4]
 800275c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_cal_GPIO_Port, led_cal_Pin, GPIO_PIN_RESET);
 800275e:	2200      	movs	r2, #0
 8002760:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002764:	481f      	ldr	r0, [pc, #124]	@ (80027e4 <MX_GPIO_Init+0x10c>)
 8002766:	f001 f941 	bl	80039ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, led_arm_Pin|led_disarm_Pin, GPIO_PIN_RESET);
 800276a:	2200      	movs	r2, #0
 800276c:	2103      	movs	r1, #3
 800276e:	481e      	ldr	r0, [pc, #120]	@ (80027e8 <MX_GPIO_Init+0x110>)
 8002770:	f001 f93c 	bl	80039ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : led_cal_Pin */
  GPIO_InitStruct.Pin = led_cal_Pin;
 8002774:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002778:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800277a:	2301      	movs	r3, #1
 800277c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277e:	2300      	movs	r3, #0
 8002780:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002782:	2300      	movs	r3, #0
 8002784:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(led_cal_GPIO_Port, &GPIO_InitStruct);
 8002786:	f107 0314 	add.w	r3, r7, #20
 800278a:	4619      	mov	r1, r3
 800278c:	4815      	ldr	r0, [pc, #84]	@ (80027e4 <MX_GPIO_Init+0x10c>)
 800278e:	f000 ffa9 	bl	80036e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RC_Pin */
  GPIO_InitStruct.Pin = RC_Pin;
 8002792:	2310      	movs	r3, #16
 8002794:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002796:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800279a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279c:	2300      	movs	r3, #0
 800279e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RC_GPIO_Port, &GPIO_InitStruct);
 80027a0:	f107 0314 	add.w	r3, r7, #20
 80027a4:	4619      	mov	r1, r3
 80027a6:	4811      	ldr	r0, [pc, #68]	@ (80027ec <MX_GPIO_Init+0x114>)
 80027a8:	f000 ff9c 	bl	80036e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : led_arm_Pin led_disarm_Pin */
  GPIO_InitStruct.Pin = led_arm_Pin|led_disarm_Pin;
 80027ac:	2303      	movs	r3, #3
 80027ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027b0:	2301      	movs	r3, #1
 80027b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b4:	2300      	movs	r3, #0
 80027b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b8:	2300      	movs	r3, #0
 80027ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027bc:	f107 0314 	add.w	r3, r7, #20
 80027c0:	4619      	mov	r1, r3
 80027c2:	4809      	ldr	r0, [pc, #36]	@ (80027e8 <MX_GPIO_Init+0x110>)
 80027c4:	f000 ff8e 	bl	80036e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80027c8:	2200      	movs	r2, #0
 80027ca:	2100      	movs	r1, #0
 80027cc:	200a      	movs	r0, #10
 80027ce:	f000 fbd6 	bl	8002f7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80027d2:	200a      	movs	r0, #10
 80027d4:	f000 fbef 	bl	8002fb6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80027d8:	bf00      	nop
 80027da:	3728      	adds	r7, #40	@ 0x28
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	40023800 	.word	0x40023800
 80027e4:	40020800 	.word	0x40020800
 80027e8:	40020400 	.word	0x40020400
 80027ec:	40020000 	.word	0x40020000

080027f0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	4603      	mov	r3, r0
 80027f8:	80fb      	strh	r3, [r7, #6]

	if ( GPIO_Pin == RC_Pin){
 80027fa:	88fb      	ldrh	r3, [r7, #6]
 80027fc:	2b10      	cmp	r3, #16
 80027fe:	d127      	bne.n	8002850 <HAL_GPIO_EXTI_Callback+0x60>
		tick = __HAL_TIM_GET_COUNTER(&htim11);
 8002800:	4b16      	ldr	r3, [pc, #88]	@ (800285c <HAL_GPIO_EXTI_Callback+0x6c>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002806:	461a      	mov	r2, r3
 8002808:	4b15      	ldr	r3, [pc, #84]	@ (8002860 <HAL_GPIO_EXTI_Callback+0x70>)
 800280a:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim11,0);
 800280c:	4b13      	ldr	r3, [pc, #76]	@ (800285c <HAL_GPIO_EXTI_Callback+0x6c>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2200      	movs	r2, #0
 8002812:	625a      	str	r2, [r3, #36]	@ 0x24

		if ( tick < 2100){
 8002814:	4b12      	ldr	r3, [pc, #72]	@ (8002860 <HAL_GPIO_EXTI_Callback+0x70>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f640 0233 	movw	r2, #2099	@ 0x833
 800281c:	4293      	cmp	r3, r2
 800281e:	dc10      	bgt.n	8002842 <HAL_GPIO_EXTI_Callback+0x52>
			ch[pulse] = tick;
 8002820:	4b10      	ldr	r3, [pc, #64]	@ (8002864 <HAL_GPIO_EXTI_Callback+0x74>)
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	b2db      	uxtb	r3, r3
 8002826:	4619      	mov	r1, r3
 8002828:	4b0d      	ldr	r3, [pc, #52]	@ (8002860 <HAL_GPIO_EXTI_Callback+0x70>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a0e      	ldr	r2, [pc, #56]	@ (8002868 <HAL_GPIO_EXTI_Callback+0x78>)
 800282e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			pulse++;
 8002832:	4b0c      	ldr	r3, [pc, #48]	@ (8002864 <HAL_GPIO_EXTI_Callback+0x74>)
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	b2db      	uxtb	r3, r3
 8002838:	3301      	adds	r3, #1
 800283a:	b2da      	uxtb	r2, r3
 800283c:	4b09      	ldr	r3, [pc, #36]	@ (8002864 <HAL_GPIO_EXTI_Callback+0x74>)
 800283e:	701a      	strb	r2, [r3, #0]
			pulse =0;
		}

	}

}
 8002840:	e006      	b.n	8002850 <HAL_GPIO_EXTI_Callback+0x60>
			__HAL_TIM_SET_COUNTER(&htim11,0);
 8002842:	4b06      	ldr	r3, [pc, #24]	@ (800285c <HAL_GPIO_EXTI_Callback+0x6c>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2200      	movs	r2, #0
 8002848:	625a      	str	r2, [r3, #36]	@ 0x24
			pulse =0;
 800284a:	4b06      	ldr	r3, [pc, #24]	@ (8002864 <HAL_GPIO_EXTI_Callback+0x74>)
 800284c:	2200      	movs	r2, #0
 800284e:	701a      	strb	r2, [r3, #0]
}
 8002850:	bf00      	nop
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr
 800285c:	20000224 	.word	0x20000224
 8002860:	20000330 	.word	0x20000330
 8002864:	20000334 	.word	0x20000334
 8002868:	20000310 	.word	0x20000310

0800286c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002870:	b672      	cpsid	i
}
 8002872:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002874:	bf00      	nop
 8002876:	e7fd      	b.n	8002874 <Error_Handler+0x8>

08002878 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800287e:	2300      	movs	r3, #0
 8002880:	607b      	str	r3, [r7, #4]
 8002882:	4b10      	ldr	r3, [pc, #64]	@ (80028c4 <HAL_MspInit+0x4c>)
 8002884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002886:	4a0f      	ldr	r2, [pc, #60]	@ (80028c4 <HAL_MspInit+0x4c>)
 8002888:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800288c:	6453      	str	r3, [r2, #68]	@ 0x44
 800288e:	4b0d      	ldr	r3, [pc, #52]	@ (80028c4 <HAL_MspInit+0x4c>)
 8002890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002892:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002896:	607b      	str	r3, [r7, #4]
 8002898:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800289a:	2300      	movs	r3, #0
 800289c:	603b      	str	r3, [r7, #0]
 800289e:	4b09      	ldr	r3, [pc, #36]	@ (80028c4 <HAL_MspInit+0x4c>)
 80028a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a2:	4a08      	ldr	r2, [pc, #32]	@ (80028c4 <HAL_MspInit+0x4c>)
 80028a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80028aa:	4b06      	ldr	r3, [pc, #24]	@ (80028c4 <HAL_MspInit+0x4c>)
 80028ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028b2:	603b      	str	r3, [r7, #0]
 80028b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028b6:	bf00      	nop
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	40023800 	.word	0x40023800

080028c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b08a      	sub	sp, #40	@ 0x28
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028d0:	f107 0314 	add.w	r3, r7, #20
 80028d4:	2200      	movs	r2, #0
 80028d6:	601a      	str	r2, [r3, #0]
 80028d8:	605a      	str	r2, [r3, #4]
 80028da:	609a      	str	r2, [r3, #8]
 80028dc:	60da      	str	r2, [r3, #12]
 80028de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a19      	ldr	r2, [pc, #100]	@ (800294c <HAL_I2C_MspInit+0x84>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d12b      	bne.n	8002942 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ea:	2300      	movs	r3, #0
 80028ec:	613b      	str	r3, [r7, #16]
 80028ee:	4b18      	ldr	r3, [pc, #96]	@ (8002950 <HAL_I2C_MspInit+0x88>)
 80028f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f2:	4a17      	ldr	r2, [pc, #92]	@ (8002950 <HAL_I2C_MspInit+0x88>)
 80028f4:	f043 0302 	orr.w	r3, r3, #2
 80028f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80028fa:	4b15      	ldr	r3, [pc, #84]	@ (8002950 <HAL_I2C_MspInit+0x88>)
 80028fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	613b      	str	r3, [r7, #16]
 8002904:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002906:	23c0      	movs	r3, #192	@ 0xc0
 8002908:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800290a:	2312      	movs	r3, #18
 800290c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290e:	2300      	movs	r3, #0
 8002910:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002912:	2303      	movs	r3, #3
 8002914:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002916:	2304      	movs	r3, #4
 8002918:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800291a:	f107 0314 	add.w	r3, r7, #20
 800291e:	4619      	mov	r1, r3
 8002920:	480c      	ldr	r0, [pc, #48]	@ (8002954 <HAL_I2C_MspInit+0x8c>)
 8002922:	f000 fedf 	bl	80036e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002926:	2300      	movs	r3, #0
 8002928:	60fb      	str	r3, [r7, #12]
 800292a:	4b09      	ldr	r3, [pc, #36]	@ (8002950 <HAL_I2C_MspInit+0x88>)
 800292c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800292e:	4a08      	ldr	r2, [pc, #32]	@ (8002950 <HAL_I2C_MspInit+0x88>)
 8002930:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002934:	6413      	str	r3, [r2, #64]	@ 0x40
 8002936:	4b06      	ldr	r3, [pc, #24]	@ (8002950 <HAL_I2C_MspInit+0x88>)
 8002938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800293a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800293e:	60fb      	str	r3, [r7, #12]
 8002940:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002942:	bf00      	nop
 8002944:	3728      	adds	r7, #40	@ 0x28
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	40005400 	.word	0x40005400
 8002950:	40023800 	.word	0x40023800
 8002954:	40020400 	.word	0x40020400

08002958 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a22      	ldr	r2, [pc, #136]	@ (80029f0 <HAL_TIM_Base_MspInit+0x98>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d10e      	bne.n	8002988 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800296a:	2300      	movs	r3, #0
 800296c:	617b      	str	r3, [r7, #20]
 800296e:	4b21      	ldr	r3, [pc, #132]	@ (80029f4 <HAL_TIM_Base_MspInit+0x9c>)
 8002970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002972:	4a20      	ldr	r2, [pc, #128]	@ (80029f4 <HAL_TIM_Base_MspInit+0x9c>)
 8002974:	f043 0308 	orr.w	r3, r3, #8
 8002978:	6413      	str	r3, [r2, #64]	@ 0x40
 800297a:	4b1e      	ldr	r3, [pc, #120]	@ (80029f4 <HAL_TIM_Base_MspInit+0x9c>)
 800297c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800297e:	f003 0308 	and.w	r3, r3, #8
 8002982:	617b      	str	r3, [r7, #20]
 8002984:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8002986:	e02e      	b.n	80029e6 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM10)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a1a      	ldr	r2, [pc, #104]	@ (80029f8 <HAL_TIM_Base_MspInit+0xa0>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d10e      	bne.n	80029b0 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002992:	2300      	movs	r3, #0
 8002994:	613b      	str	r3, [r7, #16]
 8002996:	4b17      	ldr	r3, [pc, #92]	@ (80029f4 <HAL_TIM_Base_MspInit+0x9c>)
 8002998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800299a:	4a16      	ldr	r2, [pc, #88]	@ (80029f4 <HAL_TIM_Base_MspInit+0x9c>)
 800299c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80029a2:	4b14      	ldr	r3, [pc, #80]	@ (80029f4 <HAL_TIM_Base_MspInit+0x9c>)
 80029a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029aa:	613b      	str	r3, [r7, #16]
 80029ac:	693b      	ldr	r3, [r7, #16]
}
 80029ae:	e01a      	b.n	80029e6 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM11)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a11      	ldr	r2, [pc, #68]	@ (80029fc <HAL_TIM_Base_MspInit+0xa4>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d115      	bne.n	80029e6 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80029ba:	2300      	movs	r3, #0
 80029bc:	60fb      	str	r3, [r7, #12]
 80029be:	4b0d      	ldr	r3, [pc, #52]	@ (80029f4 <HAL_TIM_Base_MspInit+0x9c>)
 80029c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029c2:	4a0c      	ldr	r2, [pc, #48]	@ (80029f4 <HAL_TIM_Base_MspInit+0x9c>)
 80029c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80029ca:	4b0a      	ldr	r3, [pc, #40]	@ (80029f4 <HAL_TIM_Base_MspInit+0x9c>)
 80029cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029d2:	60fb      	str	r3, [r7, #12]
 80029d4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80029d6:	2200      	movs	r2, #0
 80029d8:	2100      	movs	r1, #0
 80029da:	201a      	movs	r0, #26
 80029dc:	f000 facf 	bl	8002f7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80029e0:	201a      	movs	r0, #26
 80029e2:	f000 fae8 	bl	8002fb6 <HAL_NVIC_EnableIRQ>
}
 80029e6:	bf00      	nop
 80029e8:	3718      	adds	r7, #24
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	40000c00 	.word	0x40000c00
 80029f4:	40023800 	.word	0x40023800
 80029f8:	40014400 	.word	0x40014400
 80029fc:	40014800 	.word	0x40014800

08002a00 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b088      	sub	sp, #32
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a08:	f107 030c 	add.w	r3, r7, #12
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	601a      	str	r2, [r3, #0]
 8002a10:	605a      	str	r2, [r3, #4]
 8002a12:	609a      	str	r2, [r3, #8]
 8002a14:	60da      	str	r2, [r3, #12]
 8002a16:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a12      	ldr	r2, [pc, #72]	@ (8002a68 <HAL_TIM_MspPostInit+0x68>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d11d      	bne.n	8002a5e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a22:	2300      	movs	r3, #0
 8002a24:	60bb      	str	r3, [r7, #8]
 8002a26:	4b11      	ldr	r3, [pc, #68]	@ (8002a6c <HAL_TIM_MspPostInit+0x6c>)
 8002a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a2a:	4a10      	ldr	r2, [pc, #64]	@ (8002a6c <HAL_TIM_MspPostInit+0x6c>)
 8002a2c:	f043 0301 	orr.w	r3, r3, #1
 8002a30:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a32:	4b0e      	ldr	r3, [pc, #56]	@ (8002a6c <HAL_TIM_MspPostInit+0x6c>)
 8002a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	60bb      	str	r3, [r7, #8]
 8002a3c:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    PA2     ------> TIM5_CH3
    PA3     ------> TIM5_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002a3e:	230f      	movs	r3, #15
 8002a40:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a42:	2302      	movs	r3, #2
 8002a44:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a46:	2300      	movs	r3, #0
 8002a48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002a4e:	2302      	movs	r3, #2
 8002a50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a52:	f107 030c 	add.w	r3, r7, #12
 8002a56:	4619      	mov	r1, r3
 8002a58:	4805      	ldr	r0, [pc, #20]	@ (8002a70 <HAL_TIM_MspPostInit+0x70>)
 8002a5a:	f000 fe43 	bl	80036e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002a5e:	bf00      	nop
 8002a60:	3720      	adds	r7, #32
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	40000c00 	.word	0x40000c00
 8002a6c:	40023800 	.word	0x40023800
 8002a70:	40020000 	.word	0x40020000

08002a74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b08a      	sub	sp, #40	@ 0x28
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a7c:	f107 0314 	add.w	r3, r7, #20
 8002a80:	2200      	movs	r2, #0
 8002a82:	601a      	str	r2, [r3, #0]
 8002a84:	605a      	str	r2, [r3, #4]
 8002a86:	609a      	str	r2, [r3, #8]
 8002a88:	60da      	str	r2, [r3, #12]
 8002a8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a35      	ldr	r2, [pc, #212]	@ (8002b68 <HAL_UART_MspInit+0xf4>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d163      	bne.n	8002b5e <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a96:	2300      	movs	r3, #0
 8002a98:	613b      	str	r3, [r7, #16]
 8002a9a:	4b34      	ldr	r3, [pc, #208]	@ (8002b6c <HAL_UART_MspInit+0xf8>)
 8002a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a9e:	4a33      	ldr	r2, [pc, #204]	@ (8002b6c <HAL_UART_MspInit+0xf8>)
 8002aa0:	f043 0310 	orr.w	r3, r3, #16
 8002aa4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002aa6:	4b31      	ldr	r3, [pc, #196]	@ (8002b6c <HAL_UART_MspInit+0xf8>)
 8002aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aaa:	f003 0310 	and.w	r3, r3, #16
 8002aae:	613b      	str	r3, [r7, #16]
 8002ab0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	60fb      	str	r3, [r7, #12]
 8002ab6:	4b2d      	ldr	r3, [pc, #180]	@ (8002b6c <HAL_UART_MspInit+0xf8>)
 8002ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aba:	4a2c      	ldr	r2, [pc, #176]	@ (8002b6c <HAL_UART_MspInit+0xf8>)
 8002abc:	f043 0301 	orr.w	r3, r3, #1
 8002ac0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ac2:	4b2a      	ldr	r3, [pc, #168]	@ (8002b6c <HAL_UART_MspInit+0xf8>)
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	60fb      	str	r3, [r7, #12]
 8002acc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002ace:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002ad2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002adc:	2303      	movs	r3, #3
 8002ade:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002ae0:	2307      	movs	r3, #7
 8002ae2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ae4:	f107 0314 	add.w	r3, r7, #20
 8002ae8:	4619      	mov	r1, r3
 8002aea:	4821      	ldr	r0, [pc, #132]	@ (8002b70 <HAL_UART_MspInit+0xfc>)
 8002aec:	f000 fdfa 	bl	80036e4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002af0:	4b20      	ldr	r3, [pc, #128]	@ (8002b74 <HAL_UART_MspInit+0x100>)
 8002af2:	4a21      	ldr	r2, [pc, #132]	@ (8002b78 <HAL_UART_MspInit+0x104>)
 8002af4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002af6:	4b1f      	ldr	r3, [pc, #124]	@ (8002b74 <HAL_UART_MspInit+0x100>)
 8002af8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002afc:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002afe:	4b1d      	ldr	r3, [pc, #116]	@ (8002b74 <HAL_UART_MspInit+0x100>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b04:	4b1b      	ldr	r3, [pc, #108]	@ (8002b74 <HAL_UART_MspInit+0x100>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b0a:	4b1a      	ldr	r3, [pc, #104]	@ (8002b74 <HAL_UART_MspInit+0x100>)
 8002b0c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b10:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b12:	4b18      	ldr	r3, [pc, #96]	@ (8002b74 <HAL_UART_MspInit+0x100>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b18:	4b16      	ldr	r3, [pc, #88]	@ (8002b74 <HAL_UART_MspInit+0x100>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002b1e:	4b15      	ldr	r3, [pc, #84]	@ (8002b74 <HAL_UART_MspInit+0x100>)
 8002b20:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002b24:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002b26:	4b13      	ldr	r3, [pc, #76]	@ (8002b74 <HAL_UART_MspInit+0x100>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b2c:	4b11      	ldr	r3, [pc, #68]	@ (8002b74 <HAL_UART_MspInit+0x100>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002b32:	4810      	ldr	r0, [pc, #64]	@ (8002b74 <HAL_UART_MspInit+0x100>)
 8002b34:	f000 fa5a 	bl	8002fec <HAL_DMA_Init>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002b3e:	f7ff fe95 	bl	800286c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a0b      	ldr	r2, [pc, #44]	@ (8002b74 <HAL_UART_MspInit+0x100>)
 8002b46:	639a      	str	r2, [r3, #56]	@ 0x38
 8002b48:	4a0a      	ldr	r2, [pc, #40]	@ (8002b74 <HAL_UART_MspInit+0x100>)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002b4e:	2200      	movs	r2, #0
 8002b50:	2100      	movs	r1, #0
 8002b52:	2025      	movs	r0, #37	@ 0x25
 8002b54:	f000 fa13 	bl	8002f7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002b58:	2025      	movs	r0, #37	@ 0x25
 8002b5a:	f000 fa2c 	bl	8002fb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002b5e:	bf00      	nop
 8002b60:	3728      	adds	r7, #40	@ 0x28
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	40011000 	.word	0x40011000
 8002b6c:	40023800 	.word	0x40023800
 8002b70:	40020000 	.word	0x40020000
 8002b74:	200002b0 	.word	0x200002b0
 8002b78:	40026440 	.word	0x40026440

08002b7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b80:	bf00      	nop
 8002b82:	e7fd      	b.n	8002b80 <NMI_Handler+0x4>

08002b84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b88:	bf00      	nop
 8002b8a:	e7fd      	b.n	8002b88 <HardFault_Handler+0x4>

08002b8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b90:	bf00      	nop
 8002b92:	e7fd      	b.n	8002b90 <MemManage_Handler+0x4>

08002b94 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b98:	bf00      	nop
 8002b9a:	e7fd      	b.n	8002b98 <BusFault_Handler+0x4>

08002b9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ba0:	bf00      	nop
 8002ba2:	e7fd      	b.n	8002ba0 <UsageFault_Handler+0x4>

08002ba4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ba8:	bf00      	nop
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr

08002bb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bb6:	bf00      	nop
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr

08002bc0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bc4:	bf00      	nop
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr

08002bce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bd2:	f000 f8b5 	bl	8002d40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bd6:	bf00      	nop
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002bda:	b580      	push	{r7, lr}
 8002bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RC_Pin);
 8002bde:	2010      	movs	r0, #16
 8002be0:	f000 ff38 	bl	8003a54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002be4:	bf00      	nop
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002bec:	4802      	ldr	r0, [pc, #8]	@ (8002bf8 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002bee:	f002 fd15 	bl	800561c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002bf2:	bf00      	nop
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	20000224 	.word	0x20000224

08002bfc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002c00:	4802      	ldr	r0, [pc, #8]	@ (8002c0c <USART1_IRQHandler+0x10>)
 8002c02:	f003 fb6b 	bl	80062dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002c06:	bf00      	nop
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	2000026c 	.word	0x2000026c

08002c10 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002c14:	4802      	ldr	r0, [pc, #8]	@ (8002c20 <DMA2_Stream2_IRQHandler+0x10>)
 8002c16:	f000 fb29 	bl	800326c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002c1a:	bf00      	nop
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	200002b0 	.word	0x200002b0

08002c24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c28:	4b06      	ldr	r3, [pc, #24]	@ (8002c44 <SystemInit+0x20>)
 8002c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c2e:	4a05      	ldr	r2, [pc, #20]	@ (8002c44 <SystemInit+0x20>)
 8002c30:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002c34:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c38:	bf00      	nop
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	e000ed00 	.word	0xe000ed00

08002c48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002c48:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002c80 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c4c:	480d      	ldr	r0, [pc, #52]	@ (8002c84 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002c4e:	490e      	ldr	r1, [pc, #56]	@ (8002c88 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002c50:	4a0e      	ldr	r2, [pc, #56]	@ (8002c8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002c52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c54:	e002      	b.n	8002c5c <LoopCopyDataInit>

08002c56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c5a:	3304      	adds	r3, #4

08002c5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c60:	d3f9      	bcc.n	8002c56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c62:	4a0b      	ldr	r2, [pc, #44]	@ (8002c90 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002c64:	4c0b      	ldr	r4, [pc, #44]	@ (8002c94 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002c66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c68:	e001      	b.n	8002c6e <LoopFillZerobss>

08002c6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c6c:	3204      	adds	r2, #4

08002c6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c70:	d3fb      	bcc.n	8002c6a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002c72:	f7ff ffd7 	bl	8002c24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c76:	f004 fa05 	bl	8007084 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c7a:	f7fe fe6b 	bl	8001954 <main>
  bx  lr    
 8002c7e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002c80:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c88:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 8002c8c:	080089e8 	.word	0x080089e8
  ldr r2, =_sbss
 8002c90:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 8002c94:	200004d0 	.word	0x200004d0

08002c98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c98:	e7fe      	b.n	8002c98 <ADC_IRQHandler>
	...

08002c9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ca0:	4b0e      	ldr	r3, [pc, #56]	@ (8002cdc <HAL_Init+0x40>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a0d      	ldr	r2, [pc, #52]	@ (8002cdc <HAL_Init+0x40>)
 8002ca6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002caa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002cac:	4b0b      	ldr	r3, [pc, #44]	@ (8002cdc <HAL_Init+0x40>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a0a      	ldr	r2, [pc, #40]	@ (8002cdc <HAL_Init+0x40>)
 8002cb2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002cb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cb8:	4b08      	ldr	r3, [pc, #32]	@ (8002cdc <HAL_Init+0x40>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a07      	ldr	r2, [pc, #28]	@ (8002cdc <HAL_Init+0x40>)
 8002cbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cc4:	2003      	movs	r0, #3
 8002cc6:	f000 f94f 	bl	8002f68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cca:	200f      	movs	r0, #15
 8002ccc:	f000 f808 	bl	8002ce0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cd0:	f7ff fdd2 	bl	8002878 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	40023c00 	.word	0x40023c00

08002ce0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ce8:	4b12      	ldr	r3, [pc, #72]	@ (8002d34 <HAL_InitTick+0x54>)
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	4b12      	ldr	r3, [pc, #72]	@ (8002d38 <HAL_InitTick+0x58>)
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002cf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f000 f967 	bl	8002fd2 <HAL_SYSTICK_Config>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d001      	beq.n	8002d0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e00e      	b.n	8002d2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2b0f      	cmp	r3, #15
 8002d12:	d80a      	bhi.n	8002d2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d14:	2200      	movs	r2, #0
 8002d16:	6879      	ldr	r1, [r7, #4]
 8002d18:	f04f 30ff 	mov.w	r0, #4294967295
 8002d1c:	f000 f92f 	bl	8002f7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d20:	4a06      	ldr	r2, [pc, #24]	@ (8002d3c <HAL_InitTick+0x5c>)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d26:	2300      	movs	r3, #0
 8002d28:	e000      	b.n	8002d2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3708      	adds	r7, #8
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	20000048 	.word	0x20000048
 8002d38:	20000050 	.word	0x20000050
 8002d3c:	2000004c 	.word	0x2000004c

08002d40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d44:	4b06      	ldr	r3, [pc, #24]	@ (8002d60 <HAL_IncTick+0x20>)
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	461a      	mov	r2, r3
 8002d4a:	4b06      	ldr	r3, [pc, #24]	@ (8002d64 <HAL_IncTick+0x24>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4413      	add	r3, r2
 8002d50:	4a04      	ldr	r2, [pc, #16]	@ (8002d64 <HAL_IncTick+0x24>)
 8002d52:	6013      	str	r3, [r2, #0]
}
 8002d54:	bf00      	nop
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	20000050 	.word	0x20000050
 8002d64:	20000394 	.word	0x20000394

08002d68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  return uwTick;
 8002d6c:	4b03      	ldr	r3, [pc, #12]	@ (8002d7c <HAL_GetTick+0x14>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	20000394 	.word	0x20000394

08002d80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d88:	f7ff ffee 	bl	8002d68 <HAL_GetTick>
 8002d8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d98:	d005      	beq.n	8002da6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d9a:	4b0a      	ldr	r3, [pc, #40]	@ (8002dc4 <HAL_Delay+0x44>)
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	461a      	mov	r2, r3
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	4413      	add	r3, r2
 8002da4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002da6:	bf00      	nop
 8002da8:	f7ff ffde 	bl	8002d68 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	68fa      	ldr	r2, [r7, #12]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d8f7      	bhi.n	8002da8 <HAL_Delay+0x28>
  {
  }
}
 8002db8:	bf00      	nop
 8002dba:	bf00      	nop
 8002dbc:	3710      	adds	r7, #16
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	20000050 	.word	0x20000050

08002dc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b085      	sub	sp, #20
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f003 0307 	and.w	r3, r3, #7
 8002dd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002dd8:	4b0c      	ldr	r3, [pc, #48]	@ (8002e0c <__NVIC_SetPriorityGrouping+0x44>)
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dde:	68ba      	ldr	r2, [r7, #8]
 8002de0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002de4:	4013      	ands	r3, r2
 8002de6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002df0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002df4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002df8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dfa:	4a04      	ldr	r2, [pc, #16]	@ (8002e0c <__NVIC_SetPriorityGrouping+0x44>)
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	60d3      	str	r3, [r2, #12]
}
 8002e00:	bf00      	nop
 8002e02:	3714      	adds	r7, #20
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr
 8002e0c:	e000ed00 	.word	0xe000ed00

08002e10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e10:	b480      	push	{r7}
 8002e12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e14:	4b04      	ldr	r3, [pc, #16]	@ (8002e28 <__NVIC_GetPriorityGrouping+0x18>)
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	0a1b      	lsrs	r3, r3, #8
 8002e1a:	f003 0307 	and.w	r3, r3, #7
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr
 8002e28:	e000ed00 	.word	0xe000ed00

08002e2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	4603      	mov	r3, r0
 8002e34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	db0b      	blt.n	8002e56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e3e:	79fb      	ldrb	r3, [r7, #7]
 8002e40:	f003 021f 	and.w	r2, r3, #31
 8002e44:	4907      	ldr	r1, [pc, #28]	@ (8002e64 <__NVIC_EnableIRQ+0x38>)
 8002e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e4a:	095b      	lsrs	r3, r3, #5
 8002e4c:	2001      	movs	r0, #1
 8002e4e:	fa00 f202 	lsl.w	r2, r0, r2
 8002e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e56:	bf00      	nop
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	e000e100 	.word	0xe000e100

08002e68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	4603      	mov	r3, r0
 8002e70:	6039      	str	r1, [r7, #0]
 8002e72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	db0a      	blt.n	8002e92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	b2da      	uxtb	r2, r3
 8002e80:	490c      	ldr	r1, [pc, #48]	@ (8002eb4 <__NVIC_SetPriority+0x4c>)
 8002e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e86:	0112      	lsls	r2, r2, #4
 8002e88:	b2d2      	uxtb	r2, r2
 8002e8a:	440b      	add	r3, r1
 8002e8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e90:	e00a      	b.n	8002ea8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	b2da      	uxtb	r2, r3
 8002e96:	4908      	ldr	r1, [pc, #32]	@ (8002eb8 <__NVIC_SetPriority+0x50>)
 8002e98:	79fb      	ldrb	r3, [r7, #7]
 8002e9a:	f003 030f 	and.w	r3, r3, #15
 8002e9e:	3b04      	subs	r3, #4
 8002ea0:	0112      	lsls	r2, r2, #4
 8002ea2:	b2d2      	uxtb	r2, r2
 8002ea4:	440b      	add	r3, r1
 8002ea6:	761a      	strb	r2, [r3, #24]
}
 8002ea8:	bf00      	nop
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr
 8002eb4:	e000e100 	.word	0xe000e100
 8002eb8:	e000ed00 	.word	0xe000ed00

08002ebc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b089      	sub	sp, #36	@ 0x24
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f003 0307 	and.w	r3, r3, #7
 8002ece:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	f1c3 0307 	rsb	r3, r3, #7
 8002ed6:	2b04      	cmp	r3, #4
 8002ed8:	bf28      	it	cs
 8002eda:	2304      	movcs	r3, #4
 8002edc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	3304      	adds	r3, #4
 8002ee2:	2b06      	cmp	r3, #6
 8002ee4:	d902      	bls.n	8002eec <NVIC_EncodePriority+0x30>
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	3b03      	subs	r3, #3
 8002eea:	e000      	b.n	8002eee <NVIC_EncodePriority+0x32>
 8002eec:	2300      	movs	r3, #0
 8002eee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8002efa:	43da      	mvns	r2, r3
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	401a      	ands	r2, r3
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f04:	f04f 31ff 	mov.w	r1, #4294967295
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f0e:	43d9      	mvns	r1, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f14:	4313      	orrs	r3, r2
         );
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3724      	adds	r7, #36	@ 0x24
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
	...

08002f24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f34:	d301      	bcc.n	8002f3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f36:	2301      	movs	r3, #1
 8002f38:	e00f      	b.n	8002f5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f3a:	4a0a      	ldr	r2, [pc, #40]	@ (8002f64 <SysTick_Config+0x40>)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f42:	210f      	movs	r1, #15
 8002f44:	f04f 30ff 	mov.w	r0, #4294967295
 8002f48:	f7ff ff8e 	bl	8002e68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f4c:	4b05      	ldr	r3, [pc, #20]	@ (8002f64 <SysTick_Config+0x40>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f52:	4b04      	ldr	r3, [pc, #16]	@ (8002f64 <SysTick_Config+0x40>)
 8002f54:	2207      	movs	r2, #7
 8002f56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3708      	adds	r7, #8
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	e000e010 	.word	0xe000e010

08002f68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f7ff ff29 	bl	8002dc8 <__NVIC_SetPriorityGrouping>
}
 8002f76:	bf00      	nop
 8002f78:	3708      	adds	r7, #8
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}

08002f7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	b086      	sub	sp, #24
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	4603      	mov	r3, r0
 8002f86:	60b9      	str	r1, [r7, #8]
 8002f88:	607a      	str	r2, [r7, #4]
 8002f8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f90:	f7ff ff3e 	bl	8002e10 <__NVIC_GetPriorityGrouping>
 8002f94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	68b9      	ldr	r1, [r7, #8]
 8002f9a:	6978      	ldr	r0, [r7, #20]
 8002f9c:	f7ff ff8e 	bl	8002ebc <NVIC_EncodePriority>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fa6:	4611      	mov	r1, r2
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7ff ff5d 	bl	8002e68 <__NVIC_SetPriority>
}
 8002fae:	bf00      	nop
 8002fb0:	3718      	adds	r7, #24
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}

08002fb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fb6:	b580      	push	{r7, lr}
 8002fb8:	b082      	sub	sp, #8
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7ff ff31 	bl	8002e2c <__NVIC_EnableIRQ>
}
 8002fca:	bf00      	nop
 8002fcc:	3708      	adds	r7, #8
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b082      	sub	sp, #8
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f7ff ffa2 	bl	8002f24 <SysTick_Config>
 8002fe0:	4603      	mov	r3, r0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3708      	adds	r7, #8
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
	...

08002fec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b086      	sub	sp, #24
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ff8:	f7ff feb6 	bl	8002d68 <HAL_GetTick>
 8002ffc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d101      	bne.n	8003008 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e099      	b.n	800313c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2202      	movs	r2, #2
 800300c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f022 0201 	bic.w	r2, r2, #1
 8003026:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003028:	e00f      	b.n	800304a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800302a:	f7ff fe9d 	bl	8002d68 <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	2b05      	cmp	r3, #5
 8003036:	d908      	bls.n	800304a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2220      	movs	r2, #32
 800303c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2203      	movs	r2, #3
 8003042:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e078      	b.n	800313c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0301 	and.w	r3, r3, #1
 8003054:	2b00      	cmp	r3, #0
 8003056:	d1e8      	bne.n	800302a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003060:	697a      	ldr	r2, [r7, #20]
 8003062:	4b38      	ldr	r3, [pc, #224]	@ (8003144 <HAL_DMA_Init+0x158>)
 8003064:	4013      	ands	r3, r2
 8003066:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685a      	ldr	r2, [r3, #4]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003076:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	691b      	ldr	r3, [r3, #16]
 800307c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003082:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	699b      	ldr	r3, [r3, #24]
 8003088:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800308e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a1b      	ldr	r3, [r3, #32]
 8003094:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003096:	697a      	ldr	r2, [r7, #20]
 8003098:	4313      	orrs	r3, r2
 800309a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a0:	2b04      	cmp	r3, #4
 80030a2:	d107      	bne.n	80030b4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ac:	4313      	orrs	r3, r2
 80030ae:	697a      	ldr	r2, [r7, #20]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	697a      	ldr	r2, [r7, #20]
 80030ba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	695b      	ldr	r3, [r3, #20]
 80030c2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	f023 0307 	bic.w	r3, r3, #7
 80030ca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d0:	697a      	ldr	r2, [r7, #20]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030da:	2b04      	cmp	r3, #4
 80030dc:	d117      	bne.n	800310e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030e2:	697a      	ldr	r2, [r7, #20]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d00e      	beq.n	800310e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f000 fa7b 	bl	80035ec <DMA_CheckFifoParam>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d008      	beq.n	800310e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2240      	movs	r2, #64	@ 0x40
 8003100:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2201      	movs	r2, #1
 8003106:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800310a:	2301      	movs	r3, #1
 800310c:	e016      	b.n	800313c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	697a      	ldr	r2, [r7, #20]
 8003114:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f000 fa32 	bl	8003580 <DMA_CalcBaseAndBitshift>
 800311c:	4603      	mov	r3, r0
 800311e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003124:	223f      	movs	r2, #63	@ 0x3f
 8003126:	409a      	lsls	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2201      	movs	r2, #1
 8003136:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800313a:	2300      	movs	r3, #0
}
 800313c:	4618      	mov	r0, r3
 800313e:	3718      	adds	r7, #24
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	f010803f 	.word	0xf010803f

08003148 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003154:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003156:	f7ff fe07 	bl	8002d68 <HAL_GetTick>
 800315a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003162:	b2db      	uxtb	r3, r3
 8003164:	2b02      	cmp	r3, #2
 8003166:	d008      	beq.n	800317a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2280      	movs	r2, #128	@ 0x80
 800316c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e052      	b.n	8003220 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f022 0216 	bic.w	r2, r2, #22
 8003188:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	695a      	ldr	r2, [r3, #20]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003198:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d103      	bne.n	80031aa <HAL_DMA_Abort+0x62>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d007      	beq.n	80031ba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f022 0208 	bic.w	r2, r2, #8
 80031b8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f022 0201 	bic.w	r2, r2, #1
 80031c8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031ca:	e013      	b.n	80031f4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031cc:	f7ff fdcc 	bl	8002d68 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	2b05      	cmp	r3, #5
 80031d8:	d90c      	bls.n	80031f4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2220      	movs	r2, #32
 80031de:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2203      	movs	r2, #3
 80031e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e015      	b.n	8003220 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1e4      	bne.n	80031cc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003206:	223f      	movs	r2, #63	@ 0x3f
 8003208:	409a      	lsls	r2, r3
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2201      	movs	r2, #1
 8003212:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800321e:	2300      	movs	r3, #0
}
 8003220:	4618      	mov	r0, r3
 8003222:	3710      	adds	r7, #16
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003236:	b2db      	uxtb	r3, r3
 8003238:	2b02      	cmp	r3, #2
 800323a:	d004      	beq.n	8003246 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2280      	movs	r2, #128	@ 0x80
 8003240:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e00c      	b.n	8003260 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2205      	movs	r2, #5
 800324a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f022 0201 	bic.w	r2, r2, #1
 800325c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800325e:	2300      	movs	r3, #0
}
 8003260:	4618      	mov	r0, r3
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b086      	sub	sp, #24
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003274:	2300      	movs	r3, #0
 8003276:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003278:	4b8e      	ldr	r3, [pc, #568]	@ (80034b4 <HAL_DMA_IRQHandler+0x248>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a8e      	ldr	r2, [pc, #568]	@ (80034b8 <HAL_DMA_IRQHandler+0x24c>)
 800327e:	fba2 2303 	umull	r2, r3, r2, r3
 8003282:	0a9b      	lsrs	r3, r3, #10
 8003284:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800328a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003296:	2208      	movs	r2, #8
 8003298:	409a      	lsls	r2, r3
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	4013      	ands	r3, r2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d01a      	beq.n	80032d8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0304 	and.w	r3, r3, #4
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d013      	beq.n	80032d8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f022 0204 	bic.w	r2, r2, #4
 80032be:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032c4:	2208      	movs	r2, #8
 80032c6:	409a      	lsls	r2, r3
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032d0:	f043 0201 	orr.w	r2, r3, #1
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032dc:	2201      	movs	r2, #1
 80032de:	409a      	lsls	r2, r3
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	4013      	ands	r3, r2
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d012      	beq.n	800330e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	695b      	ldr	r3, [r3, #20]
 80032ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00b      	beq.n	800330e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032fa:	2201      	movs	r2, #1
 80032fc:	409a      	lsls	r2, r3
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003306:	f043 0202 	orr.w	r2, r3, #2
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003312:	2204      	movs	r2, #4
 8003314:	409a      	lsls	r2, r3
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	4013      	ands	r3, r2
 800331a:	2b00      	cmp	r3, #0
 800331c:	d012      	beq.n	8003344 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0302 	and.w	r3, r3, #2
 8003328:	2b00      	cmp	r3, #0
 800332a:	d00b      	beq.n	8003344 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003330:	2204      	movs	r2, #4
 8003332:	409a      	lsls	r2, r3
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800333c:	f043 0204 	orr.w	r2, r3, #4
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003348:	2210      	movs	r2, #16
 800334a:	409a      	lsls	r2, r3
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	4013      	ands	r3, r2
 8003350:	2b00      	cmp	r3, #0
 8003352:	d043      	beq.n	80033dc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0308 	and.w	r3, r3, #8
 800335e:	2b00      	cmp	r3, #0
 8003360:	d03c      	beq.n	80033dc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003366:	2210      	movs	r2, #16
 8003368:	409a      	lsls	r2, r3
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003378:	2b00      	cmp	r3, #0
 800337a:	d018      	beq.n	80033ae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d108      	bne.n	800339c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800338e:	2b00      	cmp	r3, #0
 8003390:	d024      	beq.n	80033dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	4798      	blx	r3
 800339a:	e01f      	b.n	80033dc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d01b      	beq.n	80033dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	4798      	blx	r3
 80033ac:	e016      	b.n	80033dc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d107      	bne.n	80033cc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f022 0208 	bic.w	r2, r2, #8
 80033ca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d003      	beq.n	80033dc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033e0:	2220      	movs	r2, #32
 80033e2:	409a      	lsls	r2, r3
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	4013      	ands	r3, r2
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	f000 808f 	beq.w	800350c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0310 	and.w	r3, r3, #16
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	f000 8087 	beq.w	800350c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003402:	2220      	movs	r2, #32
 8003404:	409a      	lsls	r2, r3
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003410:	b2db      	uxtb	r3, r3
 8003412:	2b05      	cmp	r3, #5
 8003414:	d136      	bne.n	8003484 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f022 0216 	bic.w	r2, r2, #22
 8003424:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	695a      	ldr	r2, [r3, #20]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003434:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800343a:	2b00      	cmp	r3, #0
 800343c:	d103      	bne.n	8003446 <HAL_DMA_IRQHandler+0x1da>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003442:	2b00      	cmp	r3, #0
 8003444:	d007      	beq.n	8003456 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f022 0208 	bic.w	r2, r2, #8
 8003454:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800345a:	223f      	movs	r2, #63	@ 0x3f
 800345c:	409a      	lsls	r2, r3
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2201      	movs	r2, #1
 8003466:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003476:	2b00      	cmp	r3, #0
 8003478:	d07e      	beq.n	8003578 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	4798      	blx	r3
        }
        return;
 8003482:	e079      	b.n	8003578 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d01d      	beq.n	80034ce <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d10d      	bne.n	80034bc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d031      	beq.n	800350c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	4798      	blx	r3
 80034b0:	e02c      	b.n	800350c <HAL_DMA_IRQHandler+0x2a0>
 80034b2:	bf00      	nop
 80034b4:	20000048 	.word	0x20000048
 80034b8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d023      	beq.n	800350c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	4798      	blx	r3
 80034cc:	e01e      	b.n	800350c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d10f      	bne.n	80034fc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f022 0210 	bic.w	r2, r2, #16
 80034ea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003500:	2b00      	cmp	r3, #0
 8003502:	d003      	beq.n	800350c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003510:	2b00      	cmp	r3, #0
 8003512:	d032      	beq.n	800357a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003518:	f003 0301 	and.w	r3, r3, #1
 800351c:	2b00      	cmp	r3, #0
 800351e:	d022      	beq.n	8003566 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2205      	movs	r2, #5
 8003524:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f022 0201 	bic.w	r2, r2, #1
 8003536:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	3301      	adds	r3, #1
 800353c:	60bb      	str	r3, [r7, #8]
 800353e:	697a      	ldr	r2, [r7, #20]
 8003540:	429a      	cmp	r2, r3
 8003542:	d307      	bcc.n	8003554 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0301 	and.w	r3, r3, #1
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1f2      	bne.n	8003538 <HAL_DMA_IRQHandler+0x2cc>
 8003552:	e000      	b.n	8003556 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003554:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2201      	movs	r2, #1
 800355a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800356a:	2b00      	cmp	r3, #0
 800356c:	d005      	beq.n	800357a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	4798      	blx	r3
 8003576:	e000      	b.n	800357a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003578:	bf00      	nop
    }
  }
}
 800357a:	3718      	adds	r7, #24
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003580:	b480      	push	{r7}
 8003582:	b085      	sub	sp, #20
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	b2db      	uxtb	r3, r3
 800358e:	3b10      	subs	r3, #16
 8003590:	4a14      	ldr	r2, [pc, #80]	@ (80035e4 <DMA_CalcBaseAndBitshift+0x64>)
 8003592:	fba2 2303 	umull	r2, r3, r2, r3
 8003596:	091b      	lsrs	r3, r3, #4
 8003598:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800359a:	4a13      	ldr	r2, [pc, #76]	@ (80035e8 <DMA_CalcBaseAndBitshift+0x68>)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	4413      	add	r3, r2
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	461a      	mov	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2b03      	cmp	r3, #3
 80035ac:	d909      	bls.n	80035c2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80035b6:	f023 0303 	bic.w	r3, r3, #3
 80035ba:	1d1a      	adds	r2, r3, #4
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	659a      	str	r2, [r3, #88]	@ 0x58
 80035c0:	e007      	b.n	80035d2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80035ca:	f023 0303 	bic.w	r3, r3, #3
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3714      	adds	r7, #20
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	aaaaaaab 	.word	0xaaaaaaab
 80035e8:	080087f0 	.word	0x080087f0

080035ec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b085      	sub	sp, #20
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035f4:	2300      	movs	r3, #0
 80035f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035fc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	699b      	ldr	r3, [r3, #24]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d11f      	bne.n	8003646 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	2b03      	cmp	r3, #3
 800360a:	d856      	bhi.n	80036ba <DMA_CheckFifoParam+0xce>
 800360c:	a201      	add	r2, pc, #4	@ (adr r2, 8003614 <DMA_CheckFifoParam+0x28>)
 800360e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003612:	bf00      	nop
 8003614:	08003625 	.word	0x08003625
 8003618:	08003637 	.word	0x08003637
 800361c:	08003625 	.word	0x08003625
 8003620:	080036bb 	.word	0x080036bb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003628:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d046      	beq.n	80036be <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003634:	e043      	b.n	80036be <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800363a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800363e:	d140      	bne.n	80036c2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003644:	e03d      	b.n	80036c2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800364e:	d121      	bne.n	8003694 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	2b03      	cmp	r3, #3
 8003654:	d837      	bhi.n	80036c6 <DMA_CheckFifoParam+0xda>
 8003656:	a201      	add	r2, pc, #4	@ (adr r2, 800365c <DMA_CheckFifoParam+0x70>)
 8003658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800365c:	0800366d 	.word	0x0800366d
 8003660:	08003673 	.word	0x08003673
 8003664:	0800366d 	.word	0x0800366d
 8003668:	08003685 	.word	0x08003685
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	73fb      	strb	r3, [r7, #15]
      break;
 8003670:	e030      	b.n	80036d4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003676:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d025      	beq.n	80036ca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003682:	e022      	b.n	80036ca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003688:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800368c:	d11f      	bne.n	80036ce <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003692:	e01c      	b.n	80036ce <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	2b02      	cmp	r3, #2
 8003698:	d903      	bls.n	80036a2 <DMA_CheckFifoParam+0xb6>
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	2b03      	cmp	r3, #3
 800369e:	d003      	beq.n	80036a8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80036a0:	e018      	b.n	80036d4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	73fb      	strb	r3, [r7, #15]
      break;
 80036a6:	e015      	b.n	80036d4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d00e      	beq.n	80036d2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	73fb      	strb	r3, [r7, #15]
      break;
 80036b8:	e00b      	b.n	80036d2 <DMA_CheckFifoParam+0xe6>
      break;
 80036ba:	bf00      	nop
 80036bc:	e00a      	b.n	80036d4 <DMA_CheckFifoParam+0xe8>
      break;
 80036be:	bf00      	nop
 80036c0:	e008      	b.n	80036d4 <DMA_CheckFifoParam+0xe8>
      break;
 80036c2:	bf00      	nop
 80036c4:	e006      	b.n	80036d4 <DMA_CheckFifoParam+0xe8>
      break;
 80036c6:	bf00      	nop
 80036c8:	e004      	b.n	80036d4 <DMA_CheckFifoParam+0xe8>
      break;
 80036ca:	bf00      	nop
 80036cc:	e002      	b.n	80036d4 <DMA_CheckFifoParam+0xe8>
      break;   
 80036ce:	bf00      	nop
 80036d0:	e000      	b.n	80036d4 <DMA_CheckFifoParam+0xe8>
      break;
 80036d2:	bf00      	nop
    }
  } 
  
  return status; 
 80036d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3714      	adds	r7, #20
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop

080036e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b089      	sub	sp, #36	@ 0x24
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036ee:	2300      	movs	r3, #0
 80036f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80036f2:	2300      	movs	r3, #0
 80036f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80036f6:	2300      	movs	r3, #0
 80036f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036fa:	2300      	movs	r3, #0
 80036fc:	61fb      	str	r3, [r7, #28]
 80036fe:	e159      	b.n	80039b4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003700:	2201      	movs	r2, #1
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	fa02 f303 	lsl.w	r3, r2, r3
 8003708:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	697a      	ldr	r2, [r7, #20]
 8003710:	4013      	ands	r3, r2
 8003712:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003714:	693a      	ldr	r2, [r7, #16]
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	429a      	cmp	r2, r3
 800371a:	f040 8148 	bne.w	80039ae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f003 0303 	and.w	r3, r3, #3
 8003726:	2b01      	cmp	r3, #1
 8003728:	d005      	beq.n	8003736 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003732:	2b02      	cmp	r3, #2
 8003734:	d130      	bne.n	8003798 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	005b      	lsls	r3, r3, #1
 8003740:	2203      	movs	r2, #3
 8003742:	fa02 f303 	lsl.w	r3, r2, r3
 8003746:	43db      	mvns	r3, r3
 8003748:	69ba      	ldr	r2, [r7, #24]
 800374a:	4013      	ands	r3, r2
 800374c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	68da      	ldr	r2, [r3, #12]
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	005b      	lsls	r3, r3, #1
 8003756:	fa02 f303 	lsl.w	r3, r2, r3
 800375a:	69ba      	ldr	r2, [r7, #24]
 800375c:	4313      	orrs	r3, r2
 800375e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	69ba      	ldr	r2, [r7, #24]
 8003764:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800376c:	2201      	movs	r2, #1
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	fa02 f303 	lsl.w	r3, r2, r3
 8003774:	43db      	mvns	r3, r3
 8003776:	69ba      	ldr	r2, [r7, #24]
 8003778:	4013      	ands	r3, r2
 800377a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	091b      	lsrs	r3, r3, #4
 8003782:	f003 0201 	and.w	r2, r3, #1
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	fa02 f303 	lsl.w	r3, r2, r3
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	4313      	orrs	r3, r2
 8003790:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	69ba      	ldr	r2, [r7, #24]
 8003796:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f003 0303 	and.w	r3, r3, #3
 80037a0:	2b03      	cmp	r3, #3
 80037a2:	d017      	beq.n	80037d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	005b      	lsls	r3, r3, #1
 80037ae:	2203      	movs	r2, #3
 80037b0:	fa02 f303 	lsl.w	r3, r2, r3
 80037b4:	43db      	mvns	r3, r3
 80037b6:	69ba      	ldr	r2, [r7, #24]
 80037b8:	4013      	ands	r3, r2
 80037ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	689a      	ldr	r2, [r3, #8]
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	005b      	lsls	r3, r3, #1
 80037c4:	fa02 f303 	lsl.w	r3, r2, r3
 80037c8:	69ba      	ldr	r2, [r7, #24]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	69ba      	ldr	r2, [r7, #24]
 80037d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f003 0303 	and.w	r3, r3, #3
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d123      	bne.n	8003828 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	08da      	lsrs	r2, r3, #3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	3208      	adds	r2, #8
 80037e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	f003 0307 	and.w	r3, r3, #7
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	220f      	movs	r2, #15
 80037f8:	fa02 f303 	lsl.w	r3, r2, r3
 80037fc:	43db      	mvns	r3, r3
 80037fe:	69ba      	ldr	r2, [r7, #24]
 8003800:	4013      	ands	r3, r2
 8003802:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	691a      	ldr	r2, [r3, #16]
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	f003 0307 	and.w	r3, r3, #7
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	fa02 f303 	lsl.w	r3, r2, r3
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	4313      	orrs	r3, r2
 8003818:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	08da      	lsrs	r2, r3, #3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	3208      	adds	r2, #8
 8003822:	69b9      	ldr	r1, [r7, #24]
 8003824:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	005b      	lsls	r3, r3, #1
 8003832:	2203      	movs	r2, #3
 8003834:	fa02 f303 	lsl.w	r3, r2, r3
 8003838:	43db      	mvns	r3, r3
 800383a:	69ba      	ldr	r2, [r7, #24]
 800383c:	4013      	ands	r3, r2
 800383e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f003 0203 	and.w	r2, r3, #3
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	005b      	lsls	r3, r3, #1
 800384c:	fa02 f303 	lsl.w	r3, r2, r3
 8003850:	69ba      	ldr	r2, [r7, #24]
 8003852:	4313      	orrs	r3, r2
 8003854:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	69ba      	ldr	r2, [r7, #24]
 800385a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003864:	2b00      	cmp	r3, #0
 8003866:	f000 80a2 	beq.w	80039ae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800386a:	2300      	movs	r3, #0
 800386c:	60fb      	str	r3, [r7, #12]
 800386e:	4b57      	ldr	r3, [pc, #348]	@ (80039cc <HAL_GPIO_Init+0x2e8>)
 8003870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003872:	4a56      	ldr	r2, [pc, #344]	@ (80039cc <HAL_GPIO_Init+0x2e8>)
 8003874:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003878:	6453      	str	r3, [r2, #68]	@ 0x44
 800387a:	4b54      	ldr	r3, [pc, #336]	@ (80039cc <HAL_GPIO_Init+0x2e8>)
 800387c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800387e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003882:	60fb      	str	r3, [r7, #12]
 8003884:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003886:	4a52      	ldr	r2, [pc, #328]	@ (80039d0 <HAL_GPIO_Init+0x2ec>)
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	089b      	lsrs	r3, r3, #2
 800388c:	3302      	adds	r3, #2
 800388e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003892:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	f003 0303 	and.w	r3, r3, #3
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	220f      	movs	r2, #15
 800389e:	fa02 f303 	lsl.w	r3, r2, r3
 80038a2:	43db      	mvns	r3, r3
 80038a4:	69ba      	ldr	r2, [r7, #24]
 80038a6:	4013      	ands	r3, r2
 80038a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a49      	ldr	r2, [pc, #292]	@ (80039d4 <HAL_GPIO_Init+0x2f0>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d019      	beq.n	80038e6 <HAL_GPIO_Init+0x202>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a48      	ldr	r2, [pc, #288]	@ (80039d8 <HAL_GPIO_Init+0x2f4>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d013      	beq.n	80038e2 <HAL_GPIO_Init+0x1fe>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a47      	ldr	r2, [pc, #284]	@ (80039dc <HAL_GPIO_Init+0x2f8>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d00d      	beq.n	80038de <HAL_GPIO_Init+0x1fa>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a46      	ldr	r2, [pc, #280]	@ (80039e0 <HAL_GPIO_Init+0x2fc>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d007      	beq.n	80038da <HAL_GPIO_Init+0x1f6>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a45      	ldr	r2, [pc, #276]	@ (80039e4 <HAL_GPIO_Init+0x300>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d101      	bne.n	80038d6 <HAL_GPIO_Init+0x1f2>
 80038d2:	2304      	movs	r3, #4
 80038d4:	e008      	b.n	80038e8 <HAL_GPIO_Init+0x204>
 80038d6:	2307      	movs	r3, #7
 80038d8:	e006      	b.n	80038e8 <HAL_GPIO_Init+0x204>
 80038da:	2303      	movs	r3, #3
 80038dc:	e004      	b.n	80038e8 <HAL_GPIO_Init+0x204>
 80038de:	2302      	movs	r3, #2
 80038e0:	e002      	b.n	80038e8 <HAL_GPIO_Init+0x204>
 80038e2:	2301      	movs	r3, #1
 80038e4:	e000      	b.n	80038e8 <HAL_GPIO_Init+0x204>
 80038e6:	2300      	movs	r3, #0
 80038e8:	69fa      	ldr	r2, [r7, #28]
 80038ea:	f002 0203 	and.w	r2, r2, #3
 80038ee:	0092      	lsls	r2, r2, #2
 80038f0:	4093      	lsls	r3, r2
 80038f2:	69ba      	ldr	r2, [r7, #24]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038f8:	4935      	ldr	r1, [pc, #212]	@ (80039d0 <HAL_GPIO_Init+0x2ec>)
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	089b      	lsrs	r3, r3, #2
 80038fe:	3302      	adds	r3, #2
 8003900:	69ba      	ldr	r2, [r7, #24]
 8003902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003906:	4b38      	ldr	r3, [pc, #224]	@ (80039e8 <HAL_GPIO_Init+0x304>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	43db      	mvns	r3, r3
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	4013      	ands	r3, r2
 8003914:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d003      	beq.n	800392a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003922:	69ba      	ldr	r2, [r7, #24]
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	4313      	orrs	r3, r2
 8003928:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800392a:	4a2f      	ldr	r2, [pc, #188]	@ (80039e8 <HAL_GPIO_Init+0x304>)
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003930:	4b2d      	ldr	r3, [pc, #180]	@ (80039e8 <HAL_GPIO_Init+0x304>)
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	43db      	mvns	r3, r3
 800393a:	69ba      	ldr	r2, [r7, #24]
 800393c:	4013      	ands	r3, r2
 800393e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d003      	beq.n	8003954 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800394c:	69ba      	ldr	r2, [r7, #24]
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	4313      	orrs	r3, r2
 8003952:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003954:	4a24      	ldr	r2, [pc, #144]	@ (80039e8 <HAL_GPIO_Init+0x304>)
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800395a:	4b23      	ldr	r3, [pc, #140]	@ (80039e8 <HAL_GPIO_Init+0x304>)
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	43db      	mvns	r3, r3
 8003964:	69ba      	ldr	r2, [r7, #24]
 8003966:	4013      	ands	r3, r2
 8003968:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d003      	beq.n	800397e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003976:	69ba      	ldr	r2, [r7, #24]
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	4313      	orrs	r3, r2
 800397c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800397e:	4a1a      	ldr	r2, [pc, #104]	@ (80039e8 <HAL_GPIO_Init+0x304>)
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003984:	4b18      	ldr	r3, [pc, #96]	@ (80039e8 <HAL_GPIO_Init+0x304>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	43db      	mvns	r3, r3
 800398e:	69ba      	ldr	r2, [r7, #24]
 8003990:	4013      	ands	r3, r2
 8003992:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d003      	beq.n	80039a8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80039a0:	69ba      	ldr	r2, [r7, #24]
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039a8:	4a0f      	ldr	r2, [pc, #60]	@ (80039e8 <HAL_GPIO_Init+0x304>)
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	3301      	adds	r3, #1
 80039b2:	61fb      	str	r3, [r7, #28]
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	2b0f      	cmp	r3, #15
 80039b8:	f67f aea2 	bls.w	8003700 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80039bc:	bf00      	nop
 80039be:	bf00      	nop
 80039c0:	3724      	adds	r7, #36	@ 0x24
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr
 80039ca:	bf00      	nop
 80039cc:	40023800 	.word	0x40023800
 80039d0:	40013800 	.word	0x40013800
 80039d4:	40020000 	.word	0x40020000
 80039d8:	40020400 	.word	0x40020400
 80039dc:	40020800 	.word	0x40020800
 80039e0:	40020c00 	.word	0x40020c00
 80039e4:	40021000 	.word	0x40021000
 80039e8:	40013c00 	.word	0x40013c00

080039ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	460b      	mov	r3, r1
 80039f6:	807b      	strh	r3, [r7, #2]
 80039f8:	4613      	mov	r3, r2
 80039fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039fc:	787b      	ldrb	r3, [r7, #1]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d003      	beq.n	8003a0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a02:	887a      	ldrh	r2, [r7, #2]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a08:	e003      	b.n	8003a12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a0a:	887b      	ldrh	r3, [r7, #2]
 8003a0c:	041a      	lsls	r2, r3, #16
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	619a      	str	r2, [r3, #24]
}
 8003a12:	bf00      	nop
 8003a14:	370c      	adds	r7, #12
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr

08003a1e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a1e:	b480      	push	{r7}
 8003a20:	b085      	sub	sp, #20
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
 8003a26:	460b      	mov	r3, r1
 8003a28:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	695b      	ldr	r3, [r3, #20]
 8003a2e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003a30:	887a      	ldrh	r2, [r7, #2]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	4013      	ands	r3, r2
 8003a36:	041a      	lsls	r2, r3, #16
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	43d9      	mvns	r1, r3
 8003a3c:	887b      	ldrh	r3, [r7, #2]
 8003a3e:	400b      	ands	r3, r1
 8003a40:	431a      	orrs	r2, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	619a      	str	r2, [r3, #24]
}
 8003a46:	bf00      	nop
 8003a48:	3714      	adds	r7, #20
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr
	...

08003a54 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003a5e:	4b08      	ldr	r3, [pc, #32]	@ (8003a80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a60:	695a      	ldr	r2, [r3, #20]
 8003a62:	88fb      	ldrh	r3, [r7, #6]
 8003a64:	4013      	ands	r3, r2
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d006      	beq.n	8003a78 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a6a:	4a05      	ldr	r2, [pc, #20]	@ (8003a80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a6c:	88fb      	ldrh	r3, [r7, #6]
 8003a6e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a70:	88fb      	ldrh	r3, [r7, #6]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7fe febc 	bl	80027f0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003a78:	bf00      	nop
 8003a7a:	3708      	adds	r7, #8
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	40013c00 	.word	0x40013c00

08003a84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d101      	bne.n	8003a96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e12b      	b.n	8003cee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d106      	bne.n	8003ab0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f7fe ff0c 	bl	80028c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2224      	movs	r2, #36	@ 0x24
 8003ab4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f022 0201 	bic.w	r2, r2, #1
 8003ac6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003ad6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003ae6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ae8:	f001 fbbc 	bl	8005264 <HAL_RCC_GetPCLK1Freq>
 8003aec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	4a81      	ldr	r2, [pc, #516]	@ (8003cf8 <HAL_I2C_Init+0x274>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d807      	bhi.n	8003b08 <HAL_I2C_Init+0x84>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	4a80      	ldr	r2, [pc, #512]	@ (8003cfc <HAL_I2C_Init+0x278>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	bf94      	ite	ls
 8003b00:	2301      	movls	r3, #1
 8003b02:	2300      	movhi	r3, #0
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	e006      	b.n	8003b16 <HAL_I2C_Init+0x92>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	4a7d      	ldr	r2, [pc, #500]	@ (8003d00 <HAL_I2C_Init+0x27c>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	bf94      	ite	ls
 8003b10:	2301      	movls	r3, #1
 8003b12:	2300      	movhi	r3, #0
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d001      	beq.n	8003b1e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e0e7      	b.n	8003cee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	4a78      	ldr	r2, [pc, #480]	@ (8003d04 <HAL_I2C_Init+0x280>)
 8003b22:	fba2 2303 	umull	r2, r3, r2, r3
 8003b26:	0c9b      	lsrs	r3, r3, #18
 8003b28:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	68ba      	ldr	r2, [r7, #8]
 8003b3a:	430a      	orrs	r2, r1
 8003b3c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	6a1b      	ldr	r3, [r3, #32]
 8003b44:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	4a6a      	ldr	r2, [pc, #424]	@ (8003cf8 <HAL_I2C_Init+0x274>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d802      	bhi.n	8003b58 <HAL_I2C_Init+0xd4>
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	3301      	adds	r3, #1
 8003b56:	e009      	b.n	8003b6c <HAL_I2C_Init+0xe8>
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003b5e:	fb02 f303 	mul.w	r3, r2, r3
 8003b62:	4a69      	ldr	r2, [pc, #420]	@ (8003d08 <HAL_I2C_Init+0x284>)
 8003b64:	fba2 2303 	umull	r2, r3, r2, r3
 8003b68:	099b      	lsrs	r3, r3, #6
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	6812      	ldr	r2, [r2, #0]
 8003b70:	430b      	orrs	r3, r1
 8003b72:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	69db      	ldr	r3, [r3, #28]
 8003b7a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003b7e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	495c      	ldr	r1, [pc, #368]	@ (8003cf8 <HAL_I2C_Init+0x274>)
 8003b88:	428b      	cmp	r3, r1
 8003b8a:	d819      	bhi.n	8003bc0 <HAL_I2C_Init+0x13c>
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	1e59      	subs	r1, r3, #1
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	005b      	lsls	r3, r3, #1
 8003b96:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b9a:	1c59      	adds	r1, r3, #1
 8003b9c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003ba0:	400b      	ands	r3, r1
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d00a      	beq.n	8003bbc <HAL_I2C_Init+0x138>
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	1e59      	subs	r1, r3, #1
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	005b      	lsls	r3, r3, #1
 8003bb0:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bb4:	3301      	adds	r3, #1
 8003bb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bba:	e051      	b.n	8003c60 <HAL_I2C_Init+0x1dc>
 8003bbc:	2304      	movs	r3, #4
 8003bbe:	e04f      	b.n	8003c60 <HAL_I2C_Init+0x1dc>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d111      	bne.n	8003bec <HAL_I2C_Init+0x168>
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	1e58      	subs	r0, r3, #1
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6859      	ldr	r1, [r3, #4]
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	005b      	lsls	r3, r3, #1
 8003bd4:	440b      	add	r3, r1
 8003bd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bda:	3301      	adds	r3, #1
 8003bdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	bf0c      	ite	eq
 8003be4:	2301      	moveq	r3, #1
 8003be6:	2300      	movne	r3, #0
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	e012      	b.n	8003c12 <HAL_I2C_Init+0x18e>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	1e58      	subs	r0, r3, #1
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6859      	ldr	r1, [r3, #4]
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	440b      	add	r3, r1
 8003bfa:	0099      	lsls	r1, r3, #2
 8003bfc:	440b      	add	r3, r1
 8003bfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c02:	3301      	adds	r3, #1
 8003c04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	bf0c      	ite	eq
 8003c0c:	2301      	moveq	r3, #1
 8003c0e:	2300      	movne	r3, #0
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d001      	beq.n	8003c1a <HAL_I2C_Init+0x196>
 8003c16:	2301      	movs	r3, #1
 8003c18:	e022      	b.n	8003c60 <HAL_I2C_Init+0x1dc>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d10e      	bne.n	8003c40 <HAL_I2C_Init+0x1bc>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	1e58      	subs	r0, r3, #1
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6859      	ldr	r1, [r3, #4]
 8003c2a:	460b      	mov	r3, r1
 8003c2c:	005b      	lsls	r3, r3, #1
 8003c2e:	440b      	add	r3, r1
 8003c30:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c34:	3301      	adds	r3, #1
 8003c36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c3e:	e00f      	b.n	8003c60 <HAL_I2C_Init+0x1dc>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	1e58      	subs	r0, r3, #1
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6859      	ldr	r1, [r3, #4]
 8003c48:	460b      	mov	r3, r1
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	440b      	add	r3, r1
 8003c4e:	0099      	lsls	r1, r3, #2
 8003c50:	440b      	add	r3, r1
 8003c52:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c56:	3301      	adds	r3, #1
 8003c58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c5c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003c60:	6879      	ldr	r1, [r7, #4]
 8003c62:	6809      	ldr	r1, [r1, #0]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	69da      	ldr	r2, [r3, #28]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a1b      	ldr	r3, [r3, #32]
 8003c7a:	431a      	orrs	r2, r3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	430a      	orrs	r2, r1
 8003c82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003c8e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	6911      	ldr	r1, [r2, #16]
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	68d2      	ldr	r2, [r2, #12]
 8003c9a:	4311      	orrs	r1, r2
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	6812      	ldr	r2, [r2, #0]
 8003ca0:	430b      	orrs	r3, r1
 8003ca2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	695a      	ldr	r2, [r3, #20]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	699b      	ldr	r3, [r3, #24]
 8003cb6:	431a      	orrs	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f042 0201 	orr.w	r2, r2, #1
 8003cce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2220      	movs	r2, #32
 8003cda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003cec:	2300      	movs	r3, #0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3710      	adds	r7, #16
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	000186a0 	.word	0x000186a0
 8003cfc:	001e847f 	.word	0x001e847f
 8003d00:	003d08ff 	.word	0x003d08ff
 8003d04:	431bde83 	.word	0x431bde83
 8003d08:	10624dd3 	.word	0x10624dd3

08003d0c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b088      	sub	sp, #32
 8003d10:	af02      	add	r7, sp, #8
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	4608      	mov	r0, r1
 8003d16:	4611      	mov	r1, r2
 8003d18:	461a      	mov	r2, r3
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	817b      	strh	r3, [r7, #10]
 8003d1e:	460b      	mov	r3, r1
 8003d20:	813b      	strh	r3, [r7, #8]
 8003d22:	4613      	mov	r3, r2
 8003d24:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d26:	f7ff f81f 	bl	8002d68 <HAL_GetTick>
 8003d2a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	2b20      	cmp	r3, #32
 8003d36:	f040 80d9 	bne.w	8003eec <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	9300      	str	r3, [sp, #0]
 8003d3e:	2319      	movs	r3, #25
 8003d40:	2201      	movs	r2, #1
 8003d42:	496d      	ldr	r1, [pc, #436]	@ (8003ef8 <HAL_I2C_Mem_Write+0x1ec>)
 8003d44:	68f8      	ldr	r0, [r7, #12]
 8003d46:	f000 fc7f 	bl	8004648 <I2C_WaitOnFlagUntilTimeout>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d001      	beq.n	8003d54 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003d50:	2302      	movs	r3, #2
 8003d52:	e0cc      	b.n	8003eee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d101      	bne.n	8003d62 <HAL_I2C_Mem_Write+0x56>
 8003d5e:	2302      	movs	r3, #2
 8003d60:	e0c5      	b.n	8003eee <HAL_I2C_Mem_Write+0x1e2>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2201      	movs	r2, #1
 8003d66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0301 	and.w	r3, r3, #1
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d007      	beq.n	8003d88 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f042 0201 	orr.w	r2, r2, #1
 8003d86:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d96:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2221      	movs	r2, #33	@ 0x21
 8003d9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2240      	movs	r2, #64	@ 0x40
 8003da4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2200      	movs	r2, #0
 8003dac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6a3a      	ldr	r2, [r7, #32]
 8003db2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003db8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dbe:	b29a      	uxth	r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	4a4d      	ldr	r2, [pc, #308]	@ (8003efc <HAL_I2C_Mem_Write+0x1f0>)
 8003dc8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003dca:	88f8      	ldrh	r0, [r7, #6]
 8003dcc:	893a      	ldrh	r2, [r7, #8]
 8003dce:	8979      	ldrh	r1, [r7, #10]
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	9301      	str	r3, [sp, #4]
 8003dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dd6:	9300      	str	r3, [sp, #0]
 8003dd8:	4603      	mov	r3, r0
 8003dda:	68f8      	ldr	r0, [r7, #12]
 8003ddc:	f000 fab6 	bl	800434c <I2C_RequestMemoryWrite>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d052      	beq.n	8003e8c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e081      	b.n	8003eee <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dea:	697a      	ldr	r2, [r7, #20]
 8003dec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003dee:	68f8      	ldr	r0, [r7, #12]
 8003df0:	f000 fd00 	bl	80047f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00d      	beq.n	8003e16 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dfe:	2b04      	cmp	r3, #4
 8003e00:	d107      	bne.n	8003e12 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e10:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e06b      	b.n	8003eee <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e1a:	781a      	ldrb	r2, [r3, #0]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e26:	1c5a      	adds	r2, r3, #1
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e30:	3b01      	subs	r3, #1
 8003e32:	b29a      	uxth	r2, r3
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	b29a      	uxth	r2, r3
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	695b      	ldr	r3, [r3, #20]
 8003e4c:	f003 0304 	and.w	r3, r3, #4
 8003e50:	2b04      	cmp	r3, #4
 8003e52:	d11b      	bne.n	8003e8c <HAL_I2C_Mem_Write+0x180>
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d017      	beq.n	8003e8c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e60:	781a      	ldrb	r2, [r3, #0]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e6c:	1c5a      	adds	r2, r3, #1
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e76:	3b01      	subs	r3, #1
 8003e78:	b29a      	uxth	r2, r3
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	3b01      	subs	r3, #1
 8003e86:	b29a      	uxth	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d1aa      	bne.n	8003dea <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e94:	697a      	ldr	r2, [r7, #20]
 8003e96:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e98:	68f8      	ldr	r0, [r7, #12]
 8003e9a:	f000 fcec 	bl	8004876 <I2C_WaitOnBTFFlagUntilTimeout>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d00d      	beq.n	8003ec0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ea8:	2b04      	cmp	r3, #4
 8003eaa:	d107      	bne.n	8003ebc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003eba:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e016      	b.n	8003eee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ece:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2220      	movs	r2, #32
 8003ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	e000      	b.n	8003eee <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003eec:	2302      	movs	r3, #2
  }
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3718      	adds	r7, #24
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	00100002 	.word	0x00100002
 8003efc:	ffff0000 	.word	0xffff0000

08003f00 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b08c      	sub	sp, #48	@ 0x30
 8003f04:	af02      	add	r7, sp, #8
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	4608      	mov	r0, r1
 8003f0a:	4611      	mov	r1, r2
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	4603      	mov	r3, r0
 8003f10:	817b      	strh	r3, [r7, #10]
 8003f12:	460b      	mov	r3, r1
 8003f14:	813b      	strh	r3, [r7, #8]
 8003f16:	4613      	mov	r3, r2
 8003f18:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f1a:	f7fe ff25 	bl	8002d68 <HAL_GetTick>
 8003f1e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	2b20      	cmp	r3, #32
 8003f2a:	f040 8208 	bne.w	800433e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f30:	9300      	str	r3, [sp, #0]
 8003f32:	2319      	movs	r3, #25
 8003f34:	2201      	movs	r2, #1
 8003f36:	497b      	ldr	r1, [pc, #492]	@ (8004124 <HAL_I2C_Mem_Read+0x224>)
 8003f38:	68f8      	ldr	r0, [r7, #12]
 8003f3a:	f000 fb85 	bl	8004648 <I2C_WaitOnFlagUntilTimeout>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d001      	beq.n	8003f48 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003f44:	2302      	movs	r3, #2
 8003f46:	e1fb      	b.n	8004340 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d101      	bne.n	8003f56 <HAL_I2C_Mem_Read+0x56>
 8003f52:	2302      	movs	r3, #2
 8003f54:	e1f4      	b.n	8004340 <HAL_I2C_Mem_Read+0x440>
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0301 	and.w	r3, r3, #1
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d007      	beq.n	8003f7c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f042 0201 	orr.w	r2, r2, #1
 8003f7a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f8a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2222      	movs	r2, #34	@ 0x22
 8003f90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2240      	movs	r2, #64	@ 0x40
 8003f98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003fa6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003fac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fb2:	b29a      	uxth	r2, r3
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	4a5b      	ldr	r2, [pc, #364]	@ (8004128 <HAL_I2C_Mem_Read+0x228>)
 8003fbc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003fbe:	88f8      	ldrh	r0, [r7, #6]
 8003fc0:	893a      	ldrh	r2, [r7, #8]
 8003fc2:	8979      	ldrh	r1, [r7, #10]
 8003fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc6:	9301      	str	r3, [sp, #4]
 8003fc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fca:	9300      	str	r3, [sp, #0]
 8003fcc:	4603      	mov	r3, r0
 8003fce:	68f8      	ldr	r0, [r7, #12]
 8003fd0:	f000 fa52 	bl	8004478 <I2C_RequestMemoryRead>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d001      	beq.n	8003fde <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e1b0      	b.n	8004340 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d113      	bne.n	800400e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	623b      	str	r3, [r7, #32]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	695b      	ldr	r3, [r3, #20]
 8003ff0:	623b      	str	r3, [r7, #32]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	699b      	ldr	r3, [r3, #24]
 8003ff8:	623b      	str	r3, [r7, #32]
 8003ffa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800400a:	601a      	str	r2, [r3, #0]
 800400c:	e184      	b.n	8004318 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004012:	2b01      	cmp	r3, #1
 8004014:	d11b      	bne.n	800404e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004024:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004026:	2300      	movs	r3, #0
 8004028:	61fb      	str	r3, [r7, #28]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	695b      	ldr	r3, [r3, #20]
 8004030:	61fb      	str	r3, [r7, #28]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	699b      	ldr	r3, [r3, #24]
 8004038:	61fb      	str	r3, [r7, #28]
 800403a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800404a:	601a      	str	r2, [r3, #0]
 800404c:	e164      	b.n	8004318 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004052:	2b02      	cmp	r3, #2
 8004054:	d11b      	bne.n	800408e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004064:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004074:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004076:	2300      	movs	r3, #0
 8004078:	61bb      	str	r3, [r7, #24]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	695b      	ldr	r3, [r3, #20]
 8004080:	61bb      	str	r3, [r7, #24]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	699b      	ldr	r3, [r3, #24]
 8004088:	61bb      	str	r3, [r7, #24]
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	e144      	b.n	8004318 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800408e:	2300      	movs	r3, #0
 8004090:	617b      	str	r3, [r7, #20]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	695b      	ldr	r3, [r3, #20]
 8004098:	617b      	str	r3, [r7, #20]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	699b      	ldr	r3, [r3, #24]
 80040a0:	617b      	str	r3, [r7, #20]
 80040a2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80040a4:	e138      	b.n	8004318 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040aa:	2b03      	cmp	r3, #3
 80040ac:	f200 80f1 	bhi.w	8004292 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d123      	bne.n	8004100 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040ba:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80040bc:	68f8      	ldr	r0, [r7, #12]
 80040be:	f000 fc1b 	bl	80048f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d001      	beq.n	80040cc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e139      	b.n	8004340 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	691a      	ldr	r2, [r3, #16]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d6:	b2d2      	uxtb	r2, r2
 80040d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040de:	1c5a      	adds	r2, r3, #1
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040e8:	3b01      	subs	r3, #1
 80040ea:	b29a      	uxth	r2, r3
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	3b01      	subs	r3, #1
 80040f8:	b29a      	uxth	r2, r3
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80040fe:	e10b      	b.n	8004318 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004104:	2b02      	cmp	r3, #2
 8004106:	d14e      	bne.n	80041a6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800410a:	9300      	str	r3, [sp, #0]
 800410c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800410e:	2200      	movs	r2, #0
 8004110:	4906      	ldr	r1, [pc, #24]	@ (800412c <HAL_I2C_Mem_Read+0x22c>)
 8004112:	68f8      	ldr	r0, [r7, #12]
 8004114:	f000 fa98 	bl	8004648 <I2C_WaitOnFlagUntilTimeout>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d008      	beq.n	8004130 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e10e      	b.n	8004340 <HAL_I2C_Mem_Read+0x440>
 8004122:	bf00      	nop
 8004124:	00100002 	.word	0x00100002
 8004128:	ffff0000 	.word	0xffff0000
 800412c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800413e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	691a      	ldr	r2, [r3, #16]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800414a:	b2d2      	uxtb	r2, r2
 800414c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004152:	1c5a      	adds	r2, r3, #1
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800415c:	3b01      	subs	r3, #1
 800415e:	b29a      	uxth	r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004168:	b29b      	uxth	r3, r3
 800416a:	3b01      	subs	r3, #1
 800416c:	b29a      	uxth	r2, r3
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	691a      	ldr	r2, [r3, #16]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800417c:	b2d2      	uxtb	r2, r2
 800417e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004184:	1c5a      	adds	r2, r3, #1
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800418e:	3b01      	subs	r3, #1
 8004190:	b29a      	uxth	r2, r3
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800419a:	b29b      	uxth	r3, r3
 800419c:	3b01      	subs	r3, #1
 800419e:	b29a      	uxth	r2, r3
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80041a4:	e0b8      	b.n	8004318 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041a8:	9300      	str	r3, [sp, #0]
 80041aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041ac:	2200      	movs	r2, #0
 80041ae:	4966      	ldr	r1, [pc, #408]	@ (8004348 <HAL_I2C_Mem_Read+0x448>)
 80041b0:	68f8      	ldr	r0, [r7, #12]
 80041b2:	f000 fa49 	bl	8004648 <I2C_WaitOnFlagUntilTimeout>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d001      	beq.n	80041c0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e0bf      	b.n	8004340 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	691a      	ldr	r2, [r3, #16]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041da:	b2d2      	uxtb	r2, r2
 80041dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041e2:	1c5a      	adds	r2, r3, #1
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041ec:	3b01      	subs	r3, #1
 80041ee:	b29a      	uxth	r2, r3
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	3b01      	subs	r3, #1
 80041fc:	b29a      	uxth	r2, r3
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004204:	9300      	str	r3, [sp, #0]
 8004206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004208:	2200      	movs	r2, #0
 800420a:	494f      	ldr	r1, [pc, #316]	@ (8004348 <HAL_I2C_Mem_Read+0x448>)
 800420c:	68f8      	ldr	r0, [r7, #12]
 800420e:	f000 fa1b 	bl	8004648 <I2C_WaitOnFlagUntilTimeout>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d001      	beq.n	800421c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e091      	b.n	8004340 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800422a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	691a      	ldr	r2, [r3, #16]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004236:	b2d2      	uxtb	r2, r2
 8004238:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800423e:	1c5a      	adds	r2, r3, #1
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004248:	3b01      	subs	r3, #1
 800424a:	b29a      	uxth	r2, r3
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004254:	b29b      	uxth	r3, r3
 8004256:	3b01      	subs	r3, #1
 8004258:	b29a      	uxth	r2, r3
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	691a      	ldr	r2, [r3, #16]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004268:	b2d2      	uxtb	r2, r2
 800426a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004270:	1c5a      	adds	r2, r3, #1
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800427a:	3b01      	subs	r3, #1
 800427c:	b29a      	uxth	r2, r3
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004286:	b29b      	uxth	r3, r3
 8004288:	3b01      	subs	r3, #1
 800428a:	b29a      	uxth	r2, r3
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004290:	e042      	b.n	8004318 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004292:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004294:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004296:	68f8      	ldr	r0, [r7, #12]
 8004298:	f000 fb2e 	bl	80048f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d001      	beq.n	80042a6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e04c      	b.n	8004340 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	691a      	ldr	r2, [r3, #16]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b0:	b2d2      	uxtb	r2, r2
 80042b2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b8:	1c5a      	adds	r2, r3, #1
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042c2:	3b01      	subs	r3, #1
 80042c4:	b29a      	uxth	r2, r3
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	3b01      	subs	r3, #1
 80042d2:	b29a      	uxth	r2, r3
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	695b      	ldr	r3, [r3, #20]
 80042de:	f003 0304 	and.w	r3, r3, #4
 80042e2:	2b04      	cmp	r3, #4
 80042e4:	d118      	bne.n	8004318 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	691a      	ldr	r2, [r3, #16]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f0:	b2d2      	uxtb	r2, r2
 80042f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f8:	1c5a      	adds	r2, r3, #1
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004302:	3b01      	subs	r3, #1
 8004304:	b29a      	uxth	r2, r3
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800430e:	b29b      	uxth	r3, r3
 8004310:	3b01      	subs	r3, #1
 8004312:	b29a      	uxth	r2, r3
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800431c:	2b00      	cmp	r3, #0
 800431e:	f47f aec2 	bne.w	80040a6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2220      	movs	r2, #32
 8004326:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2200      	movs	r2, #0
 800432e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800433a:	2300      	movs	r3, #0
 800433c:	e000      	b.n	8004340 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800433e:	2302      	movs	r3, #2
  }
}
 8004340:	4618      	mov	r0, r3
 8004342:	3728      	adds	r7, #40	@ 0x28
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}
 8004348:	00010004 	.word	0x00010004

0800434c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b088      	sub	sp, #32
 8004350:	af02      	add	r7, sp, #8
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	4608      	mov	r0, r1
 8004356:	4611      	mov	r1, r2
 8004358:	461a      	mov	r2, r3
 800435a:	4603      	mov	r3, r0
 800435c:	817b      	strh	r3, [r7, #10]
 800435e:	460b      	mov	r3, r1
 8004360:	813b      	strh	r3, [r7, #8]
 8004362:	4613      	mov	r3, r2
 8004364:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004374:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004378:	9300      	str	r3, [sp, #0]
 800437a:	6a3b      	ldr	r3, [r7, #32]
 800437c:	2200      	movs	r2, #0
 800437e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004382:	68f8      	ldr	r0, [r7, #12]
 8004384:	f000 f960 	bl	8004648 <I2C_WaitOnFlagUntilTimeout>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d00d      	beq.n	80043aa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004398:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800439c:	d103      	bne.n	80043a6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80043a4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e05f      	b.n	800446a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80043aa:	897b      	ldrh	r3, [r7, #10]
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	461a      	mov	r2, r3
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80043b8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043bc:	6a3a      	ldr	r2, [r7, #32]
 80043be:	492d      	ldr	r1, [pc, #180]	@ (8004474 <I2C_RequestMemoryWrite+0x128>)
 80043c0:	68f8      	ldr	r0, [r7, #12]
 80043c2:	f000 f998 	bl	80046f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d001      	beq.n	80043d0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e04c      	b.n	800446a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043d0:	2300      	movs	r3, #0
 80043d2:	617b      	str	r3, [r7, #20]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	695b      	ldr	r3, [r3, #20]
 80043da:	617b      	str	r3, [r7, #20]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	699b      	ldr	r3, [r3, #24]
 80043e2:	617b      	str	r3, [r7, #20]
 80043e4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043e8:	6a39      	ldr	r1, [r7, #32]
 80043ea:	68f8      	ldr	r0, [r7, #12]
 80043ec:	f000 fa02 	bl	80047f4 <I2C_WaitOnTXEFlagUntilTimeout>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d00d      	beq.n	8004412 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043fa:	2b04      	cmp	r3, #4
 80043fc:	d107      	bne.n	800440e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800440c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e02b      	b.n	800446a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004412:	88fb      	ldrh	r3, [r7, #6]
 8004414:	2b01      	cmp	r3, #1
 8004416:	d105      	bne.n	8004424 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004418:	893b      	ldrh	r3, [r7, #8]
 800441a:	b2da      	uxtb	r2, r3
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	611a      	str	r2, [r3, #16]
 8004422:	e021      	b.n	8004468 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004424:	893b      	ldrh	r3, [r7, #8]
 8004426:	0a1b      	lsrs	r3, r3, #8
 8004428:	b29b      	uxth	r3, r3
 800442a:	b2da      	uxtb	r2, r3
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004432:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004434:	6a39      	ldr	r1, [r7, #32]
 8004436:	68f8      	ldr	r0, [r7, #12]
 8004438:	f000 f9dc 	bl	80047f4 <I2C_WaitOnTXEFlagUntilTimeout>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00d      	beq.n	800445e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004446:	2b04      	cmp	r3, #4
 8004448:	d107      	bne.n	800445a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004458:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e005      	b.n	800446a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800445e:	893b      	ldrh	r3, [r7, #8]
 8004460:	b2da      	uxtb	r2, r3
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	3718      	adds	r7, #24
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	00010002 	.word	0x00010002

08004478 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b088      	sub	sp, #32
 800447c:	af02      	add	r7, sp, #8
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	4608      	mov	r0, r1
 8004482:	4611      	mov	r1, r2
 8004484:	461a      	mov	r2, r3
 8004486:	4603      	mov	r3, r0
 8004488:	817b      	strh	r3, [r7, #10]
 800448a:	460b      	mov	r3, r1
 800448c:	813b      	strh	r3, [r7, #8]
 800448e:	4613      	mov	r3, r2
 8004490:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80044a0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80044b0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044b4:	9300      	str	r3, [sp, #0]
 80044b6:	6a3b      	ldr	r3, [r7, #32]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80044be:	68f8      	ldr	r0, [r7, #12]
 80044c0:	f000 f8c2 	bl	8004648 <I2C_WaitOnFlagUntilTimeout>
 80044c4:	4603      	mov	r3, r0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00d      	beq.n	80044e6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044d8:	d103      	bne.n	80044e2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80044e0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e0aa      	b.n	800463c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80044e6:	897b      	ldrh	r3, [r7, #10]
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	461a      	mov	r2, r3
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80044f4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f8:	6a3a      	ldr	r2, [r7, #32]
 80044fa:	4952      	ldr	r1, [pc, #328]	@ (8004644 <I2C_RequestMemoryRead+0x1cc>)
 80044fc:	68f8      	ldr	r0, [r7, #12]
 80044fe:	f000 f8fa 	bl	80046f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004502:	4603      	mov	r3, r0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d001      	beq.n	800450c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	e097      	b.n	800463c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800450c:	2300      	movs	r3, #0
 800450e:	617b      	str	r3, [r7, #20]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	695b      	ldr	r3, [r3, #20]
 8004516:	617b      	str	r3, [r7, #20]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	699b      	ldr	r3, [r3, #24]
 800451e:	617b      	str	r3, [r7, #20]
 8004520:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004522:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004524:	6a39      	ldr	r1, [r7, #32]
 8004526:	68f8      	ldr	r0, [r7, #12]
 8004528:	f000 f964 	bl	80047f4 <I2C_WaitOnTXEFlagUntilTimeout>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d00d      	beq.n	800454e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004536:	2b04      	cmp	r3, #4
 8004538:	d107      	bne.n	800454a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004548:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e076      	b.n	800463c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800454e:	88fb      	ldrh	r3, [r7, #6]
 8004550:	2b01      	cmp	r3, #1
 8004552:	d105      	bne.n	8004560 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004554:	893b      	ldrh	r3, [r7, #8]
 8004556:	b2da      	uxtb	r2, r3
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	611a      	str	r2, [r3, #16]
 800455e:	e021      	b.n	80045a4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004560:	893b      	ldrh	r3, [r7, #8]
 8004562:	0a1b      	lsrs	r3, r3, #8
 8004564:	b29b      	uxth	r3, r3
 8004566:	b2da      	uxtb	r2, r3
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800456e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004570:	6a39      	ldr	r1, [r7, #32]
 8004572:	68f8      	ldr	r0, [r7, #12]
 8004574:	f000 f93e 	bl	80047f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00d      	beq.n	800459a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004582:	2b04      	cmp	r3, #4
 8004584:	d107      	bne.n	8004596 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004594:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e050      	b.n	800463c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800459a:	893b      	ldrh	r3, [r7, #8]
 800459c:	b2da      	uxtb	r2, r3
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045a6:	6a39      	ldr	r1, [r7, #32]
 80045a8:	68f8      	ldr	r0, [r7, #12]
 80045aa:	f000 f923 	bl	80047f4 <I2C_WaitOnTXEFlagUntilTimeout>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d00d      	beq.n	80045d0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045b8:	2b04      	cmp	r3, #4
 80045ba:	d107      	bne.n	80045cc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045ca:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e035      	b.n	800463c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80045de:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e2:	9300      	str	r3, [sp, #0]
 80045e4:	6a3b      	ldr	r3, [r7, #32]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80045ec:	68f8      	ldr	r0, [r7, #12]
 80045ee:	f000 f82b 	bl	8004648 <I2C_WaitOnFlagUntilTimeout>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d00d      	beq.n	8004614 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004602:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004606:	d103      	bne.n	8004610 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800460e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	e013      	b.n	800463c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004614:	897b      	ldrh	r3, [r7, #10]
 8004616:	b2db      	uxtb	r3, r3
 8004618:	f043 0301 	orr.w	r3, r3, #1
 800461c:	b2da      	uxtb	r2, r3
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004626:	6a3a      	ldr	r2, [r7, #32]
 8004628:	4906      	ldr	r1, [pc, #24]	@ (8004644 <I2C_RequestMemoryRead+0x1cc>)
 800462a:	68f8      	ldr	r0, [r7, #12]
 800462c:	f000 f863 	bl	80046f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d001      	beq.n	800463a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e000      	b.n	800463c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800463a:	2300      	movs	r3, #0
}
 800463c:	4618      	mov	r0, r3
 800463e:	3718      	adds	r7, #24
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}
 8004644:	00010002 	.word	0x00010002

08004648 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	603b      	str	r3, [r7, #0]
 8004654:	4613      	mov	r3, r2
 8004656:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004658:	e025      	b.n	80046a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004660:	d021      	beq.n	80046a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004662:	f7fe fb81 	bl	8002d68 <HAL_GetTick>
 8004666:	4602      	mov	r2, r0
 8004668:	69bb      	ldr	r3, [r7, #24]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	683a      	ldr	r2, [r7, #0]
 800466e:	429a      	cmp	r2, r3
 8004670:	d302      	bcc.n	8004678 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d116      	bne.n	80046a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2200      	movs	r2, #0
 800467c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2220      	movs	r2, #32
 8004682:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2200      	movs	r2, #0
 800468a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004692:	f043 0220 	orr.w	r2, r3, #32
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2200      	movs	r2, #0
 800469e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e023      	b.n	80046ee <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	0c1b      	lsrs	r3, r3, #16
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d10d      	bne.n	80046cc <I2C_WaitOnFlagUntilTimeout+0x84>
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	695b      	ldr	r3, [r3, #20]
 80046b6:	43da      	mvns	r2, r3
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	4013      	ands	r3, r2
 80046bc:	b29b      	uxth	r3, r3
 80046be:	2b00      	cmp	r3, #0
 80046c0:	bf0c      	ite	eq
 80046c2:	2301      	moveq	r3, #1
 80046c4:	2300      	movne	r3, #0
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	461a      	mov	r2, r3
 80046ca:	e00c      	b.n	80046e6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	699b      	ldr	r3, [r3, #24]
 80046d2:	43da      	mvns	r2, r3
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	4013      	ands	r3, r2
 80046d8:	b29b      	uxth	r3, r3
 80046da:	2b00      	cmp	r3, #0
 80046dc:	bf0c      	ite	eq
 80046de:	2301      	moveq	r3, #1
 80046e0:	2300      	movne	r3, #0
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	461a      	mov	r2, r3
 80046e6:	79fb      	ldrb	r3, [r7, #7]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d0b6      	beq.n	800465a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3710      	adds	r7, #16
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}

080046f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80046f6:	b580      	push	{r7, lr}
 80046f8:	b084      	sub	sp, #16
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	60f8      	str	r0, [r7, #12]
 80046fe:	60b9      	str	r1, [r7, #8]
 8004700:	607a      	str	r2, [r7, #4]
 8004702:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004704:	e051      	b.n	80047aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	695b      	ldr	r3, [r3, #20]
 800470c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004710:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004714:	d123      	bne.n	800475e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004724:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800472e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2200      	movs	r2, #0
 8004734:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2220      	movs	r2, #32
 800473a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2200      	movs	r2, #0
 8004742:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800474a:	f043 0204 	orr.w	r2, r3, #4
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2200      	movs	r2, #0
 8004756:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e046      	b.n	80047ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004764:	d021      	beq.n	80047aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004766:	f7fe faff 	bl	8002d68 <HAL_GetTick>
 800476a:	4602      	mov	r2, r0
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	429a      	cmp	r2, r3
 8004774:	d302      	bcc.n	800477c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d116      	bne.n	80047aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2200      	movs	r2, #0
 8004780:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2220      	movs	r2, #32
 8004786:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004796:	f043 0220 	orr.w	r2, r3, #32
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e020      	b.n	80047ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	0c1b      	lsrs	r3, r3, #16
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d10c      	bne.n	80047ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	695b      	ldr	r3, [r3, #20]
 80047ba:	43da      	mvns	r2, r3
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	4013      	ands	r3, r2
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	bf14      	ite	ne
 80047c6:	2301      	movne	r3, #1
 80047c8:	2300      	moveq	r3, #0
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	e00b      	b.n	80047e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	699b      	ldr	r3, [r3, #24]
 80047d4:	43da      	mvns	r2, r3
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	4013      	ands	r3, r2
 80047da:	b29b      	uxth	r3, r3
 80047dc:	2b00      	cmp	r3, #0
 80047de:	bf14      	ite	ne
 80047e0:	2301      	movne	r3, #1
 80047e2:	2300      	moveq	r3, #0
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d18d      	bne.n	8004706 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80047ea:	2300      	movs	r3, #0
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3710      	adds	r7, #16
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}

080047f4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	60b9      	str	r1, [r7, #8]
 80047fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004800:	e02d      	b.n	800485e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004802:	68f8      	ldr	r0, [r7, #12]
 8004804:	f000 f8ce 	bl	80049a4 <I2C_IsAcknowledgeFailed>
 8004808:	4603      	mov	r3, r0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d001      	beq.n	8004812 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e02d      	b.n	800486e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004818:	d021      	beq.n	800485e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800481a:	f7fe faa5 	bl	8002d68 <HAL_GetTick>
 800481e:	4602      	mov	r2, r0
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	68ba      	ldr	r2, [r7, #8]
 8004826:	429a      	cmp	r2, r3
 8004828:	d302      	bcc.n	8004830 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d116      	bne.n	800485e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2200      	movs	r2, #0
 8004834:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2220      	movs	r2, #32
 800483a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2200      	movs	r2, #0
 8004842:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800484a:	f043 0220 	orr.w	r2, r3, #32
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2200      	movs	r2, #0
 8004856:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e007      	b.n	800486e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	695b      	ldr	r3, [r3, #20]
 8004864:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004868:	2b80      	cmp	r3, #128	@ 0x80
 800486a:	d1ca      	bne.n	8004802 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3710      	adds	r7, #16
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}

08004876 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004876:	b580      	push	{r7, lr}
 8004878:	b084      	sub	sp, #16
 800487a:	af00      	add	r7, sp, #0
 800487c:	60f8      	str	r0, [r7, #12]
 800487e:	60b9      	str	r1, [r7, #8]
 8004880:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004882:	e02d      	b.n	80048e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004884:	68f8      	ldr	r0, [r7, #12]
 8004886:	f000 f88d 	bl	80049a4 <I2C_IsAcknowledgeFailed>
 800488a:	4603      	mov	r3, r0
 800488c:	2b00      	cmp	r3, #0
 800488e:	d001      	beq.n	8004894 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e02d      	b.n	80048f0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800489a:	d021      	beq.n	80048e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800489c:	f7fe fa64 	bl	8002d68 <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	68ba      	ldr	r2, [r7, #8]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d302      	bcc.n	80048b2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d116      	bne.n	80048e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2200      	movs	r2, #0
 80048b6:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2220      	movs	r2, #32
 80048bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048cc:	f043 0220 	orr.w	r2, r3, #32
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e007      	b.n	80048f0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	695b      	ldr	r3, [r3, #20]
 80048e6:	f003 0304 	and.w	r3, r3, #4
 80048ea:	2b04      	cmp	r3, #4
 80048ec:	d1ca      	bne.n	8004884 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80048ee:	2300      	movs	r3, #0
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3710      	adds	r7, #16
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	60b9      	str	r1, [r7, #8]
 8004902:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004904:	e042      	b.n	800498c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	695b      	ldr	r3, [r3, #20]
 800490c:	f003 0310 	and.w	r3, r3, #16
 8004910:	2b10      	cmp	r3, #16
 8004912:	d119      	bne.n	8004948 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f06f 0210 	mvn.w	r2, #16
 800491c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2200      	movs	r2, #0
 8004922:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2220      	movs	r2, #32
 8004928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2200      	movs	r2, #0
 8004930:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2200      	movs	r2, #0
 8004940:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e029      	b.n	800499c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004948:	f7fe fa0e 	bl	8002d68 <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	68ba      	ldr	r2, [r7, #8]
 8004954:	429a      	cmp	r2, r3
 8004956:	d302      	bcc.n	800495e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d116      	bne.n	800498c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2200      	movs	r2, #0
 8004962:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2220      	movs	r2, #32
 8004968:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2200      	movs	r2, #0
 8004970:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004978:	f043 0220 	orr.w	r2, r3, #32
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2200      	movs	r2, #0
 8004984:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e007      	b.n	800499c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	695b      	ldr	r3, [r3, #20]
 8004992:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004996:	2b40      	cmp	r3, #64	@ 0x40
 8004998:	d1b5      	bne.n	8004906 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800499a:	2300      	movs	r3, #0
}
 800499c:	4618      	mov	r0, r3
 800499e:	3710      	adds	r7, #16
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	695b      	ldr	r3, [r3, #20]
 80049b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049ba:	d11b      	bne.n	80049f4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80049c4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2220      	movs	r2, #32
 80049d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049e0:	f043 0204 	orr.w	r2, r3, #4
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e000      	b.n	80049f6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80049f4:	2300      	movs	r3, #0
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	370c      	adds	r7, #12
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr
	...

08004a04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b086      	sub	sp, #24
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d101      	bne.n	8004a16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e267      	b.n	8004ee6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 0301 	and.w	r3, r3, #1
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d075      	beq.n	8004b0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a22:	4b88      	ldr	r3, [pc, #544]	@ (8004c44 <HAL_RCC_OscConfig+0x240>)
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	f003 030c 	and.w	r3, r3, #12
 8004a2a:	2b04      	cmp	r3, #4
 8004a2c:	d00c      	beq.n	8004a48 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a2e:	4b85      	ldr	r3, [pc, #532]	@ (8004c44 <HAL_RCC_OscConfig+0x240>)
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a36:	2b08      	cmp	r3, #8
 8004a38:	d112      	bne.n	8004a60 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a3a:	4b82      	ldr	r3, [pc, #520]	@ (8004c44 <HAL_RCC_OscConfig+0x240>)
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a42:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a46:	d10b      	bne.n	8004a60 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a48:	4b7e      	ldr	r3, [pc, #504]	@ (8004c44 <HAL_RCC_OscConfig+0x240>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d05b      	beq.n	8004b0c <HAL_RCC_OscConfig+0x108>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d157      	bne.n	8004b0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e242      	b.n	8004ee6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a68:	d106      	bne.n	8004a78 <HAL_RCC_OscConfig+0x74>
 8004a6a:	4b76      	ldr	r3, [pc, #472]	@ (8004c44 <HAL_RCC_OscConfig+0x240>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a75      	ldr	r2, [pc, #468]	@ (8004c44 <HAL_RCC_OscConfig+0x240>)
 8004a70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a74:	6013      	str	r3, [r2, #0]
 8004a76:	e01d      	b.n	8004ab4 <HAL_RCC_OscConfig+0xb0>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a80:	d10c      	bne.n	8004a9c <HAL_RCC_OscConfig+0x98>
 8004a82:	4b70      	ldr	r3, [pc, #448]	@ (8004c44 <HAL_RCC_OscConfig+0x240>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a6f      	ldr	r2, [pc, #444]	@ (8004c44 <HAL_RCC_OscConfig+0x240>)
 8004a88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a8c:	6013      	str	r3, [r2, #0]
 8004a8e:	4b6d      	ldr	r3, [pc, #436]	@ (8004c44 <HAL_RCC_OscConfig+0x240>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a6c      	ldr	r2, [pc, #432]	@ (8004c44 <HAL_RCC_OscConfig+0x240>)
 8004a94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a98:	6013      	str	r3, [r2, #0]
 8004a9a:	e00b      	b.n	8004ab4 <HAL_RCC_OscConfig+0xb0>
 8004a9c:	4b69      	ldr	r3, [pc, #420]	@ (8004c44 <HAL_RCC_OscConfig+0x240>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a68      	ldr	r2, [pc, #416]	@ (8004c44 <HAL_RCC_OscConfig+0x240>)
 8004aa2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004aa6:	6013      	str	r3, [r2, #0]
 8004aa8:	4b66      	ldr	r3, [pc, #408]	@ (8004c44 <HAL_RCC_OscConfig+0x240>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a65      	ldr	r2, [pc, #404]	@ (8004c44 <HAL_RCC_OscConfig+0x240>)
 8004aae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ab2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d013      	beq.n	8004ae4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004abc:	f7fe f954 	bl	8002d68 <HAL_GetTick>
 8004ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ac2:	e008      	b.n	8004ad6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ac4:	f7fe f950 	bl	8002d68 <HAL_GetTick>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	2b64      	cmp	r3, #100	@ 0x64
 8004ad0:	d901      	bls.n	8004ad6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e207      	b.n	8004ee6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ad6:	4b5b      	ldr	r3, [pc, #364]	@ (8004c44 <HAL_RCC_OscConfig+0x240>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d0f0      	beq.n	8004ac4 <HAL_RCC_OscConfig+0xc0>
 8004ae2:	e014      	b.n	8004b0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ae4:	f7fe f940 	bl	8002d68 <HAL_GetTick>
 8004ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004aea:	e008      	b.n	8004afe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004aec:	f7fe f93c 	bl	8002d68 <HAL_GetTick>
 8004af0:	4602      	mov	r2, r0
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	2b64      	cmp	r3, #100	@ 0x64
 8004af8:	d901      	bls.n	8004afe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e1f3      	b.n	8004ee6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004afe:	4b51      	ldr	r3, [pc, #324]	@ (8004c44 <HAL_RCC_OscConfig+0x240>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1f0      	bne.n	8004aec <HAL_RCC_OscConfig+0xe8>
 8004b0a:	e000      	b.n	8004b0e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0302 	and.w	r3, r3, #2
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d063      	beq.n	8004be2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b1a:	4b4a      	ldr	r3, [pc, #296]	@ (8004c44 <HAL_RCC_OscConfig+0x240>)
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	f003 030c 	and.w	r3, r3, #12
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d00b      	beq.n	8004b3e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b26:	4b47      	ldr	r3, [pc, #284]	@ (8004c44 <HAL_RCC_OscConfig+0x240>)
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b2e:	2b08      	cmp	r3, #8
 8004b30:	d11c      	bne.n	8004b6c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b32:	4b44      	ldr	r3, [pc, #272]	@ (8004c44 <HAL_RCC_OscConfig+0x240>)
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d116      	bne.n	8004b6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b3e:	4b41      	ldr	r3, [pc, #260]	@ (8004c44 <HAL_RCC_OscConfig+0x240>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 0302 	and.w	r3, r3, #2
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d005      	beq.n	8004b56 <HAL_RCC_OscConfig+0x152>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d001      	beq.n	8004b56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e1c7      	b.n	8004ee6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b56:	4b3b      	ldr	r3, [pc, #236]	@ (8004c44 <HAL_RCC_OscConfig+0x240>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	691b      	ldr	r3, [r3, #16]
 8004b62:	00db      	lsls	r3, r3, #3
 8004b64:	4937      	ldr	r1, [pc, #220]	@ (8004c44 <HAL_RCC_OscConfig+0x240>)
 8004b66:	4313      	orrs	r3, r2
 8004b68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b6a:	e03a      	b.n	8004be2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d020      	beq.n	8004bb6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b74:	4b34      	ldr	r3, [pc, #208]	@ (8004c48 <HAL_RCC_OscConfig+0x244>)
 8004b76:	2201      	movs	r2, #1
 8004b78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b7a:	f7fe f8f5 	bl	8002d68 <HAL_GetTick>
 8004b7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b80:	e008      	b.n	8004b94 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b82:	f7fe f8f1 	bl	8002d68 <HAL_GetTick>
 8004b86:	4602      	mov	r2, r0
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	1ad3      	subs	r3, r2, r3
 8004b8c:	2b02      	cmp	r3, #2
 8004b8e:	d901      	bls.n	8004b94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004b90:	2303      	movs	r3, #3
 8004b92:	e1a8      	b.n	8004ee6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b94:	4b2b      	ldr	r3, [pc, #172]	@ (8004c44 <HAL_RCC_OscConfig+0x240>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 0302 	and.w	r3, r3, #2
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d0f0      	beq.n	8004b82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ba0:	4b28      	ldr	r3, [pc, #160]	@ (8004c44 <HAL_RCC_OscConfig+0x240>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	691b      	ldr	r3, [r3, #16]
 8004bac:	00db      	lsls	r3, r3, #3
 8004bae:	4925      	ldr	r1, [pc, #148]	@ (8004c44 <HAL_RCC_OscConfig+0x240>)
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	600b      	str	r3, [r1, #0]
 8004bb4:	e015      	b.n	8004be2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bb6:	4b24      	ldr	r3, [pc, #144]	@ (8004c48 <HAL_RCC_OscConfig+0x244>)
 8004bb8:	2200      	movs	r2, #0
 8004bba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bbc:	f7fe f8d4 	bl	8002d68 <HAL_GetTick>
 8004bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bc2:	e008      	b.n	8004bd6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bc4:	f7fe f8d0 	bl	8002d68 <HAL_GetTick>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	2b02      	cmp	r3, #2
 8004bd0:	d901      	bls.n	8004bd6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	e187      	b.n	8004ee6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bd6:	4b1b      	ldr	r3, [pc, #108]	@ (8004c44 <HAL_RCC_OscConfig+0x240>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0302 	and.w	r3, r3, #2
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d1f0      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 0308 	and.w	r3, r3, #8
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d036      	beq.n	8004c5c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	695b      	ldr	r3, [r3, #20]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d016      	beq.n	8004c24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bf6:	4b15      	ldr	r3, [pc, #84]	@ (8004c4c <HAL_RCC_OscConfig+0x248>)
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bfc:	f7fe f8b4 	bl	8002d68 <HAL_GetTick>
 8004c00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c02:	e008      	b.n	8004c16 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c04:	f7fe f8b0 	bl	8002d68 <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	2b02      	cmp	r3, #2
 8004c10:	d901      	bls.n	8004c16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e167      	b.n	8004ee6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c16:	4b0b      	ldr	r3, [pc, #44]	@ (8004c44 <HAL_RCC_OscConfig+0x240>)
 8004c18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c1a:	f003 0302 	and.w	r3, r3, #2
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d0f0      	beq.n	8004c04 <HAL_RCC_OscConfig+0x200>
 8004c22:	e01b      	b.n	8004c5c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c24:	4b09      	ldr	r3, [pc, #36]	@ (8004c4c <HAL_RCC_OscConfig+0x248>)
 8004c26:	2200      	movs	r2, #0
 8004c28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c2a:	f7fe f89d 	bl	8002d68 <HAL_GetTick>
 8004c2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c30:	e00e      	b.n	8004c50 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c32:	f7fe f899 	bl	8002d68 <HAL_GetTick>
 8004c36:	4602      	mov	r2, r0
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d907      	bls.n	8004c50 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004c40:	2303      	movs	r3, #3
 8004c42:	e150      	b.n	8004ee6 <HAL_RCC_OscConfig+0x4e2>
 8004c44:	40023800 	.word	0x40023800
 8004c48:	42470000 	.word	0x42470000
 8004c4c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c50:	4b88      	ldr	r3, [pc, #544]	@ (8004e74 <HAL_RCC_OscConfig+0x470>)
 8004c52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c54:	f003 0302 	and.w	r3, r3, #2
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d1ea      	bne.n	8004c32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0304 	and.w	r3, r3, #4
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	f000 8097 	beq.w	8004d98 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c6e:	4b81      	ldr	r3, [pc, #516]	@ (8004e74 <HAL_RCC_OscConfig+0x470>)
 8004c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d10f      	bne.n	8004c9a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	60bb      	str	r3, [r7, #8]
 8004c7e:	4b7d      	ldr	r3, [pc, #500]	@ (8004e74 <HAL_RCC_OscConfig+0x470>)
 8004c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c82:	4a7c      	ldr	r2, [pc, #496]	@ (8004e74 <HAL_RCC_OscConfig+0x470>)
 8004c84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c88:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c8a:	4b7a      	ldr	r3, [pc, #488]	@ (8004e74 <HAL_RCC_OscConfig+0x470>)
 8004c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c92:	60bb      	str	r3, [r7, #8]
 8004c94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c96:	2301      	movs	r3, #1
 8004c98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c9a:	4b77      	ldr	r3, [pc, #476]	@ (8004e78 <HAL_RCC_OscConfig+0x474>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d118      	bne.n	8004cd8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ca6:	4b74      	ldr	r3, [pc, #464]	@ (8004e78 <HAL_RCC_OscConfig+0x474>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a73      	ldr	r2, [pc, #460]	@ (8004e78 <HAL_RCC_OscConfig+0x474>)
 8004cac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cb2:	f7fe f859 	bl	8002d68 <HAL_GetTick>
 8004cb6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cb8:	e008      	b.n	8004ccc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cba:	f7fe f855 	bl	8002d68 <HAL_GetTick>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	1ad3      	subs	r3, r2, r3
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d901      	bls.n	8004ccc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004cc8:	2303      	movs	r3, #3
 8004cca:	e10c      	b.n	8004ee6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ccc:	4b6a      	ldr	r3, [pc, #424]	@ (8004e78 <HAL_RCC_OscConfig+0x474>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d0f0      	beq.n	8004cba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d106      	bne.n	8004cee <HAL_RCC_OscConfig+0x2ea>
 8004ce0:	4b64      	ldr	r3, [pc, #400]	@ (8004e74 <HAL_RCC_OscConfig+0x470>)
 8004ce2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ce4:	4a63      	ldr	r2, [pc, #396]	@ (8004e74 <HAL_RCC_OscConfig+0x470>)
 8004ce6:	f043 0301 	orr.w	r3, r3, #1
 8004cea:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cec:	e01c      	b.n	8004d28 <HAL_RCC_OscConfig+0x324>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	2b05      	cmp	r3, #5
 8004cf4:	d10c      	bne.n	8004d10 <HAL_RCC_OscConfig+0x30c>
 8004cf6:	4b5f      	ldr	r3, [pc, #380]	@ (8004e74 <HAL_RCC_OscConfig+0x470>)
 8004cf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cfa:	4a5e      	ldr	r2, [pc, #376]	@ (8004e74 <HAL_RCC_OscConfig+0x470>)
 8004cfc:	f043 0304 	orr.w	r3, r3, #4
 8004d00:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d02:	4b5c      	ldr	r3, [pc, #368]	@ (8004e74 <HAL_RCC_OscConfig+0x470>)
 8004d04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d06:	4a5b      	ldr	r2, [pc, #364]	@ (8004e74 <HAL_RCC_OscConfig+0x470>)
 8004d08:	f043 0301 	orr.w	r3, r3, #1
 8004d0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d0e:	e00b      	b.n	8004d28 <HAL_RCC_OscConfig+0x324>
 8004d10:	4b58      	ldr	r3, [pc, #352]	@ (8004e74 <HAL_RCC_OscConfig+0x470>)
 8004d12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d14:	4a57      	ldr	r2, [pc, #348]	@ (8004e74 <HAL_RCC_OscConfig+0x470>)
 8004d16:	f023 0301 	bic.w	r3, r3, #1
 8004d1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d1c:	4b55      	ldr	r3, [pc, #340]	@ (8004e74 <HAL_RCC_OscConfig+0x470>)
 8004d1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d20:	4a54      	ldr	r2, [pc, #336]	@ (8004e74 <HAL_RCC_OscConfig+0x470>)
 8004d22:	f023 0304 	bic.w	r3, r3, #4
 8004d26:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d015      	beq.n	8004d5c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d30:	f7fe f81a 	bl	8002d68 <HAL_GetTick>
 8004d34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d36:	e00a      	b.n	8004d4e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d38:	f7fe f816 	bl	8002d68 <HAL_GetTick>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d901      	bls.n	8004d4e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	e0cb      	b.n	8004ee6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d4e:	4b49      	ldr	r3, [pc, #292]	@ (8004e74 <HAL_RCC_OscConfig+0x470>)
 8004d50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d52:	f003 0302 	and.w	r3, r3, #2
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d0ee      	beq.n	8004d38 <HAL_RCC_OscConfig+0x334>
 8004d5a:	e014      	b.n	8004d86 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d5c:	f7fe f804 	bl	8002d68 <HAL_GetTick>
 8004d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d62:	e00a      	b.n	8004d7a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d64:	f7fe f800 	bl	8002d68 <HAL_GetTick>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d901      	bls.n	8004d7a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	e0b5      	b.n	8004ee6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d7a:	4b3e      	ldr	r3, [pc, #248]	@ (8004e74 <HAL_RCC_OscConfig+0x470>)
 8004d7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d7e:	f003 0302 	and.w	r3, r3, #2
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d1ee      	bne.n	8004d64 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d86:	7dfb      	ldrb	r3, [r7, #23]
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d105      	bne.n	8004d98 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d8c:	4b39      	ldr	r3, [pc, #228]	@ (8004e74 <HAL_RCC_OscConfig+0x470>)
 8004d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d90:	4a38      	ldr	r2, [pc, #224]	@ (8004e74 <HAL_RCC_OscConfig+0x470>)
 8004d92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d96:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	699b      	ldr	r3, [r3, #24]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	f000 80a1 	beq.w	8004ee4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004da2:	4b34      	ldr	r3, [pc, #208]	@ (8004e74 <HAL_RCC_OscConfig+0x470>)
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	f003 030c 	and.w	r3, r3, #12
 8004daa:	2b08      	cmp	r3, #8
 8004dac:	d05c      	beq.n	8004e68 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	699b      	ldr	r3, [r3, #24]
 8004db2:	2b02      	cmp	r3, #2
 8004db4:	d141      	bne.n	8004e3a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004db6:	4b31      	ldr	r3, [pc, #196]	@ (8004e7c <HAL_RCC_OscConfig+0x478>)
 8004db8:	2200      	movs	r2, #0
 8004dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dbc:	f7fd ffd4 	bl	8002d68 <HAL_GetTick>
 8004dc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dc2:	e008      	b.n	8004dd6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004dc4:	f7fd ffd0 	bl	8002d68 <HAL_GetTick>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	1ad3      	subs	r3, r2, r3
 8004dce:	2b02      	cmp	r3, #2
 8004dd0:	d901      	bls.n	8004dd6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004dd2:	2303      	movs	r3, #3
 8004dd4:	e087      	b.n	8004ee6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dd6:	4b27      	ldr	r3, [pc, #156]	@ (8004e74 <HAL_RCC_OscConfig+0x470>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d1f0      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	69da      	ldr	r2, [r3, #28]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a1b      	ldr	r3, [r3, #32]
 8004dea:	431a      	orrs	r2, r3
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004df0:	019b      	lsls	r3, r3, #6
 8004df2:	431a      	orrs	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004df8:	085b      	lsrs	r3, r3, #1
 8004dfa:	3b01      	subs	r3, #1
 8004dfc:	041b      	lsls	r3, r3, #16
 8004dfe:	431a      	orrs	r2, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e04:	061b      	lsls	r3, r3, #24
 8004e06:	491b      	ldr	r1, [pc, #108]	@ (8004e74 <HAL_RCC_OscConfig+0x470>)
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e0c:	4b1b      	ldr	r3, [pc, #108]	@ (8004e7c <HAL_RCC_OscConfig+0x478>)
 8004e0e:	2201      	movs	r2, #1
 8004e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e12:	f7fd ffa9 	bl	8002d68 <HAL_GetTick>
 8004e16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e18:	e008      	b.n	8004e2c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e1a:	f7fd ffa5 	bl	8002d68 <HAL_GetTick>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	d901      	bls.n	8004e2c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	e05c      	b.n	8004ee6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e2c:	4b11      	ldr	r3, [pc, #68]	@ (8004e74 <HAL_RCC_OscConfig+0x470>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d0f0      	beq.n	8004e1a <HAL_RCC_OscConfig+0x416>
 8004e38:	e054      	b.n	8004ee4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e3a:	4b10      	ldr	r3, [pc, #64]	@ (8004e7c <HAL_RCC_OscConfig+0x478>)
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e40:	f7fd ff92 	bl	8002d68 <HAL_GetTick>
 8004e44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e46:	e008      	b.n	8004e5a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e48:	f7fd ff8e 	bl	8002d68 <HAL_GetTick>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	2b02      	cmp	r3, #2
 8004e54:	d901      	bls.n	8004e5a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e045      	b.n	8004ee6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e5a:	4b06      	ldr	r3, [pc, #24]	@ (8004e74 <HAL_RCC_OscConfig+0x470>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d1f0      	bne.n	8004e48 <HAL_RCC_OscConfig+0x444>
 8004e66:	e03d      	b.n	8004ee4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	699b      	ldr	r3, [r3, #24]
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d107      	bne.n	8004e80 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e038      	b.n	8004ee6 <HAL_RCC_OscConfig+0x4e2>
 8004e74:	40023800 	.word	0x40023800
 8004e78:	40007000 	.word	0x40007000
 8004e7c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e80:	4b1b      	ldr	r3, [pc, #108]	@ (8004ef0 <HAL_RCC_OscConfig+0x4ec>)
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	699b      	ldr	r3, [r3, #24]
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d028      	beq.n	8004ee0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d121      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d11a      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004eaa:	68fa      	ldr	r2, [r7, #12]
 8004eac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004eb6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d111      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ec6:	085b      	lsrs	r3, r3, #1
 8004ec8:	3b01      	subs	r3, #1
 8004eca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d107      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eda:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d001      	beq.n	8004ee4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e000      	b.n	8004ee6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3718      	adds	r7, #24
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	40023800 	.word	0x40023800

08004ef4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d101      	bne.n	8004f08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	e0cc      	b.n	80050a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f08:	4b68      	ldr	r3, [pc, #416]	@ (80050ac <HAL_RCC_ClockConfig+0x1b8>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 0307 	and.w	r3, r3, #7
 8004f10:	683a      	ldr	r2, [r7, #0]
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d90c      	bls.n	8004f30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f16:	4b65      	ldr	r3, [pc, #404]	@ (80050ac <HAL_RCC_ClockConfig+0x1b8>)
 8004f18:	683a      	ldr	r2, [r7, #0]
 8004f1a:	b2d2      	uxtb	r2, r2
 8004f1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f1e:	4b63      	ldr	r3, [pc, #396]	@ (80050ac <HAL_RCC_ClockConfig+0x1b8>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 0307 	and.w	r3, r3, #7
 8004f26:	683a      	ldr	r2, [r7, #0]
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d001      	beq.n	8004f30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e0b8      	b.n	80050a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 0302 	and.w	r3, r3, #2
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d020      	beq.n	8004f7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0304 	and.w	r3, r3, #4
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d005      	beq.n	8004f54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f48:	4b59      	ldr	r3, [pc, #356]	@ (80050b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	4a58      	ldr	r2, [pc, #352]	@ (80050b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f4e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004f52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 0308 	and.w	r3, r3, #8
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d005      	beq.n	8004f6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f60:	4b53      	ldr	r3, [pc, #332]	@ (80050b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	4a52      	ldr	r2, [pc, #328]	@ (80050b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f66:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004f6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f6c:	4b50      	ldr	r3, [pc, #320]	@ (80050b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	494d      	ldr	r1, [pc, #308]	@ (80050b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 0301 	and.w	r3, r3, #1
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d044      	beq.n	8005014 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d107      	bne.n	8004fa2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f92:	4b47      	ldr	r3, [pc, #284]	@ (80050b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d119      	bne.n	8004fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e07f      	b.n	80050a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	2b02      	cmp	r3, #2
 8004fa8:	d003      	beq.n	8004fb2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fae:	2b03      	cmp	r3, #3
 8004fb0:	d107      	bne.n	8004fc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fb2:	4b3f      	ldr	r3, [pc, #252]	@ (80050b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d109      	bne.n	8004fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e06f      	b.n	80050a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fc2:	4b3b      	ldr	r3, [pc, #236]	@ (80050b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 0302 	and.w	r3, r3, #2
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d101      	bne.n	8004fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e067      	b.n	80050a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004fd2:	4b37      	ldr	r3, [pc, #220]	@ (80050b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	f023 0203 	bic.w	r2, r3, #3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	4934      	ldr	r1, [pc, #208]	@ (80050b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004fe4:	f7fd fec0 	bl	8002d68 <HAL_GetTick>
 8004fe8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fea:	e00a      	b.n	8005002 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fec:	f7fd febc 	bl	8002d68 <HAL_GetTick>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d901      	bls.n	8005002 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	e04f      	b.n	80050a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005002:	4b2b      	ldr	r3, [pc, #172]	@ (80050b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	f003 020c 	and.w	r2, r3, #12
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	429a      	cmp	r2, r3
 8005012:	d1eb      	bne.n	8004fec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005014:	4b25      	ldr	r3, [pc, #148]	@ (80050ac <HAL_RCC_ClockConfig+0x1b8>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 0307 	and.w	r3, r3, #7
 800501c:	683a      	ldr	r2, [r7, #0]
 800501e:	429a      	cmp	r2, r3
 8005020:	d20c      	bcs.n	800503c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005022:	4b22      	ldr	r3, [pc, #136]	@ (80050ac <HAL_RCC_ClockConfig+0x1b8>)
 8005024:	683a      	ldr	r2, [r7, #0]
 8005026:	b2d2      	uxtb	r2, r2
 8005028:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800502a:	4b20      	ldr	r3, [pc, #128]	@ (80050ac <HAL_RCC_ClockConfig+0x1b8>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 0307 	and.w	r3, r3, #7
 8005032:	683a      	ldr	r2, [r7, #0]
 8005034:	429a      	cmp	r2, r3
 8005036:	d001      	beq.n	800503c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e032      	b.n	80050a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 0304 	and.w	r3, r3, #4
 8005044:	2b00      	cmp	r3, #0
 8005046:	d008      	beq.n	800505a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005048:	4b19      	ldr	r3, [pc, #100]	@ (80050b0 <HAL_RCC_ClockConfig+0x1bc>)
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	4916      	ldr	r1, [pc, #88]	@ (80050b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005056:	4313      	orrs	r3, r2
 8005058:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0308 	and.w	r3, r3, #8
 8005062:	2b00      	cmp	r3, #0
 8005064:	d009      	beq.n	800507a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005066:	4b12      	ldr	r3, [pc, #72]	@ (80050b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	00db      	lsls	r3, r3, #3
 8005074:	490e      	ldr	r1, [pc, #56]	@ (80050b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005076:	4313      	orrs	r3, r2
 8005078:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800507a:	f000 f821 	bl	80050c0 <HAL_RCC_GetSysClockFreq>
 800507e:	4602      	mov	r2, r0
 8005080:	4b0b      	ldr	r3, [pc, #44]	@ (80050b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	091b      	lsrs	r3, r3, #4
 8005086:	f003 030f 	and.w	r3, r3, #15
 800508a:	490a      	ldr	r1, [pc, #40]	@ (80050b4 <HAL_RCC_ClockConfig+0x1c0>)
 800508c:	5ccb      	ldrb	r3, [r1, r3]
 800508e:	fa22 f303 	lsr.w	r3, r2, r3
 8005092:	4a09      	ldr	r2, [pc, #36]	@ (80050b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005094:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005096:	4b09      	ldr	r3, [pc, #36]	@ (80050bc <HAL_RCC_ClockConfig+0x1c8>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4618      	mov	r0, r3
 800509c:	f7fd fe20 	bl	8002ce0 <HAL_InitTick>

  return HAL_OK;
 80050a0:	2300      	movs	r3, #0
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3710      	adds	r7, #16
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	bf00      	nop
 80050ac:	40023c00 	.word	0x40023c00
 80050b0:	40023800 	.word	0x40023800
 80050b4:	080087d8 	.word	0x080087d8
 80050b8:	20000048 	.word	0x20000048
 80050bc:	2000004c 	.word	0x2000004c

080050c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050c4:	b090      	sub	sp, #64	@ 0x40
 80050c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80050c8:	2300      	movs	r3, #0
 80050ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80050cc:	2300      	movs	r3, #0
 80050ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80050d0:	2300      	movs	r3, #0
 80050d2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80050d4:	2300      	movs	r3, #0
 80050d6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80050d8:	4b59      	ldr	r3, [pc, #356]	@ (8005240 <HAL_RCC_GetSysClockFreq+0x180>)
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	f003 030c 	and.w	r3, r3, #12
 80050e0:	2b08      	cmp	r3, #8
 80050e2:	d00d      	beq.n	8005100 <HAL_RCC_GetSysClockFreq+0x40>
 80050e4:	2b08      	cmp	r3, #8
 80050e6:	f200 80a1 	bhi.w	800522c <HAL_RCC_GetSysClockFreq+0x16c>
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d002      	beq.n	80050f4 <HAL_RCC_GetSysClockFreq+0x34>
 80050ee:	2b04      	cmp	r3, #4
 80050f0:	d003      	beq.n	80050fa <HAL_RCC_GetSysClockFreq+0x3a>
 80050f2:	e09b      	b.n	800522c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80050f4:	4b53      	ldr	r3, [pc, #332]	@ (8005244 <HAL_RCC_GetSysClockFreq+0x184>)
 80050f6:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80050f8:	e09b      	b.n	8005232 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80050fa:	4b53      	ldr	r3, [pc, #332]	@ (8005248 <HAL_RCC_GetSysClockFreq+0x188>)
 80050fc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80050fe:	e098      	b.n	8005232 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005100:	4b4f      	ldr	r3, [pc, #316]	@ (8005240 <HAL_RCC_GetSysClockFreq+0x180>)
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005108:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800510a:	4b4d      	ldr	r3, [pc, #308]	@ (8005240 <HAL_RCC_GetSysClockFreq+0x180>)
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005112:	2b00      	cmp	r3, #0
 8005114:	d028      	beq.n	8005168 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005116:	4b4a      	ldr	r3, [pc, #296]	@ (8005240 <HAL_RCC_GetSysClockFreq+0x180>)
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	099b      	lsrs	r3, r3, #6
 800511c:	2200      	movs	r2, #0
 800511e:	623b      	str	r3, [r7, #32]
 8005120:	627a      	str	r2, [r7, #36]	@ 0x24
 8005122:	6a3b      	ldr	r3, [r7, #32]
 8005124:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005128:	2100      	movs	r1, #0
 800512a:	4b47      	ldr	r3, [pc, #284]	@ (8005248 <HAL_RCC_GetSysClockFreq+0x188>)
 800512c:	fb03 f201 	mul.w	r2, r3, r1
 8005130:	2300      	movs	r3, #0
 8005132:	fb00 f303 	mul.w	r3, r0, r3
 8005136:	4413      	add	r3, r2
 8005138:	4a43      	ldr	r2, [pc, #268]	@ (8005248 <HAL_RCC_GetSysClockFreq+0x188>)
 800513a:	fba0 1202 	umull	r1, r2, r0, r2
 800513e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005140:	460a      	mov	r2, r1
 8005142:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005144:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005146:	4413      	add	r3, r2
 8005148:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800514a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800514c:	2200      	movs	r2, #0
 800514e:	61bb      	str	r3, [r7, #24]
 8005150:	61fa      	str	r2, [r7, #28]
 8005152:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005156:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800515a:	f7fb fd21 	bl	8000ba0 <__aeabi_uldivmod>
 800515e:	4602      	mov	r2, r0
 8005160:	460b      	mov	r3, r1
 8005162:	4613      	mov	r3, r2
 8005164:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005166:	e053      	b.n	8005210 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005168:	4b35      	ldr	r3, [pc, #212]	@ (8005240 <HAL_RCC_GetSysClockFreq+0x180>)
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	099b      	lsrs	r3, r3, #6
 800516e:	2200      	movs	r2, #0
 8005170:	613b      	str	r3, [r7, #16]
 8005172:	617a      	str	r2, [r7, #20]
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800517a:	f04f 0b00 	mov.w	fp, #0
 800517e:	4652      	mov	r2, sl
 8005180:	465b      	mov	r3, fp
 8005182:	f04f 0000 	mov.w	r0, #0
 8005186:	f04f 0100 	mov.w	r1, #0
 800518a:	0159      	lsls	r1, r3, #5
 800518c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005190:	0150      	lsls	r0, r2, #5
 8005192:	4602      	mov	r2, r0
 8005194:	460b      	mov	r3, r1
 8005196:	ebb2 080a 	subs.w	r8, r2, sl
 800519a:	eb63 090b 	sbc.w	r9, r3, fp
 800519e:	f04f 0200 	mov.w	r2, #0
 80051a2:	f04f 0300 	mov.w	r3, #0
 80051a6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80051aa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80051ae:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80051b2:	ebb2 0408 	subs.w	r4, r2, r8
 80051b6:	eb63 0509 	sbc.w	r5, r3, r9
 80051ba:	f04f 0200 	mov.w	r2, #0
 80051be:	f04f 0300 	mov.w	r3, #0
 80051c2:	00eb      	lsls	r3, r5, #3
 80051c4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051c8:	00e2      	lsls	r2, r4, #3
 80051ca:	4614      	mov	r4, r2
 80051cc:	461d      	mov	r5, r3
 80051ce:	eb14 030a 	adds.w	r3, r4, sl
 80051d2:	603b      	str	r3, [r7, #0]
 80051d4:	eb45 030b 	adc.w	r3, r5, fp
 80051d8:	607b      	str	r3, [r7, #4]
 80051da:	f04f 0200 	mov.w	r2, #0
 80051de:	f04f 0300 	mov.w	r3, #0
 80051e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80051e6:	4629      	mov	r1, r5
 80051e8:	028b      	lsls	r3, r1, #10
 80051ea:	4621      	mov	r1, r4
 80051ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80051f0:	4621      	mov	r1, r4
 80051f2:	028a      	lsls	r2, r1, #10
 80051f4:	4610      	mov	r0, r2
 80051f6:	4619      	mov	r1, r3
 80051f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051fa:	2200      	movs	r2, #0
 80051fc:	60bb      	str	r3, [r7, #8]
 80051fe:	60fa      	str	r2, [r7, #12]
 8005200:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005204:	f7fb fccc 	bl	8000ba0 <__aeabi_uldivmod>
 8005208:	4602      	mov	r2, r0
 800520a:	460b      	mov	r3, r1
 800520c:	4613      	mov	r3, r2
 800520e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005210:	4b0b      	ldr	r3, [pc, #44]	@ (8005240 <HAL_RCC_GetSysClockFreq+0x180>)
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	0c1b      	lsrs	r3, r3, #16
 8005216:	f003 0303 	and.w	r3, r3, #3
 800521a:	3301      	adds	r3, #1
 800521c:	005b      	lsls	r3, r3, #1
 800521e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8005220:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005224:	fbb2 f3f3 	udiv	r3, r2, r3
 8005228:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800522a:	e002      	b.n	8005232 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800522c:	4b05      	ldr	r3, [pc, #20]	@ (8005244 <HAL_RCC_GetSysClockFreq+0x184>)
 800522e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005230:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005234:	4618      	mov	r0, r3
 8005236:	3740      	adds	r7, #64	@ 0x40
 8005238:	46bd      	mov	sp, r7
 800523a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800523e:	bf00      	nop
 8005240:	40023800 	.word	0x40023800
 8005244:	00f42400 	.word	0x00f42400
 8005248:	017d7840 	.word	0x017d7840

0800524c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800524c:	b480      	push	{r7}
 800524e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005250:	4b03      	ldr	r3, [pc, #12]	@ (8005260 <HAL_RCC_GetHCLKFreq+0x14>)
 8005252:	681b      	ldr	r3, [r3, #0]
}
 8005254:	4618      	mov	r0, r3
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr
 800525e:	bf00      	nop
 8005260:	20000048 	.word	0x20000048

08005264 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005268:	f7ff fff0 	bl	800524c <HAL_RCC_GetHCLKFreq>
 800526c:	4602      	mov	r2, r0
 800526e:	4b05      	ldr	r3, [pc, #20]	@ (8005284 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	0a9b      	lsrs	r3, r3, #10
 8005274:	f003 0307 	and.w	r3, r3, #7
 8005278:	4903      	ldr	r1, [pc, #12]	@ (8005288 <HAL_RCC_GetPCLK1Freq+0x24>)
 800527a:	5ccb      	ldrb	r3, [r1, r3]
 800527c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005280:	4618      	mov	r0, r3
 8005282:	bd80      	pop	{r7, pc}
 8005284:	40023800 	.word	0x40023800
 8005288:	080087e8 	.word	0x080087e8

0800528c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005290:	f7ff ffdc 	bl	800524c <HAL_RCC_GetHCLKFreq>
 8005294:	4602      	mov	r2, r0
 8005296:	4b05      	ldr	r3, [pc, #20]	@ (80052ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	0b5b      	lsrs	r3, r3, #13
 800529c:	f003 0307 	and.w	r3, r3, #7
 80052a0:	4903      	ldr	r1, [pc, #12]	@ (80052b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80052a2:	5ccb      	ldrb	r3, [r1, r3]
 80052a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	bd80      	pop	{r7, pc}
 80052ac:	40023800 	.word	0x40023800
 80052b0:	080087e8 	.word	0x080087e8

080052b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b082      	sub	sp, #8
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d101      	bne.n	80052c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e041      	b.n	800534a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d106      	bne.n	80052e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f7fd fb3c 	bl	8002958 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2202      	movs	r2, #2
 80052e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	3304      	adds	r3, #4
 80052f0:	4619      	mov	r1, r3
 80052f2:	4610      	mov	r0, r2
 80052f4:	f000 fc56 	bl	8005ba4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005348:	2300      	movs	r3, #0
}
 800534a:	4618      	mov	r0, r3
 800534c:	3708      	adds	r7, #8
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
	...

08005354 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005354:	b480      	push	{r7}
 8005356:	b085      	sub	sp, #20
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005362:	b2db      	uxtb	r3, r3
 8005364:	2b01      	cmp	r3, #1
 8005366:	d001      	beq.n	800536c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e03c      	b.n	80053e6 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2202      	movs	r2, #2
 8005370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a1e      	ldr	r2, [pc, #120]	@ (80053f4 <HAL_TIM_Base_Start+0xa0>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d018      	beq.n	80053b0 <HAL_TIM_Base_Start+0x5c>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005386:	d013      	beq.n	80053b0 <HAL_TIM_Base_Start+0x5c>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a1a      	ldr	r2, [pc, #104]	@ (80053f8 <HAL_TIM_Base_Start+0xa4>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d00e      	beq.n	80053b0 <HAL_TIM_Base_Start+0x5c>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a19      	ldr	r2, [pc, #100]	@ (80053fc <HAL_TIM_Base_Start+0xa8>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d009      	beq.n	80053b0 <HAL_TIM_Base_Start+0x5c>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a17      	ldr	r2, [pc, #92]	@ (8005400 <HAL_TIM_Base_Start+0xac>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d004      	beq.n	80053b0 <HAL_TIM_Base_Start+0x5c>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a16      	ldr	r2, [pc, #88]	@ (8005404 <HAL_TIM_Base_Start+0xb0>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d111      	bne.n	80053d4 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	f003 0307 	and.w	r3, r3, #7
 80053ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2b06      	cmp	r3, #6
 80053c0:	d010      	beq.n	80053e4 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f042 0201 	orr.w	r2, r2, #1
 80053d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053d2:	e007      	b.n	80053e4 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f042 0201 	orr.w	r2, r2, #1
 80053e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053e4:	2300      	movs	r3, #0
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3714      	adds	r7, #20
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr
 80053f2:	bf00      	nop
 80053f4:	40010000 	.word	0x40010000
 80053f8:	40000400 	.word	0x40000400
 80053fc:	40000800 	.word	0x40000800
 8005400:	40000c00 	.word	0x40000c00
 8005404:	40014000 	.word	0x40014000

08005408 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b082      	sub	sp, #8
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d101      	bne.n	800541a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e041      	b.n	800549e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005420:	b2db      	uxtb	r3, r3
 8005422:	2b00      	cmp	r3, #0
 8005424:	d106      	bne.n	8005434 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 f839 	bl	80054a6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2202      	movs	r2, #2
 8005438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	3304      	adds	r3, #4
 8005444:	4619      	mov	r1, r3
 8005446:	4610      	mov	r0, r2
 8005448:	f000 fbac 	bl	8005ba4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800549c:	2300      	movs	r3, #0
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3708      	adds	r7, #8
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}

080054a6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80054a6:	b480      	push	{r7}
 80054a8:	b083      	sub	sp, #12
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80054ae:	bf00      	nop
 80054b0:	370c      	adds	r7, #12
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr
	...

080054bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d109      	bne.n	80054e0 <HAL_TIM_PWM_Start+0x24>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	bf14      	ite	ne
 80054d8:	2301      	movne	r3, #1
 80054da:	2300      	moveq	r3, #0
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	e022      	b.n	8005526 <HAL_TIM_PWM_Start+0x6a>
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	2b04      	cmp	r3, #4
 80054e4:	d109      	bne.n	80054fa <HAL_TIM_PWM_Start+0x3e>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	bf14      	ite	ne
 80054f2:	2301      	movne	r3, #1
 80054f4:	2300      	moveq	r3, #0
 80054f6:	b2db      	uxtb	r3, r3
 80054f8:	e015      	b.n	8005526 <HAL_TIM_PWM_Start+0x6a>
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	2b08      	cmp	r3, #8
 80054fe:	d109      	bne.n	8005514 <HAL_TIM_PWM_Start+0x58>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005506:	b2db      	uxtb	r3, r3
 8005508:	2b01      	cmp	r3, #1
 800550a:	bf14      	ite	ne
 800550c:	2301      	movne	r3, #1
 800550e:	2300      	moveq	r3, #0
 8005510:	b2db      	uxtb	r3, r3
 8005512:	e008      	b.n	8005526 <HAL_TIM_PWM_Start+0x6a>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800551a:	b2db      	uxtb	r3, r3
 800551c:	2b01      	cmp	r3, #1
 800551e:	bf14      	ite	ne
 8005520:	2301      	movne	r3, #1
 8005522:	2300      	moveq	r3, #0
 8005524:	b2db      	uxtb	r3, r3
 8005526:	2b00      	cmp	r3, #0
 8005528:	d001      	beq.n	800552e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	e068      	b.n	8005600 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d104      	bne.n	800553e <HAL_TIM_PWM_Start+0x82>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2202      	movs	r2, #2
 8005538:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800553c:	e013      	b.n	8005566 <HAL_TIM_PWM_Start+0xaa>
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	2b04      	cmp	r3, #4
 8005542:	d104      	bne.n	800554e <HAL_TIM_PWM_Start+0x92>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2202      	movs	r2, #2
 8005548:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800554c:	e00b      	b.n	8005566 <HAL_TIM_PWM_Start+0xaa>
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	2b08      	cmp	r3, #8
 8005552:	d104      	bne.n	800555e <HAL_TIM_PWM_Start+0xa2>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2202      	movs	r2, #2
 8005558:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800555c:	e003      	b.n	8005566 <HAL_TIM_PWM_Start+0xaa>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2202      	movs	r2, #2
 8005562:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2201      	movs	r2, #1
 800556c:	6839      	ldr	r1, [r7, #0]
 800556e:	4618      	mov	r0, r3
 8005570:	f000 fdbe 	bl	80060f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a23      	ldr	r2, [pc, #140]	@ (8005608 <HAL_TIM_PWM_Start+0x14c>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d107      	bne.n	800558e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800558c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a1d      	ldr	r2, [pc, #116]	@ (8005608 <HAL_TIM_PWM_Start+0x14c>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d018      	beq.n	80055ca <HAL_TIM_PWM_Start+0x10e>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055a0:	d013      	beq.n	80055ca <HAL_TIM_PWM_Start+0x10e>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a19      	ldr	r2, [pc, #100]	@ (800560c <HAL_TIM_PWM_Start+0x150>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d00e      	beq.n	80055ca <HAL_TIM_PWM_Start+0x10e>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a17      	ldr	r2, [pc, #92]	@ (8005610 <HAL_TIM_PWM_Start+0x154>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d009      	beq.n	80055ca <HAL_TIM_PWM_Start+0x10e>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a16      	ldr	r2, [pc, #88]	@ (8005614 <HAL_TIM_PWM_Start+0x158>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d004      	beq.n	80055ca <HAL_TIM_PWM_Start+0x10e>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a14      	ldr	r2, [pc, #80]	@ (8005618 <HAL_TIM_PWM_Start+0x15c>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d111      	bne.n	80055ee <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	f003 0307 	and.w	r3, r3, #7
 80055d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2b06      	cmp	r3, #6
 80055da:	d010      	beq.n	80055fe <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f042 0201 	orr.w	r2, r2, #1
 80055ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055ec:	e007      	b.n	80055fe <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f042 0201 	orr.w	r2, r2, #1
 80055fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055fe:	2300      	movs	r3, #0
}
 8005600:	4618      	mov	r0, r3
 8005602:	3710      	adds	r7, #16
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}
 8005608:	40010000 	.word	0x40010000
 800560c:	40000400 	.word	0x40000400
 8005610:	40000800 	.word	0x40000800
 8005614:	40000c00 	.word	0x40000c00
 8005618:	40014000 	.word	0x40014000

0800561c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b082      	sub	sp, #8
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	f003 0302 	and.w	r3, r3, #2
 800562e:	2b02      	cmp	r3, #2
 8005630:	d122      	bne.n	8005678 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	f003 0302 	and.w	r3, r3, #2
 800563c:	2b02      	cmp	r3, #2
 800563e:	d11b      	bne.n	8005678 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f06f 0202 	mvn.w	r2, #2
 8005648:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2201      	movs	r2, #1
 800564e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	699b      	ldr	r3, [r3, #24]
 8005656:	f003 0303 	and.w	r3, r3, #3
 800565a:	2b00      	cmp	r3, #0
 800565c:	d003      	beq.n	8005666 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 fa81 	bl	8005b66 <HAL_TIM_IC_CaptureCallback>
 8005664:	e005      	b.n	8005672 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f000 fa73 	bl	8005b52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f000 fa84 	bl	8005b7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	f003 0304 	and.w	r3, r3, #4
 8005682:	2b04      	cmp	r3, #4
 8005684:	d122      	bne.n	80056cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	f003 0304 	and.w	r3, r3, #4
 8005690:	2b04      	cmp	r3, #4
 8005692:	d11b      	bne.n	80056cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f06f 0204 	mvn.w	r2, #4
 800569c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2202      	movs	r2, #2
 80056a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	699b      	ldr	r3, [r3, #24]
 80056aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d003      	beq.n	80056ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f000 fa57 	bl	8005b66 <HAL_TIM_IC_CaptureCallback>
 80056b8:	e005      	b.n	80056c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 fa49 	bl	8005b52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f000 fa5a 	bl	8005b7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	f003 0308 	and.w	r3, r3, #8
 80056d6:	2b08      	cmp	r3, #8
 80056d8:	d122      	bne.n	8005720 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	f003 0308 	and.w	r3, r3, #8
 80056e4:	2b08      	cmp	r3, #8
 80056e6:	d11b      	bne.n	8005720 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f06f 0208 	mvn.w	r2, #8
 80056f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2204      	movs	r2, #4
 80056f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	69db      	ldr	r3, [r3, #28]
 80056fe:	f003 0303 	and.w	r3, r3, #3
 8005702:	2b00      	cmp	r3, #0
 8005704:	d003      	beq.n	800570e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f000 fa2d 	bl	8005b66 <HAL_TIM_IC_CaptureCallback>
 800570c:	e005      	b.n	800571a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f000 fa1f 	bl	8005b52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f000 fa30 	bl	8005b7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	691b      	ldr	r3, [r3, #16]
 8005726:	f003 0310 	and.w	r3, r3, #16
 800572a:	2b10      	cmp	r3, #16
 800572c:	d122      	bne.n	8005774 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	f003 0310 	and.w	r3, r3, #16
 8005738:	2b10      	cmp	r3, #16
 800573a:	d11b      	bne.n	8005774 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f06f 0210 	mvn.w	r2, #16
 8005744:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2208      	movs	r2, #8
 800574a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	69db      	ldr	r3, [r3, #28]
 8005752:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005756:	2b00      	cmp	r3, #0
 8005758:	d003      	beq.n	8005762 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 fa03 	bl	8005b66 <HAL_TIM_IC_CaptureCallback>
 8005760:	e005      	b.n	800576e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f000 f9f5 	bl	8005b52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f000 fa06 	bl	8005b7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	691b      	ldr	r3, [r3, #16]
 800577a:	f003 0301 	and.w	r3, r3, #1
 800577e:	2b01      	cmp	r3, #1
 8005780:	d10e      	bne.n	80057a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	f003 0301 	and.w	r3, r3, #1
 800578c:	2b01      	cmp	r3, #1
 800578e:	d107      	bne.n	80057a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f06f 0201 	mvn.w	r2, #1
 8005798:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f000 f9cf 	bl	8005b3e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	691b      	ldr	r3, [r3, #16]
 80057a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057aa:	2b80      	cmp	r3, #128	@ 0x80
 80057ac:	d10e      	bne.n	80057cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057b8:	2b80      	cmp	r3, #128	@ 0x80
 80057ba:	d107      	bne.n	80057cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80057c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f000 fd30 	bl	800622c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	691b      	ldr	r3, [r3, #16]
 80057d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057d6:	2b40      	cmp	r3, #64	@ 0x40
 80057d8:	d10e      	bne.n	80057f8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057e4:	2b40      	cmp	r3, #64	@ 0x40
 80057e6:	d107      	bne.n	80057f8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80057f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 f9cb 	bl	8005b8e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	f003 0320 	and.w	r3, r3, #32
 8005802:	2b20      	cmp	r3, #32
 8005804:	d10e      	bne.n	8005824 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	68db      	ldr	r3, [r3, #12]
 800580c:	f003 0320 	and.w	r3, r3, #32
 8005810:	2b20      	cmp	r3, #32
 8005812:	d107      	bne.n	8005824 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f06f 0220 	mvn.w	r2, #32
 800581c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f000 fcfa 	bl	8006218 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005824:	bf00      	nop
 8005826:	3708      	adds	r7, #8
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}

0800582c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b086      	sub	sp, #24
 8005830:	af00      	add	r7, sp, #0
 8005832:	60f8      	str	r0, [r7, #12]
 8005834:	60b9      	str	r1, [r7, #8]
 8005836:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005838:	2300      	movs	r3, #0
 800583a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005842:	2b01      	cmp	r3, #1
 8005844:	d101      	bne.n	800584a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005846:	2302      	movs	r3, #2
 8005848:	e0ae      	b.n	80059a8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2201      	movs	r2, #1
 800584e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2b0c      	cmp	r3, #12
 8005856:	f200 809f 	bhi.w	8005998 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800585a:	a201      	add	r2, pc, #4	@ (adr r2, 8005860 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800585c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005860:	08005895 	.word	0x08005895
 8005864:	08005999 	.word	0x08005999
 8005868:	08005999 	.word	0x08005999
 800586c:	08005999 	.word	0x08005999
 8005870:	080058d5 	.word	0x080058d5
 8005874:	08005999 	.word	0x08005999
 8005878:	08005999 	.word	0x08005999
 800587c:	08005999 	.word	0x08005999
 8005880:	08005917 	.word	0x08005917
 8005884:	08005999 	.word	0x08005999
 8005888:	08005999 	.word	0x08005999
 800588c:	08005999 	.word	0x08005999
 8005890:	08005957 	.word	0x08005957
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	68b9      	ldr	r1, [r7, #8]
 800589a:	4618      	mov	r0, r3
 800589c:	f000 fa02 	bl	8005ca4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	699a      	ldr	r2, [r3, #24]
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f042 0208 	orr.w	r2, r2, #8
 80058ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	699a      	ldr	r2, [r3, #24]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f022 0204 	bic.w	r2, r2, #4
 80058be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	6999      	ldr	r1, [r3, #24]
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	691a      	ldr	r2, [r3, #16]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	430a      	orrs	r2, r1
 80058d0:	619a      	str	r2, [r3, #24]
      break;
 80058d2:	e064      	b.n	800599e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	68b9      	ldr	r1, [r7, #8]
 80058da:	4618      	mov	r0, r3
 80058dc:	f000 fa48 	bl	8005d70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	699a      	ldr	r2, [r3, #24]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80058ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	699a      	ldr	r2, [r3, #24]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80058fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	6999      	ldr	r1, [r3, #24]
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	021a      	lsls	r2, r3, #8
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	430a      	orrs	r2, r1
 8005912:	619a      	str	r2, [r3, #24]
      break;
 8005914:	e043      	b.n	800599e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	68b9      	ldr	r1, [r7, #8]
 800591c:	4618      	mov	r0, r3
 800591e:	f000 fa93 	bl	8005e48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	69da      	ldr	r2, [r3, #28]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f042 0208 	orr.w	r2, r2, #8
 8005930:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	69da      	ldr	r2, [r3, #28]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f022 0204 	bic.w	r2, r2, #4
 8005940:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	69d9      	ldr	r1, [r3, #28]
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	691a      	ldr	r2, [r3, #16]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	430a      	orrs	r2, r1
 8005952:	61da      	str	r2, [r3, #28]
      break;
 8005954:	e023      	b.n	800599e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	68b9      	ldr	r1, [r7, #8]
 800595c:	4618      	mov	r0, r3
 800595e:	f000 fadd 	bl	8005f1c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	69da      	ldr	r2, [r3, #28]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005970:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	69da      	ldr	r2, [r3, #28]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005980:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	69d9      	ldr	r1, [r3, #28]
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	691b      	ldr	r3, [r3, #16]
 800598c:	021a      	lsls	r2, r3, #8
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	430a      	orrs	r2, r1
 8005994:	61da      	str	r2, [r3, #28]
      break;
 8005996:	e002      	b.n	800599e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	75fb      	strb	r3, [r7, #23]
      break;
 800599c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2200      	movs	r2, #0
 80059a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80059a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3718      	adds	r7, #24
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}

080059b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059ba:	2300      	movs	r3, #0
 80059bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d101      	bne.n	80059cc <HAL_TIM_ConfigClockSource+0x1c>
 80059c8:	2302      	movs	r3, #2
 80059ca:	e0b4      	b.n	8005b36 <HAL_TIM_ConfigClockSource+0x186>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2202      	movs	r2, #2
 80059d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80059ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80059f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	68ba      	ldr	r2, [r7, #8]
 80059fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a04:	d03e      	beq.n	8005a84 <HAL_TIM_ConfigClockSource+0xd4>
 8005a06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a0a:	f200 8087 	bhi.w	8005b1c <HAL_TIM_ConfigClockSource+0x16c>
 8005a0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a12:	f000 8086 	beq.w	8005b22 <HAL_TIM_ConfigClockSource+0x172>
 8005a16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a1a:	d87f      	bhi.n	8005b1c <HAL_TIM_ConfigClockSource+0x16c>
 8005a1c:	2b70      	cmp	r3, #112	@ 0x70
 8005a1e:	d01a      	beq.n	8005a56 <HAL_TIM_ConfigClockSource+0xa6>
 8005a20:	2b70      	cmp	r3, #112	@ 0x70
 8005a22:	d87b      	bhi.n	8005b1c <HAL_TIM_ConfigClockSource+0x16c>
 8005a24:	2b60      	cmp	r3, #96	@ 0x60
 8005a26:	d050      	beq.n	8005aca <HAL_TIM_ConfigClockSource+0x11a>
 8005a28:	2b60      	cmp	r3, #96	@ 0x60
 8005a2a:	d877      	bhi.n	8005b1c <HAL_TIM_ConfigClockSource+0x16c>
 8005a2c:	2b50      	cmp	r3, #80	@ 0x50
 8005a2e:	d03c      	beq.n	8005aaa <HAL_TIM_ConfigClockSource+0xfa>
 8005a30:	2b50      	cmp	r3, #80	@ 0x50
 8005a32:	d873      	bhi.n	8005b1c <HAL_TIM_ConfigClockSource+0x16c>
 8005a34:	2b40      	cmp	r3, #64	@ 0x40
 8005a36:	d058      	beq.n	8005aea <HAL_TIM_ConfigClockSource+0x13a>
 8005a38:	2b40      	cmp	r3, #64	@ 0x40
 8005a3a:	d86f      	bhi.n	8005b1c <HAL_TIM_ConfigClockSource+0x16c>
 8005a3c:	2b30      	cmp	r3, #48	@ 0x30
 8005a3e:	d064      	beq.n	8005b0a <HAL_TIM_ConfigClockSource+0x15a>
 8005a40:	2b30      	cmp	r3, #48	@ 0x30
 8005a42:	d86b      	bhi.n	8005b1c <HAL_TIM_ConfigClockSource+0x16c>
 8005a44:	2b20      	cmp	r3, #32
 8005a46:	d060      	beq.n	8005b0a <HAL_TIM_ConfigClockSource+0x15a>
 8005a48:	2b20      	cmp	r3, #32
 8005a4a:	d867      	bhi.n	8005b1c <HAL_TIM_ConfigClockSource+0x16c>
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d05c      	beq.n	8005b0a <HAL_TIM_ConfigClockSource+0x15a>
 8005a50:	2b10      	cmp	r3, #16
 8005a52:	d05a      	beq.n	8005b0a <HAL_TIM_ConfigClockSource+0x15a>
 8005a54:	e062      	b.n	8005b1c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6818      	ldr	r0, [r3, #0]
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	6899      	ldr	r1, [r3, #8]
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	685a      	ldr	r2, [r3, #4]
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	68db      	ldr	r3, [r3, #12]
 8005a66:	f000 fb23 	bl	80060b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005a78:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	68ba      	ldr	r2, [r7, #8]
 8005a80:	609a      	str	r2, [r3, #8]
      break;
 8005a82:	e04f      	b.n	8005b24 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6818      	ldr	r0, [r3, #0]
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	6899      	ldr	r1, [r3, #8]
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	685a      	ldr	r2, [r3, #4]
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	f000 fb0c 	bl	80060b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	689a      	ldr	r2, [r3, #8]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005aa6:	609a      	str	r2, [r3, #8]
      break;
 8005aa8:	e03c      	b.n	8005b24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6818      	ldr	r0, [r3, #0]
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	6859      	ldr	r1, [r3, #4]
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	f000 fa80 	bl	8005fbc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	2150      	movs	r1, #80	@ 0x50
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f000 fad9 	bl	800607a <TIM_ITRx_SetConfig>
      break;
 8005ac8:	e02c      	b.n	8005b24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6818      	ldr	r0, [r3, #0]
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	6859      	ldr	r1, [r3, #4]
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	68db      	ldr	r3, [r3, #12]
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	f000 fa9f 	bl	800601a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	2160      	movs	r1, #96	@ 0x60
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f000 fac9 	bl	800607a <TIM_ITRx_SetConfig>
      break;
 8005ae8:	e01c      	b.n	8005b24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6818      	ldr	r0, [r3, #0]
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	6859      	ldr	r1, [r3, #4]
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	461a      	mov	r2, r3
 8005af8:	f000 fa60 	bl	8005fbc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	2140      	movs	r1, #64	@ 0x40
 8005b02:	4618      	mov	r0, r3
 8005b04:	f000 fab9 	bl	800607a <TIM_ITRx_SetConfig>
      break;
 8005b08:	e00c      	b.n	8005b24 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4619      	mov	r1, r3
 8005b14:	4610      	mov	r0, r2
 8005b16:	f000 fab0 	bl	800607a <TIM_ITRx_SetConfig>
      break;
 8005b1a:	e003      	b.n	8005b24 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	73fb      	strb	r3, [r7, #15]
      break;
 8005b20:	e000      	b.n	8005b24 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005b22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3710      	adds	r7, #16
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}

08005b3e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b3e:	b480      	push	{r7}
 8005b40:	b083      	sub	sp, #12
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005b46:	bf00      	nop
 8005b48:	370c      	adds	r7, #12
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr

08005b52 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b52:	b480      	push	{r7}
 8005b54:	b083      	sub	sp, #12
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b5a:	bf00      	nop
 8005b5c:	370c      	adds	r7, #12
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr

08005b66 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b66:	b480      	push	{r7}
 8005b68:	b083      	sub	sp, #12
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b6e:	bf00      	nop
 8005b70:	370c      	adds	r7, #12
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr

08005b7a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b7a:	b480      	push	{r7}
 8005b7c:	b083      	sub	sp, #12
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b82:	bf00      	nop
 8005b84:	370c      	adds	r7, #12
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr

08005b8e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b8e:	b480      	push	{r7}
 8005b90:	b083      	sub	sp, #12
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b96:	bf00      	nop
 8005b98:	370c      	adds	r7, #12
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr
	...

08005ba4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b085      	sub	sp, #20
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	4a34      	ldr	r2, [pc, #208]	@ (8005c88 <TIM_Base_SetConfig+0xe4>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d00f      	beq.n	8005bdc <TIM_Base_SetConfig+0x38>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bc2:	d00b      	beq.n	8005bdc <TIM_Base_SetConfig+0x38>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	4a31      	ldr	r2, [pc, #196]	@ (8005c8c <TIM_Base_SetConfig+0xe8>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d007      	beq.n	8005bdc <TIM_Base_SetConfig+0x38>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4a30      	ldr	r2, [pc, #192]	@ (8005c90 <TIM_Base_SetConfig+0xec>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d003      	beq.n	8005bdc <TIM_Base_SetConfig+0x38>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	4a2f      	ldr	r2, [pc, #188]	@ (8005c94 <TIM_Base_SetConfig+0xf0>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d108      	bne.n	8005bee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005be2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	68fa      	ldr	r2, [r7, #12]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4a25      	ldr	r2, [pc, #148]	@ (8005c88 <TIM_Base_SetConfig+0xe4>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d01b      	beq.n	8005c2e <TIM_Base_SetConfig+0x8a>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bfc:	d017      	beq.n	8005c2e <TIM_Base_SetConfig+0x8a>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a22      	ldr	r2, [pc, #136]	@ (8005c8c <TIM_Base_SetConfig+0xe8>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d013      	beq.n	8005c2e <TIM_Base_SetConfig+0x8a>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4a21      	ldr	r2, [pc, #132]	@ (8005c90 <TIM_Base_SetConfig+0xec>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d00f      	beq.n	8005c2e <TIM_Base_SetConfig+0x8a>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	4a20      	ldr	r2, [pc, #128]	@ (8005c94 <TIM_Base_SetConfig+0xf0>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d00b      	beq.n	8005c2e <TIM_Base_SetConfig+0x8a>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a1f      	ldr	r2, [pc, #124]	@ (8005c98 <TIM_Base_SetConfig+0xf4>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d007      	beq.n	8005c2e <TIM_Base_SetConfig+0x8a>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a1e      	ldr	r2, [pc, #120]	@ (8005c9c <TIM_Base_SetConfig+0xf8>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d003      	beq.n	8005c2e <TIM_Base_SetConfig+0x8a>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a1d      	ldr	r2, [pc, #116]	@ (8005ca0 <TIM_Base_SetConfig+0xfc>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d108      	bne.n	8005c40 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	68fa      	ldr	r2, [r7, #12]
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	695b      	ldr	r3, [r3, #20]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	68fa      	ldr	r2, [r7, #12]
 8005c52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	689a      	ldr	r2, [r3, #8]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4a08      	ldr	r2, [pc, #32]	@ (8005c88 <TIM_Base_SetConfig+0xe4>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d103      	bne.n	8005c74 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	691a      	ldr	r2, [r3, #16]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2201      	movs	r2, #1
 8005c78:	615a      	str	r2, [r3, #20]
}
 8005c7a:	bf00      	nop
 8005c7c:	3714      	adds	r7, #20
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr
 8005c86:	bf00      	nop
 8005c88:	40010000 	.word	0x40010000
 8005c8c:	40000400 	.word	0x40000400
 8005c90:	40000800 	.word	0x40000800
 8005c94:	40000c00 	.word	0x40000c00
 8005c98:	40014000 	.word	0x40014000
 8005c9c:	40014400 	.word	0x40014400
 8005ca0:	40014800 	.word	0x40014800

08005ca4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b087      	sub	sp, #28
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a1b      	ldr	r3, [r3, #32]
 8005cb2:	f023 0201 	bic.w	r2, r3, #1
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6a1b      	ldr	r3, [r3, #32]
 8005cbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	699b      	ldr	r3, [r3, #24]
 8005cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f023 0303 	bic.w	r3, r3, #3
 8005cda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	68fa      	ldr	r2, [r7, #12]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	f023 0302 	bic.w	r3, r3, #2
 8005cec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	697a      	ldr	r2, [r7, #20]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	4a1c      	ldr	r2, [pc, #112]	@ (8005d6c <TIM_OC1_SetConfig+0xc8>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d10c      	bne.n	8005d1a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	f023 0308 	bic.w	r3, r3, #8
 8005d06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	697a      	ldr	r2, [r7, #20]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	f023 0304 	bic.w	r3, r3, #4
 8005d18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4a13      	ldr	r2, [pc, #76]	@ (8005d6c <TIM_OC1_SetConfig+0xc8>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d111      	bne.n	8005d46 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005d30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	695b      	ldr	r3, [r3, #20]
 8005d36:	693a      	ldr	r2, [r7, #16]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	699b      	ldr	r3, [r3, #24]
 8005d40:	693a      	ldr	r2, [r7, #16]
 8005d42:	4313      	orrs	r3, r2
 8005d44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	693a      	ldr	r2, [r7, #16]
 8005d4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	68fa      	ldr	r2, [r7, #12]
 8005d50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	685a      	ldr	r2, [r3, #4]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	697a      	ldr	r2, [r7, #20]
 8005d5e:	621a      	str	r2, [r3, #32]
}
 8005d60:	bf00      	nop
 8005d62:	371c      	adds	r7, #28
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr
 8005d6c:	40010000 	.word	0x40010000

08005d70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b087      	sub	sp, #28
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6a1b      	ldr	r3, [r3, #32]
 8005d7e:	f023 0210 	bic.w	r2, r3, #16
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6a1b      	ldr	r3, [r3, #32]
 8005d8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	699b      	ldr	r3, [r3, #24]
 8005d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005da6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	021b      	lsls	r3, r3, #8
 8005dae:	68fa      	ldr	r2, [r7, #12]
 8005db0:	4313      	orrs	r3, r2
 8005db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	f023 0320 	bic.w	r3, r3, #32
 8005dba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	011b      	lsls	r3, r3, #4
 8005dc2:	697a      	ldr	r2, [r7, #20]
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	4a1e      	ldr	r2, [pc, #120]	@ (8005e44 <TIM_OC2_SetConfig+0xd4>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d10d      	bne.n	8005dec <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005dd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	011b      	lsls	r3, r3, #4
 8005dde:	697a      	ldr	r2, [r7, #20]
 8005de0:	4313      	orrs	r3, r2
 8005de2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005dea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	4a15      	ldr	r2, [pc, #84]	@ (8005e44 <TIM_OC2_SetConfig+0xd4>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d113      	bne.n	8005e1c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005dfa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005e02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	695b      	ldr	r3, [r3, #20]
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	693a      	ldr	r2, [r7, #16]
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	699b      	ldr	r3, [r3, #24]
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	693a      	ldr	r2, [r7, #16]
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	693a      	ldr	r2, [r7, #16]
 8005e20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	68fa      	ldr	r2, [r7, #12]
 8005e26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	685a      	ldr	r2, [r3, #4]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	697a      	ldr	r2, [r7, #20]
 8005e34:	621a      	str	r2, [r3, #32]
}
 8005e36:	bf00      	nop
 8005e38:	371c      	adds	r7, #28
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr
 8005e42:	bf00      	nop
 8005e44:	40010000 	.word	0x40010000

08005e48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b087      	sub	sp, #28
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6a1b      	ldr	r3, [r3, #32]
 8005e56:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a1b      	ldr	r3, [r3, #32]
 8005e62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	69db      	ldr	r3, [r3, #28]
 8005e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f023 0303 	bic.w	r3, r3, #3
 8005e7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	68fa      	ldr	r2, [r7, #12]
 8005e86:	4313      	orrs	r3, r2
 8005e88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005e90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	021b      	lsls	r3, r3, #8
 8005e98:	697a      	ldr	r2, [r7, #20]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4a1d      	ldr	r2, [pc, #116]	@ (8005f18 <TIM_OC3_SetConfig+0xd0>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d10d      	bne.n	8005ec2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005eac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	68db      	ldr	r3, [r3, #12]
 8005eb2:	021b      	lsls	r3, r3, #8
 8005eb4:	697a      	ldr	r2, [r7, #20]
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005ec0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	4a14      	ldr	r2, [pc, #80]	@ (8005f18 <TIM_OC3_SetConfig+0xd0>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d113      	bne.n	8005ef2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005ed0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005ed8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	695b      	ldr	r3, [r3, #20]
 8005ede:	011b      	lsls	r3, r3, #4
 8005ee0:	693a      	ldr	r2, [r7, #16]
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	699b      	ldr	r3, [r3, #24]
 8005eea:	011b      	lsls	r3, r3, #4
 8005eec:	693a      	ldr	r2, [r7, #16]
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	693a      	ldr	r2, [r7, #16]
 8005ef6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	68fa      	ldr	r2, [r7, #12]
 8005efc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	685a      	ldr	r2, [r3, #4]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	697a      	ldr	r2, [r7, #20]
 8005f0a:	621a      	str	r2, [r3, #32]
}
 8005f0c:	bf00      	nop
 8005f0e:	371c      	adds	r7, #28
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr
 8005f18:	40010000 	.word	0x40010000

08005f1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b087      	sub	sp, #28
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6a1b      	ldr	r3, [r3, #32]
 8005f2a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a1b      	ldr	r3, [r3, #32]
 8005f36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	69db      	ldr	r3, [r3, #28]
 8005f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	021b      	lsls	r3, r3, #8
 8005f5a:	68fa      	ldr	r2, [r7, #12]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005f66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	031b      	lsls	r3, r3, #12
 8005f6e:	693a      	ldr	r2, [r7, #16]
 8005f70:	4313      	orrs	r3, r2
 8005f72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	4a10      	ldr	r2, [pc, #64]	@ (8005fb8 <TIM_OC4_SetConfig+0x9c>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d109      	bne.n	8005f90 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005f82:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	695b      	ldr	r3, [r3, #20]
 8005f88:	019b      	lsls	r3, r3, #6
 8005f8a:	697a      	ldr	r2, [r7, #20]
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	697a      	ldr	r2, [r7, #20]
 8005f94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	68fa      	ldr	r2, [r7, #12]
 8005f9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	685a      	ldr	r2, [r3, #4]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	693a      	ldr	r2, [r7, #16]
 8005fa8:	621a      	str	r2, [r3, #32]
}
 8005faa:	bf00      	nop
 8005fac:	371c      	adds	r7, #28
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr
 8005fb6:	bf00      	nop
 8005fb8:	40010000 	.word	0x40010000

08005fbc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b087      	sub	sp, #28
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	6a1b      	ldr	r3, [r3, #32]
 8005fcc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6a1b      	ldr	r3, [r3, #32]
 8005fd2:	f023 0201 	bic.w	r2, r3, #1
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	699b      	ldr	r3, [r3, #24]
 8005fde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005fe6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	011b      	lsls	r3, r3, #4
 8005fec:	693a      	ldr	r2, [r7, #16]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	f023 030a 	bic.w	r3, r3, #10
 8005ff8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ffa:	697a      	ldr	r2, [r7, #20]
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	693a      	ldr	r2, [r7, #16]
 8006006:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	697a      	ldr	r2, [r7, #20]
 800600c:	621a      	str	r2, [r3, #32]
}
 800600e:	bf00      	nop
 8006010:	371c      	adds	r7, #28
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr

0800601a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800601a:	b480      	push	{r7}
 800601c:	b087      	sub	sp, #28
 800601e:	af00      	add	r7, sp, #0
 8006020:	60f8      	str	r0, [r7, #12]
 8006022:	60b9      	str	r1, [r7, #8]
 8006024:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	6a1b      	ldr	r3, [r3, #32]
 800602a:	f023 0210 	bic.w	r2, r3, #16
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	699b      	ldr	r3, [r3, #24]
 8006036:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	6a1b      	ldr	r3, [r3, #32]
 800603c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006044:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	031b      	lsls	r3, r3, #12
 800604a:	697a      	ldr	r2, [r7, #20]
 800604c:	4313      	orrs	r3, r2
 800604e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006056:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	011b      	lsls	r3, r3, #4
 800605c:	693a      	ldr	r2, [r7, #16]
 800605e:	4313      	orrs	r3, r2
 8006060:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	697a      	ldr	r2, [r7, #20]
 8006066:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	693a      	ldr	r2, [r7, #16]
 800606c:	621a      	str	r2, [r3, #32]
}
 800606e:	bf00      	nop
 8006070:	371c      	adds	r7, #28
 8006072:	46bd      	mov	sp, r7
 8006074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006078:	4770      	bx	lr

0800607a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800607a:	b480      	push	{r7}
 800607c:	b085      	sub	sp, #20
 800607e:	af00      	add	r7, sp, #0
 8006080:	6078      	str	r0, [r7, #4]
 8006082:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006090:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006092:	683a      	ldr	r2, [r7, #0]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	4313      	orrs	r3, r2
 8006098:	f043 0307 	orr.w	r3, r3, #7
 800609c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	68fa      	ldr	r2, [r7, #12]
 80060a2:	609a      	str	r2, [r3, #8]
}
 80060a4:	bf00      	nop
 80060a6:	3714      	adds	r7, #20
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr

080060b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b087      	sub	sp, #28
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	60f8      	str	r0, [r7, #12]
 80060b8:	60b9      	str	r1, [r7, #8]
 80060ba:	607a      	str	r2, [r7, #4]
 80060bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80060ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	021a      	lsls	r2, r3, #8
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	431a      	orrs	r2, r3
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	697a      	ldr	r2, [r7, #20]
 80060da:	4313      	orrs	r3, r2
 80060dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	697a      	ldr	r2, [r7, #20]
 80060e2:	609a      	str	r2, [r3, #8]
}
 80060e4:	bf00      	nop
 80060e6:	371c      	adds	r7, #28
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr

080060f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b087      	sub	sp, #28
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	60f8      	str	r0, [r7, #12]
 80060f8:	60b9      	str	r1, [r7, #8]
 80060fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	f003 031f 	and.w	r3, r3, #31
 8006102:	2201      	movs	r2, #1
 8006104:	fa02 f303 	lsl.w	r3, r2, r3
 8006108:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	6a1a      	ldr	r2, [r3, #32]
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	43db      	mvns	r3, r3
 8006112:	401a      	ands	r2, r3
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	6a1a      	ldr	r2, [r3, #32]
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	f003 031f 	and.w	r3, r3, #31
 8006122:	6879      	ldr	r1, [r7, #4]
 8006124:	fa01 f303 	lsl.w	r3, r1, r3
 8006128:	431a      	orrs	r2, r3
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	621a      	str	r2, [r3, #32]
}
 800612e:	bf00      	nop
 8006130:	371c      	adds	r7, #28
 8006132:	46bd      	mov	sp, r7
 8006134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006138:	4770      	bx	lr
	...

0800613c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800613c:	b480      	push	{r7}
 800613e:	b085      	sub	sp, #20
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800614c:	2b01      	cmp	r3, #1
 800614e:	d101      	bne.n	8006154 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006150:	2302      	movs	r3, #2
 8006152:	e050      	b.n	80061f6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2201      	movs	r2, #1
 8006158:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2202      	movs	r2, #2
 8006160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800617a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	68fa      	ldr	r2, [r7, #12]
 8006182:	4313      	orrs	r3, r2
 8006184:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	68fa      	ldr	r2, [r7, #12]
 800618c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a1c      	ldr	r2, [pc, #112]	@ (8006204 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d018      	beq.n	80061ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061a0:	d013      	beq.n	80061ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a18      	ldr	r2, [pc, #96]	@ (8006208 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d00e      	beq.n	80061ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a16      	ldr	r2, [pc, #88]	@ (800620c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d009      	beq.n	80061ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a15      	ldr	r2, [pc, #84]	@ (8006210 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d004      	beq.n	80061ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a13      	ldr	r2, [pc, #76]	@ (8006214 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d10c      	bne.n	80061e4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80061d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	68ba      	ldr	r2, [r7, #8]
 80061d8:	4313      	orrs	r3, r2
 80061da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	68ba      	ldr	r2, [r7, #8]
 80061e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2200      	movs	r2, #0
 80061f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80061f4:	2300      	movs	r3, #0
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3714      	adds	r7, #20
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr
 8006202:	bf00      	nop
 8006204:	40010000 	.word	0x40010000
 8006208:	40000400 	.word	0x40000400
 800620c:	40000800 	.word	0x40000800
 8006210:	40000c00 	.word	0x40000c00
 8006214:	40014000 	.word	0x40014000

08006218 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006220:	bf00      	nop
 8006222:	370c      	adds	r7, #12
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr

0800622c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006234:	bf00      	nop
 8006236:	370c      	adds	r7, #12
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr

08006240 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b082      	sub	sp, #8
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d101      	bne.n	8006252 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	e03f      	b.n	80062d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006258:	b2db      	uxtb	r3, r3
 800625a:	2b00      	cmp	r3, #0
 800625c:	d106      	bne.n	800626c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2200      	movs	r2, #0
 8006262:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f7fc fc04 	bl	8002a74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2224      	movs	r2, #36	@ 0x24
 8006270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	68da      	ldr	r2, [r3, #12]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006282:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f000 fc7b 	bl	8006b80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	691a      	ldr	r2, [r3, #16]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006298:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	695a      	ldr	r2, [r3, #20]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80062a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	68da      	ldr	r2, [r3, #12]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80062b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2220      	movs	r2, #32
 80062c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2220      	movs	r2, #32
 80062cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80062d0:	2300      	movs	r3, #0
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3708      	adds	r7, #8
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}
	...

080062dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b0ba      	sub	sp, #232	@ 0xe8
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	68db      	ldr	r3, [r3, #12]
 80062f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	695b      	ldr	r3, [r3, #20]
 80062fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006302:	2300      	movs	r3, #0
 8006304:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006308:	2300      	movs	r3, #0
 800630a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800630e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006312:	f003 030f 	and.w	r3, r3, #15
 8006316:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800631a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800631e:	2b00      	cmp	r3, #0
 8006320:	d10f      	bne.n	8006342 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006326:	f003 0320 	and.w	r3, r3, #32
 800632a:	2b00      	cmp	r3, #0
 800632c:	d009      	beq.n	8006342 <HAL_UART_IRQHandler+0x66>
 800632e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006332:	f003 0320 	and.w	r3, r3, #32
 8006336:	2b00      	cmp	r3, #0
 8006338:	d003      	beq.n	8006342 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f000 fb65 	bl	8006a0a <UART_Receive_IT>
      return;
 8006340:	e256      	b.n	80067f0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006342:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006346:	2b00      	cmp	r3, #0
 8006348:	f000 80de 	beq.w	8006508 <HAL_UART_IRQHandler+0x22c>
 800634c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006350:	f003 0301 	and.w	r3, r3, #1
 8006354:	2b00      	cmp	r3, #0
 8006356:	d106      	bne.n	8006366 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006358:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800635c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006360:	2b00      	cmp	r3, #0
 8006362:	f000 80d1 	beq.w	8006508 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006366:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800636a:	f003 0301 	and.w	r3, r3, #1
 800636e:	2b00      	cmp	r3, #0
 8006370:	d00b      	beq.n	800638a <HAL_UART_IRQHandler+0xae>
 8006372:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006376:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800637a:	2b00      	cmp	r3, #0
 800637c:	d005      	beq.n	800638a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006382:	f043 0201 	orr.w	r2, r3, #1
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800638a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800638e:	f003 0304 	and.w	r3, r3, #4
 8006392:	2b00      	cmp	r3, #0
 8006394:	d00b      	beq.n	80063ae <HAL_UART_IRQHandler+0xd2>
 8006396:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800639a:	f003 0301 	and.w	r3, r3, #1
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d005      	beq.n	80063ae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063a6:	f043 0202 	orr.w	r2, r3, #2
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80063ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063b2:	f003 0302 	and.w	r3, r3, #2
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d00b      	beq.n	80063d2 <HAL_UART_IRQHandler+0xf6>
 80063ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063be:	f003 0301 	and.w	r3, r3, #1
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d005      	beq.n	80063d2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063ca:	f043 0204 	orr.w	r2, r3, #4
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80063d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063d6:	f003 0308 	and.w	r3, r3, #8
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d011      	beq.n	8006402 <HAL_UART_IRQHandler+0x126>
 80063de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063e2:	f003 0320 	and.w	r3, r3, #32
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d105      	bne.n	80063f6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80063ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063ee:	f003 0301 	and.w	r3, r3, #1
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d005      	beq.n	8006402 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063fa:	f043 0208 	orr.w	r2, r3, #8
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006406:	2b00      	cmp	r3, #0
 8006408:	f000 81ed 	beq.w	80067e6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800640c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006410:	f003 0320 	and.w	r3, r3, #32
 8006414:	2b00      	cmp	r3, #0
 8006416:	d008      	beq.n	800642a <HAL_UART_IRQHandler+0x14e>
 8006418:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800641c:	f003 0320 	and.w	r3, r3, #32
 8006420:	2b00      	cmp	r3, #0
 8006422:	d002      	beq.n	800642a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f000 faf0 	bl	8006a0a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	695b      	ldr	r3, [r3, #20]
 8006430:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006434:	2b40      	cmp	r3, #64	@ 0x40
 8006436:	bf0c      	ite	eq
 8006438:	2301      	moveq	r3, #1
 800643a:	2300      	movne	r3, #0
 800643c:	b2db      	uxtb	r3, r3
 800643e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006446:	f003 0308 	and.w	r3, r3, #8
 800644a:	2b00      	cmp	r3, #0
 800644c:	d103      	bne.n	8006456 <HAL_UART_IRQHandler+0x17a>
 800644e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006452:	2b00      	cmp	r3, #0
 8006454:	d04f      	beq.n	80064f6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 f9f8 	bl	800684c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	695b      	ldr	r3, [r3, #20]
 8006462:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006466:	2b40      	cmp	r3, #64	@ 0x40
 8006468:	d141      	bne.n	80064ee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	3314      	adds	r3, #20
 8006470:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006474:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006478:	e853 3f00 	ldrex	r3, [r3]
 800647c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006480:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006484:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006488:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	3314      	adds	r3, #20
 8006492:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006496:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800649a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800649e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80064a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80064a6:	e841 2300 	strex	r3, r2, [r1]
 80064aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80064ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d1d9      	bne.n	800646a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d013      	beq.n	80064e6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064c2:	4a7d      	ldr	r2, [pc, #500]	@ (80066b8 <HAL_UART_IRQHandler+0x3dc>)
 80064c4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064ca:	4618      	mov	r0, r3
 80064cc:	f7fc feac 	bl	8003228 <HAL_DMA_Abort_IT>
 80064d0:	4603      	mov	r3, r0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d016      	beq.n	8006504 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064dc:	687a      	ldr	r2, [r7, #4]
 80064de:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80064e0:	4610      	mov	r0, r2
 80064e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064e4:	e00e      	b.n	8006504 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 f99a 	bl	8006820 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064ec:	e00a      	b.n	8006504 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 f996 	bl	8006820 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064f4:	e006      	b.n	8006504 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f000 f992 	bl	8006820 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2200      	movs	r2, #0
 8006500:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8006502:	e170      	b.n	80067e6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006504:	bf00      	nop
    return;
 8006506:	e16e      	b.n	80067e6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800650c:	2b01      	cmp	r3, #1
 800650e:	f040 814a 	bne.w	80067a6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006516:	f003 0310 	and.w	r3, r3, #16
 800651a:	2b00      	cmp	r3, #0
 800651c:	f000 8143 	beq.w	80067a6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006520:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006524:	f003 0310 	and.w	r3, r3, #16
 8006528:	2b00      	cmp	r3, #0
 800652a:	f000 813c 	beq.w	80067a6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800652e:	2300      	movs	r3, #0
 8006530:	60bb      	str	r3, [r7, #8]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	60bb      	str	r3, [r7, #8]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	60bb      	str	r3, [r7, #8]
 8006542:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	695b      	ldr	r3, [r3, #20]
 800654a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800654e:	2b40      	cmp	r3, #64	@ 0x40
 8006550:	f040 80b4 	bne.w	80066bc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006560:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006564:	2b00      	cmp	r3, #0
 8006566:	f000 8140 	beq.w	80067ea <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800656e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006572:	429a      	cmp	r2, r3
 8006574:	f080 8139 	bcs.w	80067ea <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800657e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006584:	69db      	ldr	r3, [r3, #28]
 8006586:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800658a:	f000 8088 	beq.w	800669e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	330c      	adds	r3, #12
 8006594:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006598:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800659c:	e853 3f00 	ldrex	r3, [r3]
 80065a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80065a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80065a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	330c      	adds	r3, #12
 80065b6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80065ba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80065be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80065c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80065ca:	e841 2300 	strex	r3, r2, [r1]
 80065ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80065d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d1d9      	bne.n	800658e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	3314      	adds	r3, #20
 80065e0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80065e4:	e853 3f00 	ldrex	r3, [r3]
 80065e8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80065ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80065ec:	f023 0301 	bic.w	r3, r3, #1
 80065f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	3314      	adds	r3, #20
 80065fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80065fe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006602:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006604:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006606:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800660a:	e841 2300 	strex	r3, r2, [r1]
 800660e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006610:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006612:	2b00      	cmp	r3, #0
 8006614:	d1e1      	bne.n	80065da <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	3314      	adds	r3, #20
 800661c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800661e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006620:	e853 3f00 	ldrex	r3, [r3]
 8006624:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006626:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006628:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800662c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	3314      	adds	r3, #20
 8006636:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800663a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800663c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800663e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006640:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006642:	e841 2300 	strex	r3, r2, [r1]
 8006646:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006648:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800664a:	2b00      	cmp	r3, #0
 800664c:	d1e3      	bne.n	8006616 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2220      	movs	r2, #32
 8006652:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2200      	movs	r2, #0
 800665a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	330c      	adds	r3, #12
 8006662:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006664:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006666:	e853 3f00 	ldrex	r3, [r3]
 800666a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800666c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800666e:	f023 0310 	bic.w	r3, r3, #16
 8006672:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	330c      	adds	r3, #12
 800667c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006680:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006682:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006684:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006686:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006688:	e841 2300 	strex	r3, r2, [r1]
 800668c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800668e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006690:	2b00      	cmp	r3, #0
 8006692:	d1e3      	bne.n	800665c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006698:	4618      	mov	r0, r3
 800669a:	f7fc fd55 	bl	8003148 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	1ad3      	subs	r3, r2, r3
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	4619      	mov	r1, r3
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f000 f8c0 	bl	8006834 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80066b4:	e099      	b.n	80067ea <HAL_UART_IRQHandler+0x50e>
 80066b6:	bf00      	nop
 80066b8:	08006913 	.word	0x08006913
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	1ad3      	subs	r3, r2, r3
 80066c8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	f000 808b 	beq.w	80067ee <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80066d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80066dc:	2b00      	cmp	r3, #0
 80066de:	f000 8086 	beq.w	80067ee <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	330c      	adds	r3, #12
 80066e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066ec:	e853 3f00 	ldrex	r3, [r3]
 80066f0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80066f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80066f8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	330c      	adds	r3, #12
 8006702:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006706:	647a      	str	r2, [r7, #68]	@ 0x44
 8006708:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800670a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800670c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800670e:	e841 2300 	strex	r3, r2, [r1]
 8006712:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006714:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006716:	2b00      	cmp	r3, #0
 8006718:	d1e3      	bne.n	80066e2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	3314      	adds	r3, #20
 8006720:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006724:	e853 3f00 	ldrex	r3, [r3]
 8006728:	623b      	str	r3, [r7, #32]
   return(result);
 800672a:	6a3b      	ldr	r3, [r7, #32]
 800672c:	f023 0301 	bic.w	r3, r3, #1
 8006730:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	3314      	adds	r3, #20
 800673a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800673e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006740:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006742:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006744:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006746:	e841 2300 	strex	r3, r2, [r1]
 800674a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800674c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800674e:	2b00      	cmp	r3, #0
 8006750:	d1e3      	bne.n	800671a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2220      	movs	r2, #32
 8006756:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	330c      	adds	r3, #12
 8006766:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	e853 3f00 	ldrex	r3, [r3]
 800676e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f023 0310 	bic.w	r3, r3, #16
 8006776:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	330c      	adds	r3, #12
 8006780:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006784:	61fa      	str	r2, [r7, #28]
 8006786:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006788:	69b9      	ldr	r1, [r7, #24]
 800678a:	69fa      	ldr	r2, [r7, #28]
 800678c:	e841 2300 	strex	r3, r2, [r1]
 8006790:	617b      	str	r3, [r7, #20]
   return(result);
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d1e3      	bne.n	8006760 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006798:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800679c:	4619      	mov	r1, r3
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f000 f848 	bl	8006834 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80067a4:	e023      	b.n	80067ee <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80067a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d009      	beq.n	80067c6 <HAL_UART_IRQHandler+0x4ea>
 80067b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d003      	beq.n	80067c6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 f8bb 	bl	800693a <UART_Transmit_IT>
    return;
 80067c4:	e014      	b.n	80067f0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80067c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d00e      	beq.n	80067f0 <HAL_UART_IRQHandler+0x514>
 80067d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d008      	beq.n	80067f0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f000 f8fb 	bl	80069da <UART_EndTransmit_IT>
    return;
 80067e4:	e004      	b.n	80067f0 <HAL_UART_IRQHandler+0x514>
    return;
 80067e6:	bf00      	nop
 80067e8:	e002      	b.n	80067f0 <HAL_UART_IRQHandler+0x514>
      return;
 80067ea:	bf00      	nop
 80067ec:	e000      	b.n	80067f0 <HAL_UART_IRQHandler+0x514>
      return;
 80067ee:	bf00      	nop
  }
}
 80067f0:	37e8      	adds	r7, #232	@ 0xe8
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}
 80067f6:	bf00      	nop

080067f8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b083      	sub	sp, #12
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006800:	bf00      	nop
 8006802:	370c      	adds	r7, #12
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr

0800680c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800680c:	b480      	push	{r7}
 800680e:	b083      	sub	sp, #12
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006814:	bf00      	nop
 8006816:	370c      	adds	r7, #12
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr

08006820 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006820:	b480      	push	{r7}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006828:	bf00      	nop
 800682a:	370c      	adds	r7, #12
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr

08006834 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006834:	b480      	push	{r7}
 8006836:	b083      	sub	sp, #12
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	460b      	mov	r3, r1
 800683e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006840:	bf00      	nop
 8006842:	370c      	adds	r7, #12
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr

0800684c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800684c:	b480      	push	{r7}
 800684e:	b095      	sub	sp, #84	@ 0x54
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	330c      	adds	r3, #12
 800685a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800685c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800685e:	e853 3f00 	ldrex	r3, [r3]
 8006862:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006866:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800686a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	330c      	adds	r3, #12
 8006872:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006874:	643a      	str	r2, [r7, #64]	@ 0x40
 8006876:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006878:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800687a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800687c:	e841 2300 	strex	r3, r2, [r1]
 8006880:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006884:	2b00      	cmp	r3, #0
 8006886:	d1e5      	bne.n	8006854 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	3314      	adds	r3, #20
 800688e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006890:	6a3b      	ldr	r3, [r7, #32]
 8006892:	e853 3f00 	ldrex	r3, [r3]
 8006896:	61fb      	str	r3, [r7, #28]
   return(result);
 8006898:	69fb      	ldr	r3, [r7, #28]
 800689a:	f023 0301 	bic.w	r3, r3, #1
 800689e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	3314      	adds	r3, #20
 80068a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80068a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80068aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80068ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80068b0:	e841 2300 	strex	r3, r2, [r1]
 80068b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80068b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d1e5      	bne.n	8006888 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	d119      	bne.n	80068f8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	330c      	adds	r3, #12
 80068ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	e853 3f00 	ldrex	r3, [r3]
 80068d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	f023 0310 	bic.w	r3, r3, #16
 80068da:	647b      	str	r3, [r7, #68]	@ 0x44
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	330c      	adds	r3, #12
 80068e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80068e4:	61ba      	str	r2, [r7, #24]
 80068e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e8:	6979      	ldr	r1, [r7, #20]
 80068ea:	69ba      	ldr	r2, [r7, #24]
 80068ec:	e841 2300 	strex	r3, r2, [r1]
 80068f0:	613b      	str	r3, [r7, #16]
   return(result);
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d1e5      	bne.n	80068c4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2220      	movs	r2, #32
 80068fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2200      	movs	r2, #0
 8006904:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006906:	bf00      	nop
 8006908:	3754      	adds	r7, #84	@ 0x54
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr

08006912 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006912:	b580      	push	{r7, lr}
 8006914:	b084      	sub	sp, #16
 8006916:	af00      	add	r7, sp, #0
 8006918:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800691e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2200      	movs	r2, #0
 8006924:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2200      	movs	r2, #0
 800692a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800692c:	68f8      	ldr	r0, [r7, #12]
 800692e:	f7ff ff77 	bl	8006820 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006932:	bf00      	nop
 8006934:	3710      	adds	r7, #16
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}

0800693a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800693a:	b480      	push	{r7}
 800693c:	b085      	sub	sp, #20
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006948:	b2db      	uxtb	r3, r3
 800694a:	2b21      	cmp	r3, #33	@ 0x21
 800694c:	d13e      	bne.n	80069cc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	689b      	ldr	r3, [r3, #8]
 8006952:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006956:	d114      	bne.n	8006982 <UART_Transmit_IT+0x48>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	691b      	ldr	r3, [r3, #16]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d110      	bne.n	8006982 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6a1b      	ldr	r3, [r3, #32]
 8006964:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	881b      	ldrh	r3, [r3, #0]
 800696a:	461a      	mov	r2, r3
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006974:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6a1b      	ldr	r3, [r3, #32]
 800697a:	1c9a      	adds	r2, r3, #2
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	621a      	str	r2, [r3, #32]
 8006980:	e008      	b.n	8006994 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6a1b      	ldr	r3, [r3, #32]
 8006986:	1c59      	adds	r1, r3, #1
 8006988:	687a      	ldr	r2, [r7, #4]
 800698a:	6211      	str	r1, [r2, #32]
 800698c:	781a      	ldrb	r2, [r3, #0]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006998:	b29b      	uxth	r3, r3
 800699a:	3b01      	subs	r3, #1
 800699c:	b29b      	uxth	r3, r3
 800699e:	687a      	ldr	r2, [r7, #4]
 80069a0:	4619      	mov	r1, r3
 80069a2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d10f      	bne.n	80069c8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	68da      	ldr	r2, [r3, #12]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80069b6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	68da      	ldr	r2, [r3, #12]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80069c6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80069c8:	2300      	movs	r3, #0
 80069ca:	e000      	b.n	80069ce <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80069cc:	2302      	movs	r3, #2
  }
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3714      	adds	r7, #20
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr

080069da <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80069da:	b580      	push	{r7, lr}
 80069dc:	b082      	sub	sp, #8
 80069de:	af00      	add	r7, sp, #0
 80069e0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	68da      	ldr	r2, [r3, #12]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80069f0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2220      	movs	r2, #32
 80069f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f7ff fefc 	bl	80067f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006a00:	2300      	movs	r3, #0
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	3708      	adds	r7, #8
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}

08006a0a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006a0a:	b580      	push	{r7, lr}
 8006a0c:	b08c      	sub	sp, #48	@ 0x30
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	2b22      	cmp	r3, #34	@ 0x22
 8006a1c:	f040 80ab 	bne.w	8006b76 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	689b      	ldr	r3, [r3, #8]
 8006a24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a28:	d117      	bne.n	8006a5a <UART_Receive_IT+0x50>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	691b      	ldr	r3, [r3, #16]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d113      	bne.n	8006a5a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006a32:	2300      	movs	r3, #0
 8006a34:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a3a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a48:	b29a      	uxth	r2, r3
 8006a4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a4c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a52:	1c9a      	adds	r2, r3, #2
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	629a      	str	r2, [r3, #40]	@ 0x28
 8006a58:	e026      	b.n	8006aa8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006a60:	2300      	movs	r3, #0
 8006a62:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a6c:	d007      	beq.n	8006a7e <UART_Receive_IT+0x74>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d10a      	bne.n	8006a8c <UART_Receive_IT+0x82>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	691b      	ldr	r3, [r3, #16]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d106      	bne.n	8006a8c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	b2da      	uxtb	r2, r3
 8006a86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a88:	701a      	strb	r2, [r3, #0]
 8006a8a:	e008      	b.n	8006a9e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	b2db      	uxtb	r3, r3
 8006a94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a98:	b2da      	uxtb	r2, r3
 8006a9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a9c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aa2:	1c5a      	adds	r2, r3, #1
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	3b01      	subs	r3, #1
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	4619      	mov	r1, r3
 8006ab6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d15a      	bne.n	8006b72 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	68da      	ldr	r2, [r3, #12]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f022 0220 	bic.w	r2, r2, #32
 8006aca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	68da      	ldr	r2, [r3, #12]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006ada:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	695a      	ldr	r2, [r3, #20]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f022 0201 	bic.w	r2, r2, #1
 8006aea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2220      	movs	r2, #32
 8006af0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d135      	bne.n	8006b68 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2200      	movs	r2, #0
 8006b00:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	330c      	adds	r3, #12
 8006b08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	e853 3f00 	ldrex	r3, [r3]
 8006b10:	613b      	str	r3, [r7, #16]
   return(result);
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	f023 0310 	bic.w	r3, r3, #16
 8006b18:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	330c      	adds	r3, #12
 8006b20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b22:	623a      	str	r2, [r7, #32]
 8006b24:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b26:	69f9      	ldr	r1, [r7, #28]
 8006b28:	6a3a      	ldr	r2, [r7, #32]
 8006b2a:	e841 2300 	strex	r3, r2, [r1]
 8006b2e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b30:	69bb      	ldr	r3, [r7, #24]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d1e5      	bne.n	8006b02 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f003 0310 	and.w	r3, r3, #16
 8006b40:	2b10      	cmp	r3, #16
 8006b42:	d10a      	bne.n	8006b5a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006b44:	2300      	movs	r3, #0
 8006b46:	60fb      	str	r3, [r7, #12]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	60fb      	str	r3, [r7, #12]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	60fb      	str	r3, [r7, #12]
 8006b58:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006b5e:	4619      	mov	r1, r3
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f7ff fe67 	bl	8006834 <HAL_UARTEx_RxEventCallback>
 8006b66:	e002      	b.n	8006b6e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f7ff fe4f 	bl	800680c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	e002      	b.n	8006b78 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006b72:	2300      	movs	r3, #0
 8006b74:	e000      	b.n	8006b78 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006b76:	2302      	movs	r3, #2
  }
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3730      	adds	r7, #48	@ 0x30
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}

08006b80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b84:	b0c0      	sub	sp, #256	@ 0x100
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	691b      	ldr	r3, [r3, #16]
 8006b94:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b9c:	68d9      	ldr	r1, [r3, #12]
 8006b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	ea40 0301 	orr.w	r3, r0, r1
 8006ba8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bae:	689a      	ldr	r2, [r3, #8]
 8006bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bb4:	691b      	ldr	r3, [r3, #16]
 8006bb6:	431a      	orrs	r2, r3
 8006bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bbc:	695b      	ldr	r3, [r3, #20]
 8006bbe:	431a      	orrs	r2, r3
 8006bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bc4:	69db      	ldr	r3, [r3, #28]
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	68db      	ldr	r3, [r3, #12]
 8006bd4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006bd8:	f021 010c 	bic.w	r1, r1, #12
 8006bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006be6:	430b      	orrs	r3, r1
 8006be8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006bea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	695b      	ldr	r3, [r3, #20]
 8006bf2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bfa:	6999      	ldr	r1, [r3, #24]
 8006bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c00:	681a      	ldr	r2, [r3, #0]
 8006c02:	ea40 0301 	orr.w	r3, r0, r1
 8006c06:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c0c:	681a      	ldr	r2, [r3, #0]
 8006c0e:	4b8f      	ldr	r3, [pc, #572]	@ (8006e4c <UART_SetConfig+0x2cc>)
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d005      	beq.n	8006c20 <UART_SetConfig+0xa0>
 8006c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c18:	681a      	ldr	r2, [r3, #0]
 8006c1a:	4b8d      	ldr	r3, [pc, #564]	@ (8006e50 <UART_SetConfig+0x2d0>)
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d104      	bne.n	8006c2a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006c20:	f7fe fb34 	bl	800528c <HAL_RCC_GetPCLK2Freq>
 8006c24:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006c28:	e003      	b.n	8006c32 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006c2a:	f7fe fb1b 	bl	8005264 <HAL_RCC_GetPCLK1Freq>
 8006c2e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c36:	69db      	ldr	r3, [r3, #28]
 8006c38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c3c:	f040 810c 	bne.w	8006e58 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006c40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c44:	2200      	movs	r2, #0
 8006c46:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006c4a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006c4e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006c52:	4622      	mov	r2, r4
 8006c54:	462b      	mov	r3, r5
 8006c56:	1891      	adds	r1, r2, r2
 8006c58:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006c5a:	415b      	adcs	r3, r3
 8006c5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006c5e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006c62:	4621      	mov	r1, r4
 8006c64:	eb12 0801 	adds.w	r8, r2, r1
 8006c68:	4629      	mov	r1, r5
 8006c6a:	eb43 0901 	adc.w	r9, r3, r1
 8006c6e:	f04f 0200 	mov.w	r2, #0
 8006c72:	f04f 0300 	mov.w	r3, #0
 8006c76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006c7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006c7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006c82:	4690      	mov	r8, r2
 8006c84:	4699      	mov	r9, r3
 8006c86:	4623      	mov	r3, r4
 8006c88:	eb18 0303 	adds.w	r3, r8, r3
 8006c8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006c90:	462b      	mov	r3, r5
 8006c92:	eb49 0303 	adc.w	r3, r9, r3
 8006c96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006c9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006ca6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006caa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006cae:	460b      	mov	r3, r1
 8006cb0:	18db      	adds	r3, r3, r3
 8006cb2:	653b      	str	r3, [r7, #80]	@ 0x50
 8006cb4:	4613      	mov	r3, r2
 8006cb6:	eb42 0303 	adc.w	r3, r2, r3
 8006cba:	657b      	str	r3, [r7, #84]	@ 0x54
 8006cbc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006cc0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006cc4:	f7f9 ff6c 	bl	8000ba0 <__aeabi_uldivmod>
 8006cc8:	4602      	mov	r2, r0
 8006cca:	460b      	mov	r3, r1
 8006ccc:	4b61      	ldr	r3, [pc, #388]	@ (8006e54 <UART_SetConfig+0x2d4>)
 8006cce:	fba3 2302 	umull	r2, r3, r3, r2
 8006cd2:	095b      	lsrs	r3, r3, #5
 8006cd4:	011c      	lsls	r4, r3, #4
 8006cd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006cda:	2200      	movs	r2, #0
 8006cdc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006ce0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006ce4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006ce8:	4642      	mov	r2, r8
 8006cea:	464b      	mov	r3, r9
 8006cec:	1891      	adds	r1, r2, r2
 8006cee:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006cf0:	415b      	adcs	r3, r3
 8006cf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006cf4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006cf8:	4641      	mov	r1, r8
 8006cfa:	eb12 0a01 	adds.w	sl, r2, r1
 8006cfe:	4649      	mov	r1, r9
 8006d00:	eb43 0b01 	adc.w	fp, r3, r1
 8006d04:	f04f 0200 	mov.w	r2, #0
 8006d08:	f04f 0300 	mov.w	r3, #0
 8006d0c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006d10:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006d14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d18:	4692      	mov	sl, r2
 8006d1a:	469b      	mov	fp, r3
 8006d1c:	4643      	mov	r3, r8
 8006d1e:	eb1a 0303 	adds.w	r3, sl, r3
 8006d22:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006d26:	464b      	mov	r3, r9
 8006d28:	eb4b 0303 	adc.w	r3, fp, r3
 8006d2c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	2200      	movs	r2, #0
 8006d38:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006d3c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006d40:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006d44:	460b      	mov	r3, r1
 8006d46:	18db      	adds	r3, r3, r3
 8006d48:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d4a:	4613      	mov	r3, r2
 8006d4c:	eb42 0303 	adc.w	r3, r2, r3
 8006d50:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d52:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006d56:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006d5a:	f7f9 ff21 	bl	8000ba0 <__aeabi_uldivmod>
 8006d5e:	4602      	mov	r2, r0
 8006d60:	460b      	mov	r3, r1
 8006d62:	4611      	mov	r1, r2
 8006d64:	4b3b      	ldr	r3, [pc, #236]	@ (8006e54 <UART_SetConfig+0x2d4>)
 8006d66:	fba3 2301 	umull	r2, r3, r3, r1
 8006d6a:	095b      	lsrs	r3, r3, #5
 8006d6c:	2264      	movs	r2, #100	@ 0x64
 8006d6e:	fb02 f303 	mul.w	r3, r2, r3
 8006d72:	1acb      	subs	r3, r1, r3
 8006d74:	00db      	lsls	r3, r3, #3
 8006d76:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006d7a:	4b36      	ldr	r3, [pc, #216]	@ (8006e54 <UART_SetConfig+0x2d4>)
 8006d7c:	fba3 2302 	umull	r2, r3, r3, r2
 8006d80:	095b      	lsrs	r3, r3, #5
 8006d82:	005b      	lsls	r3, r3, #1
 8006d84:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006d88:	441c      	add	r4, r3
 8006d8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d8e:	2200      	movs	r2, #0
 8006d90:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006d94:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006d98:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006d9c:	4642      	mov	r2, r8
 8006d9e:	464b      	mov	r3, r9
 8006da0:	1891      	adds	r1, r2, r2
 8006da2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006da4:	415b      	adcs	r3, r3
 8006da6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006da8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006dac:	4641      	mov	r1, r8
 8006dae:	1851      	adds	r1, r2, r1
 8006db0:	6339      	str	r1, [r7, #48]	@ 0x30
 8006db2:	4649      	mov	r1, r9
 8006db4:	414b      	adcs	r3, r1
 8006db6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006db8:	f04f 0200 	mov.w	r2, #0
 8006dbc:	f04f 0300 	mov.w	r3, #0
 8006dc0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006dc4:	4659      	mov	r1, fp
 8006dc6:	00cb      	lsls	r3, r1, #3
 8006dc8:	4651      	mov	r1, sl
 8006dca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006dce:	4651      	mov	r1, sl
 8006dd0:	00ca      	lsls	r2, r1, #3
 8006dd2:	4610      	mov	r0, r2
 8006dd4:	4619      	mov	r1, r3
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	4642      	mov	r2, r8
 8006dda:	189b      	adds	r3, r3, r2
 8006ddc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006de0:	464b      	mov	r3, r9
 8006de2:	460a      	mov	r2, r1
 8006de4:	eb42 0303 	adc.w	r3, r2, r3
 8006de8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	2200      	movs	r2, #0
 8006df4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006df8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006dfc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006e00:	460b      	mov	r3, r1
 8006e02:	18db      	adds	r3, r3, r3
 8006e04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e06:	4613      	mov	r3, r2
 8006e08:	eb42 0303 	adc.w	r3, r2, r3
 8006e0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006e12:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006e16:	f7f9 fec3 	bl	8000ba0 <__aeabi_uldivmod>
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8006e54 <UART_SetConfig+0x2d4>)
 8006e20:	fba3 1302 	umull	r1, r3, r3, r2
 8006e24:	095b      	lsrs	r3, r3, #5
 8006e26:	2164      	movs	r1, #100	@ 0x64
 8006e28:	fb01 f303 	mul.w	r3, r1, r3
 8006e2c:	1ad3      	subs	r3, r2, r3
 8006e2e:	00db      	lsls	r3, r3, #3
 8006e30:	3332      	adds	r3, #50	@ 0x32
 8006e32:	4a08      	ldr	r2, [pc, #32]	@ (8006e54 <UART_SetConfig+0x2d4>)
 8006e34:	fba2 2303 	umull	r2, r3, r2, r3
 8006e38:	095b      	lsrs	r3, r3, #5
 8006e3a:	f003 0207 	and.w	r2, r3, #7
 8006e3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4422      	add	r2, r4
 8006e46:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006e48:	e106      	b.n	8007058 <UART_SetConfig+0x4d8>
 8006e4a:	bf00      	nop
 8006e4c:	40011000 	.word	0x40011000
 8006e50:	40011400 	.word	0x40011400
 8006e54:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006e58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006e62:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006e66:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006e6a:	4642      	mov	r2, r8
 8006e6c:	464b      	mov	r3, r9
 8006e6e:	1891      	adds	r1, r2, r2
 8006e70:	6239      	str	r1, [r7, #32]
 8006e72:	415b      	adcs	r3, r3
 8006e74:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006e7a:	4641      	mov	r1, r8
 8006e7c:	1854      	adds	r4, r2, r1
 8006e7e:	4649      	mov	r1, r9
 8006e80:	eb43 0501 	adc.w	r5, r3, r1
 8006e84:	f04f 0200 	mov.w	r2, #0
 8006e88:	f04f 0300 	mov.w	r3, #0
 8006e8c:	00eb      	lsls	r3, r5, #3
 8006e8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e92:	00e2      	lsls	r2, r4, #3
 8006e94:	4614      	mov	r4, r2
 8006e96:	461d      	mov	r5, r3
 8006e98:	4643      	mov	r3, r8
 8006e9a:	18e3      	adds	r3, r4, r3
 8006e9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006ea0:	464b      	mov	r3, r9
 8006ea2:	eb45 0303 	adc.w	r3, r5, r3
 8006ea6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006eb6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006eba:	f04f 0200 	mov.w	r2, #0
 8006ebe:	f04f 0300 	mov.w	r3, #0
 8006ec2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006ec6:	4629      	mov	r1, r5
 8006ec8:	008b      	lsls	r3, r1, #2
 8006eca:	4621      	mov	r1, r4
 8006ecc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ed0:	4621      	mov	r1, r4
 8006ed2:	008a      	lsls	r2, r1, #2
 8006ed4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006ed8:	f7f9 fe62 	bl	8000ba0 <__aeabi_uldivmod>
 8006edc:	4602      	mov	r2, r0
 8006ede:	460b      	mov	r3, r1
 8006ee0:	4b60      	ldr	r3, [pc, #384]	@ (8007064 <UART_SetConfig+0x4e4>)
 8006ee2:	fba3 2302 	umull	r2, r3, r3, r2
 8006ee6:	095b      	lsrs	r3, r3, #5
 8006ee8:	011c      	lsls	r4, r3, #4
 8006eea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006eee:	2200      	movs	r2, #0
 8006ef0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006ef4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006ef8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006efc:	4642      	mov	r2, r8
 8006efe:	464b      	mov	r3, r9
 8006f00:	1891      	adds	r1, r2, r2
 8006f02:	61b9      	str	r1, [r7, #24]
 8006f04:	415b      	adcs	r3, r3
 8006f06:	61fb      	str	r3, [r7, #28]
 8006f08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f0c:	4641      	mov	r1, r8
 8006f0e:	1851      	adds	r1, r2, r1
 8006f10:	6139      	str	r1, [r7, #16]
 8006f12:	4649      	mov	r1, r9
 8006f14:	414b      	adcs	r3, r1
 8006f16:	617b      	str	r3, [r7, #20]
 8006f18:	f04f 0200 	mov.w	r2, #0
 8006f1c:	f04f 0300 	mov.w	r3, #0
 8006f20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006f24:	4659      	mov	r1, fp
 8006f26:	00cb      	lsls	r3, r1, #3
 8006f28:	4651      	mov	r1, sl
 8006f2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f2e:	4651      	mov	r1, sl
 8006f30:	00ca      	lsls	r2, r1, #3
 8006f32:	4610      	mov	r0, r2
 8006f34:	4619      	mov	r1, r3
 8006f36:	4603      	mov	r3, r0
 8006f38:	4642      	mov	r2, r8
 8006f3a:	189b      	adds	r3, r3, r2
 8006f3c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006f40:	464b      	mov	r3, r9
 8006f42:	460a      	mov	r2, r1
 8006f44:	eb42 0303 	adc.w	r3, r2, r3
 8006f48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	2200      	movs	r2, #0
 8006f54:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006f56:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006f58:	f04f 0200 	mov.w	r2, #0
 8006f5c:	f04f 0300 	mov.w	r3, #0
 8006f60:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006f64:	4649      	mov	r1, r9
 8006f66:	008b      	lsls	r3, r1, #2
 8006f68:	4641      	mov	r1, r8
 8006f6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f6e:	4641      	mov	r1, r8
 8006f70:	008a      	lsls	r2, r1, #2
 8006f72:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006f76:	f7f9 fe13 	bl	8000ba0 <__aeabi_uldivmod>
 8006f7a:	4602      	mov	r2, r0
 8006f7c:	460b      	mov	r3, r1
 8006f7e:	4611      	mov	r1, r2
 8006f80:	4b38      	ldr	r3, [pc, #224]	@ (8007064 <UART_SetConfig+0x4e4>)
 8006f82:	fba3 2301 	umull	r2, r3, r3, r1
 8006f86:	095b      	lsrs	r3, r3, #5
 8006f88:	2264      	movs	r2, #100	@ 0x64
 8006f8a:	fb02 f303 	mul.w	r3, r2, r3
 8006f8e:	1acb      	subs	r3, r1, r3
 8006f90:	011b      	lsls	r3, r3, #4
 8006f92:	3332      	adds	r3, #50	@ 0x32
 8006f94:	4a33      	ldr	r2, [pc, #204]	@ (8007064 <UART_SetConfig+0x4e4>)
 8006f96:	fba2 2303 	umull	r2, r3, r2, r3
 8006f9a:	095b      	lsrs	r3, r3, #5
 8006f9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006fa0:	441c      	add	r4, r3
 8006fa2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	673b      	str	r3, [r7, #112]	@ 0x70
 8006faa:	677a      	str	r2, [r7, #116]	@ 0x74
 8006fac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006fb0:	4642      	mov	r2, r8
 8006fb2:	464b      	mov	r3, r9
 8006fb4:	1891      	adds	r1, r2, r2
 8006fb6:	60b9      	str	r1, [r7, #8]
 8006fb8:	415b      	adcs	r3, r3
 8006fba:	60fb      	str	r3, [r7, #12]
 8006fbc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006fc0:	4641      	mov	r1, r8
 8006fc2:	1851      	adds	r1, r2, r1
 8006fc4:	6039      	str	r1, [r7, #0]
 8006fc6:	4649      	mov	r1, r9
 8006fc8:	414b      	adcs	r3, r1
 8006fca:	607b      	str	r3, [r7, #4]
 8006fcc:	f04f 0200 	mov.w	r2, #0
 8006fd0:	f04f 0300 	mov.w	r3, #0
 8006fd4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006fd8:	4659      	mov	r1, fp
 8006fda:	00cb      	lsls	r3, r1, #3
 8006fdc:	4651      	mov	r1, sl
 8006fde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006fe2:	4651      	mov	r1, sl
 8006fe4:	00ca      	lsls	r2, r1, #3
 8006fe6:	4610      	mov	r0, r2
 8006fe8:	4619      	mov	r1, r3
 8006fea:	4603      	mov	r3, r0
 8006fec:	4642      	mov	r2, r8
 8006fee:	189b      	adds	r3, r3, r2
 8006ff0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006ff2:	464b      	mov	r3, r9
 8006ff4:	460a      	mov	r2, r1
 8006ff6:	eb42 0303 	adc.w	r3, r2, r3
 8006ffa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	2200      	movs	r2, #0
 8007004:	663b      	str	r3, [r7, #96]	@ 0x60
 8007006:	667a      	str	r2, [r7, #100]	@ 0x64
 8007008:	f04f 0200 	mov.w	r2, #0
 800700c:	f04f 0300 	mov.w	r3, #0
 8007010:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007014:	4649      	mov	r1, r9
 8007016:	008b      	lsls	r3, r1, #2
 8007018:	4641      	mov	r1, r8
 800701a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800701e:	4641      	mov	r1, r8
 8007020:	008a      	lsls	r2, r1, #2
 8007022:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007026:	f7f9 fdbb 	bl	8000ba0 <__aeabi_uldivmod>
 800702a:	4602      	mov	r2, r0
 800702c:	460b      	mov	r3, r1
 800702e:	4b0d      	ldr	r3, [pc, #52]	@ (8007064 <UART_SetConfig+0x4e4>)
 8007030:	fba3 1302 	umull	r1, r3, r3, r2
 8007034:	095b      	lsrs	r3, r3, #5
 8007036:	2164      	movs	r1, #100	@ 0x64
 8007038:	fb01 f303 	mul.w	r3, r1, r3
 800703c:	1ad3      	subs	r3, r2, r3
 800703e:	011b      	lsls	r3, r3, #4
 8007040:	3332      	adds	r3, #50	@ 0x32
 8007042:	4a08      	ldr	r2, [pc, #32]	@ (8007064 <UART_SetConfig+0x4e4>)
 8007044:	fba2 2303 	umull	r2, r3, r2, r3
 8007048:	095b      	lsrs	r3, r3, #5
 800704a:	f003 020f 	and.w	r2, r3, #15
 800704e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4422      	add	r2, r4
 8007056:	609a      	str	r2, [r3, #8]
}
 8007058:	bf00      	nop
 800705a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800705e:	46bd      	mov	sp, r7
 8007060:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007064:	51eb851f 	.word	0x51eb851f

08007068 <memset>:
 8007068:	4402      	add	r2, r0
 800706a:	4603      	mov	r3, r0
 800706c:	4293      	cmp	r3, r2
 800706e:	d100      	bne.n	8007072 <memset+0xa>
 8007070:	4770      	bx	lr
 8007072:	f803 1b01 	strb.w	r1, [r3], #1
 8007076:	e7f9      	b.n	800706c <memset+0x4>

08007078 <__errno>:
 8007078:	4b01      	ldr	r3, [pc, #4]	@ (8007080 <__errno+0x8>)
 800707a:	6818      	ldr	r0, [r3, #0]
 800707c:	4770      	bx	lr
 800707e:	bf00      	nop
 8007080:	20000054 	.word	0x20000054

08007084 <__libc_init_array>:
 8007084:	b570      	push	{r4, r5, r6, lr}
 8007086:	4d0d      	ldr	r5, [pc, #52]	@ (80070bc <__libc_init_array+0x38>)
 8007088:	4c0d      	ldr	r4, [pc, #52]	@ (80070c0 <__libc_init_array+0x3c>)
 800708a:	1b64      	subs	r4, r4, r5
 800708c:	10a4      	asrs	r4, r4, #2
 800708e:	2600      	movs	r6, #0
 8007090:	42a6      	cmp	r6, r4
 8007092:	d109      	bne.n	80070a8 <__libc_init_array+0x24>
 8007094:	4d0b      	ldr	r5, [pc, #44]	@ (80070c4 <__libc_init_array+0x40>)
 8007096:	4c0c      	ldr	r4, [pc, #48]	@ (80070c8 <__libc_init_array+0x44>)
 8007098:	f001 fb92 	bl	80087c0 <_init>
 800709c:	1b64      	subs	r4, r4, r5
 800709e:	10a4      	asrs	r4, r4, #2
 80070a0:	2600      	movs	r6, #0
 80070a2:	42a6      	cmp	r6, r4
 80070a4:	d105      	bne.n	80070b2 <__libc_init_array+0x2e>
 80070a6:	bd70      	pop	{r4, r5, r6, pc}
 80070a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80070ac:	4798      	blx	r3
 80070ae:	3601      	adds	r6, #1
 80070b0:	e7ee      	b.n	8007090 <__libc_init_array+0xc>
 80070b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80070b6:	4798      	blx	r3
 80070b8:	3601      	adds	r6, #1
 80070ba:	e7f2      	b.n	80070a2 <__libc_init_array+0x1e>
 80070bc:	080089e0 	.word	0x080089e0
 80070c0:	080089e0 	.word	0x080089e0
 80070c4:	080089e0 	.word	0x080089e0
 80070c8:	080089e4 	.word	0x080089e4

080070cc <asin>:
 80070cc:	b538      	push	{r3, r4, r5, lr}
 80070ce:	ed2d 8b02 	vpush	{d8}
 80070d2:	ec55 4b10 	vmov	r4, r5, d0
 80070d6:	f000 fb1f 	bl	8007718 <__ieee754_asin>
 80070da:	4622      	mov	r2, r4
 80070dc:	462b      	mov	r3, r5
 80070de:	4620      	mov	r0, r4
 80070e0:	4629      	mov	r1, r5
 80070e2:	eeb0 8a40 	vmov.f32	s16, s0
 80070e6:	eef0 8a60 	vmov.f32	s17, s1
 80070ea:	f7f9 fccb 	bl	8000a84 <__aeabi_dcmpun>
 80070ee:	b9a8      	cbnz	r0, 800711c <asin+0x50>
 80070f0:	ec45 4b10 	vmov	d0, r4, r5
 80070f4:	f000 f84a 	bl	800718c <fabs>
 80070f8:	4b0c      	ldr	r3, [pc, #48]	@ (800712c <asin+0x60>)
 80070fa:	ec51 0b10 	vmov	r0, r1, d0
 80070fe:	2200      	movs	r2, #0
 8007100:	f7f9 fcb6 	bl	8000a70 <__aeabi_dcmpgt>
 8007104:	b150      	cbz	r0, 800711c <asin+0x50>
 8007106:	f7ff ffb7 	bl	8007078 <__errno>
 800710a:	ecbd 8b02 	vpop	{d8}
 800710e:	2321      	movs	r3, #33	@ 0x21
 8007110:	6003      	str	r3, [r0, #0]
 8007112:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007116:	4806      	ldr	r0, [pc, #24]	@ (8007130 <asin+0x64>)
 8007118:	f000 b896 	b.w	8007248 <nan>
 800711c:	eeb0 0a48 	vmov.f32	s0, s16
 8007120:	eef0 0a68 	vmov.f32	s1, s17
 8007124:	ecbd 8b02 	vpop	{d8}
 8007128:	bd38      	pop	{r3, r4, r5, pc}
 800712a:	bf00      	nop
 800712c:	3ff00000 	.word	0x3ff00000
 8007130:	080087f8 	.word	0x080087f8

08007134 <sqrt>:
 8007134:	b538      	push	{r3, r4, r5, lr}
 8007136:	ed2d 8b02 	vpush	{d8}
 800713a:	ec55 4b10 	vmov	r4, r5, d0
 800713e:	f000 f88b 	bl	8007258 <__ieee754_sqrt>
 8007142:	4622      	mov	r2, r4
 8007144:	462b      	mov	r3, r5
 8007146:	4620      	mov	r0, r4
 8007148:	4629      	mov	r1, r5
 800714a:	eeb0 8a40 	vmov.f32	s16, s0
 800714e:	eef0 8a60 	vmov.f32	s17, s1
 8007152:	f7f9 fc97 	bl	8000a84 <__aeabi_dcmpun>
 8007156:	b990      	cbnz	r0, 800717e <sqrt+0x4a>
 8007158:	2200      	movs	r2, #0
 800715a:	2300      	movs	r3, #0
 800715c:	4620      	mov	r0, r4
 800715e:	4629      	mov	r1, r5
 8007160:	f7f9 fc68 	bl	8000a34 <__aeabi_dcmplt>
 8007164:	b158      	cbz	r0, 800717e <sqrt+0x4a>
 8007166:	f7ff ff87 	bl	8007078 <__errno>
 800716a:	2321      	movs	r3, #33	@ 0x21
 800716c:	6003      	str	r3, [r0, #0]
 800716e:	2200      	movs	r2, #0
 8007170:	2300      	movs	r3, #0
 8007172:	4610      	mov	r0, r2
 8007174:	4619      	mov	r1, r3
 8007176:	f7f9 fb15 	bl	80007a4 <__aeabi_ddiv>
 800717a:	ec41 0b18 	vmov	d8, r0, r1
 800717e:	eeb0 0a48 	vmov.f32	s0, s16
 8007182:	eef0 0a68 	vmov.f32	s1, s17
 8007186:	ecbd 8b02 	vpop	{d8}
 800718a:	bd38      	pop	{r3, r4, r5, pc}

0800718c <fabs>:
 800718c:	ec51 0b10 	vmov	r0, r1, d0
 8007190:	4602      	mov	r2, r0
 8007192:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007196:	ec43 2b10 	vmov	d0, r2, r3
 800719a:	4770      	bx	lr
 800719c:	0000      	movs	r0, r0
	...

080071a0 <sin>:
 80071a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80071a2:	ec53 2b10 	vmov	r2, r3, d0
 80071a6:	4826      	ldr	r0, [pc, #152]	@ (8007240 <sin+0xa0>)
 80071a8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80071ac:	4281      	cmp	r1, r0
 80071ae:	d807      	bhi.n	80071c0 <sin+0x20>
 80071b0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8007238 <sin+0x98>
 80071b4:	2000      	movs	r0, #0
 80071b6:	b005      	add	sp, #20
 80071b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80071bc:	f000 b9f0 	b.w	80075a0 <__kernel_sin>
 80071c0:	4820      	ldr	r0, [pc, #128]	@ (8007244 <sin+0xa4>)
 80071c2:	4281      	cmp	r1, r0
 80071c4:	d908      	bls.n	80071d8 <sin+0x38>
 80071c6:	4610      	mov	r0, r2
 80071c8:	4619      	mov	r1, r3
 80071ca:	f7f9 f809 	bl	80001e0 <__aeabi_dsub>
 80071ce:	ec41 0b10 	vmov	d0, r0, r1
 80071d2:	b005      	add	sp, #20
 80071d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80071d8:	4668      	mov	r0, sp
 80071da:	f000 fca1 	bl	8007b20 <__ieee754_rem_pio2>
 80071de:	f000 0003 	and.w	r0, r0, #3
 80071e2:	2801      	cmp	r0, #1
 80071e4:	d00c      	beq.n	8007200 <sin+0x60>
 80071e6:	2802      	cmp	r0, #2
 80071e8:	d011      	beq.n	800720e <sin+0x6e>
 80071ea:	b9e8      	cbnz	r0, 8007228 <sin+0x88>
 80071ec:	ed9d 1b02 	vldr	d1, [sp, #8]
 80071f0:	ed9d 0b00 	vldr	d0, [sp]
 80071f4:	2001      	movs	r0, #1
 80071f6:	f000 f9d3 	bl	80075a0 <__kernel_sin>
 80071fa:	ec51 0b10 	vmov	r0, r1, d0
 80071fe:	e7e6      	b.n	80071ce <sin+0x2e>
 8007200:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007204:	ed9d 0b00 	vldr	d0, [sp]
 8007208:	f000 f902 	bl	8007410 <__kernel_cos>
 800720c:	e7f5      	b.n	80071fa <sin+0x5a>
 800720e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007212:	ed9d 0b00 	vldr	d0, [sp]
 8007216:	2001      	movs	r0, #1
 8007218:	f000 f9c2 	bl	80075a0 <__kernel_sin>
 800721c:	ec53 2b10 	vmov	r2, r3, d0
 8007220:	4610      	mov	r0, r2
 8007222:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8007226:	e7d2      	b.n	80071ce <sin+0x2e>
 8007228:	ed9d 1b02 	vldr	d1, [sp, #8]
 800722c:	ed9d 0b00 	vldr	d0, [sp]
 8007230:	f000 f8ee 	bl	8007410 <__kernel_cos>
 8007234:	e7f2      	b.n	800721c <sin+0x7c>
 8007236:	bf00      	nop
	...
 8007240:	3fe921fb 	.word	0x3fe921fb
 8007244:	7fefffff 	.word	0x7fefffff

08007248 <nan>:
 8007248:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007250 <nan+0x8>
 800724c:	4770      	bx	lr
 800724e:	bf00      	nop
 8007250:	00000000 	.word	0x00000000
 8007254:	7ff80000 	.word	0x7ff80000

08007258 <__ieee754_sqrt>:
 8007258:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800725c:	4a68      	ldr	r2, [pc, #416]	@ (8007400 <__ieee754_sqrt+0x1a8>)
 800725e:	ec55 4b10 	vmov	r4, r5, d0
 8007262:	43aa      	bics	r2, r5
 8007264:	462b      	mov	r3, r5
 8007266:	4621      	mov	r1, r4
 8007268:	d110      	bne.n	800728c <__ieee754_sqrt+0x34>
 800726a:	4622      	mov	r2, r4
 800726c:	4620      	mov	r0, r4
 800726e:	4629      	mov	r1, r5
 8007270:	f7f9 f96e 	bl	8000550 <__aeabi_dmul>
 8007274:	4602      	mov	r2, r0
 8007276:	460b      	mov	r3, r1
 8007278:	4620      	mov	r0, r4
 800727a:	4629      	mov	r1, r5
 800727c:	f7f8 ffb2 	bl	80001e4 <__adddf3>
 8007280:	4604      	mov	r4, r0
 8007282:	460d      	mov	r5, r1
 8007284:	ec45 4b10 	vmov	d0, r4, r5
 8007288:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800728c:	2d00      	cmp	r5, #0
 800728e:	dc0e      	bgt.n	80072ae <__ieee754_sqrt+0x56>
 8007290:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8007294:	4322      	orrs	r2, r4
 8007296:	d0f5      	beq.n	8007284 <__ieee754_sqrt+0x2c>
 8007298:	b19d      	cbz	r5, 80072c2 <__ieee754_sqrt+0x6a>
 800729a:	4622      	mov	r2, r4
 800729c:	4620      	mov	r0, r4
 800729e:	4629      	mov	r1, r5
 80072a0:	f7f8 ff9e 	bl	80001e0 <__aeabi_dsub>
 80072a4:	4602      	mov	r2, r0
 80072a6:	460b      	mov	r3, r1
 80072a8:	f7f9 fa7c 	bl	80007a4 <__aeabi_ddiv>
 80072ac:	e7e8      	b.n	8007280 <__ieee754_sqrt+0x28>
 80072ae:	152a      	asrs	r2, r5, #20
 80072b0:	d115      	bne.n	80072de <__ieee754_sqrt+0x86>
 80072b2:	2000      	movs	r0, #0
 80072b4:	e009      	b.n	80072ca <__ieee754_sqrt+0x72>
 80072b6:	0acb      	lsrs	r3, r1, #11
 80072b8:	3a15      	subs	r2, #21
 80072ba:	0549      	lsls	r1, r1, #21
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d0fa      	beq.n	80072b6 <__ieee754_sqrt+0x5e>
 80072c0:	e7f7      	b.n	80072b2 <__ieee754_sqrt+0x5a>
 80072c2:	462a      	mov	r2, r5
 80072c4:	e7fa      	b.n	80072bc <__ieee754_sqrt+0x64>
 80072c6:	005b      	lsls	r3, r3, #1
 80072c8:	3001      	adds	r0, #1
 80072ca:	02dc      	lsls	r4, r3, #11
 80072cc:	d5fb      	bpl.n	80072c6 <__ieee754_sqrt+0x6e>
 80072ce:	1e44      	subs	r4, r0, #1
 80072d0:	1b12      	subs	r2, r2, r4
 80072d2:	f1c0 0420 	rsb	r4, r0, #32
 80072d6:	fa21 f404 	lsr.w	r4, r1, r4
 80072da:	4323      	orrs	r3, r4
 80072dc:	4081      	lsls	r1, r0
 80072de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80072e2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 80072e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80072ea:	07d2      	lsls	r2, r2, #31
 80072ec:	bf5c      	itt	pl
 80072ee:	005b      	lslpl	r3, r3, #1
 80072f0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80072f4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80072f8:	bf58      	it	pl
 80072fa:	0049      	lslpl	r1, r1, #1
 80072fc:	2600      	movs	r6, #0
 80072fe:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8007302:	106d      	asrs	r5, r5, #1
 8007304:	0049      	lsls	r1, r1, #1
 8007306:	2016      	movs	r0, #22
 8007308:	4632      	mov	r2, r6
 800730a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800730e:	1917      	adds	r7, r2, r4
 8007310:	429f      	cmp	r7, r3
 8007312:	bfde      	ittt	le
 8007314:	193a      	addle	r2, r7, r4
 8007316:	1bdb      	suble	r3, r3, r7
 8007318:	1936      	addle	r6, r6, r4
 800731a:	0fcf      	lsrs	r7, r1, #31
 800731c:	3801      	subs	r0, #1
 800731e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8007322:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007326:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800732a:	d1f0      	bne.n	800730e <__ieee754_sqrt+0xb6>
 800732c:	4604      	mov	r4, r0
 800732e:	2720      	movs	r7, #32
 8007330:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8007334:	429a      	cmp	r2, r3
 8007336:	eb00 0e0c 	add.w	lr, r0, ip
 800733a:	db02      	blt.n	8007342 <__ieee754_sqrt+0xea>
 800733c:	d113      	bne.n	8007366 <__ieee754_sqrt+0x10e>
 800733e:	458e      	cmp	lr, r1
 8007340:	d811      	bhi.n	8007366 <__ieee754_sqrt+0x10e>
 8007342:	f1be 0f00 	cmp.w	lr, #0
 8007346:	eb0e 000c 	add.w	r0, lr, ip
 800734a:	da42      	bge.n	80073d2 <__ieee754_sqrt+0x17a>
 800734c:	2800      	cmp	r0, #0
 800734e:	db40      	blt.n	80073d2 <__ieee754_sqrt+0x17a>
 8007350:	f102 0801 	add.w	r8, r2, #1
 8007354:	1a9b      	subs	r3, r3, r2
 8007356:	458e      	cmp	lr, r1
 8007358:	bf88      	it	hi
 800735a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800735e:	eba1 010e 	sub.w	r1, r1, lr
 8007362:	4464      	add	r4, ip
 8007364:	4642      	mov	r2, r8
 8007366:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800736a:	3f01      	subs	r7, #1
 800736c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8007370:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007374:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8007378:	d1dc      	bne.n	8007334 <__ieee754_sqrt+0xdc>
 800737a:	4319      	orrs	r1, r3
 800737c:	d01b      	beq.n	80073b6 <__ieee754_sqrt+0x15e>
 800737e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8007404 <__ieee754_sqrt+0x1ac>
 8007382:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8007408 <__ieee754_sqrt+0x1b0>
 8007386:	e9da 0100 	ldrd	r0, r1, [sl]
 800738a:	e9db 2300 	ldrd	r2, r3, [fp]
 800738e:	f7f8 ff27 	bl	80001e0 <__aeabi_dsub>
 8007392:	e9da 8900 	ldrd	r8, r9, [sl]
 8007396:	4602      	mov	r2, r0
 8007398:	460b      	mov	r3, r1
 800739a:	4640      	mov	r0, r8
 800739c:	4649      	mov	r1, r9
 800739e:	f7f9 fb53 	bl	8000a48 <__aeabi_dcmple>
 80073a2:	b140      	cbz	r0, 80073b6 <__ieee754_sqrt+0x15e>
 80073a4:	f1b4 3fff 	cmp.w	r4, #4294967295
 80073a8:	e9da 0100 	ldrd	r0, r1, [sl]
 80073ac:	e9db 2300 	ldrd	r2, r3, [fp]
 80073b0:	d111      	bne.n	80073d6 <__ieee754_sqrt+0x17e>
 80073b2:	3601      	adds	r6, #1
 80073b4:	463c      	mov	r4, r7
 80073b6:	1072      	asrs	r2, r6, #1
 80073b8:	0863      	lsrs	r3, r4, #1
 80073ba:	07f1      	lsls	r1, r6, #31
 80073bc:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80073c0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80073c4:	bf48      	it	mi
 80073c6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80073ca:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 80073ce:	4618      	mov	r0, r3
 80073d0:	e756      	b.n	8007280 <__ieee754_sqrt+0x28>
 80073d2:	4690      	mov	r8, r2
 80073d4:	e7be      	b.n	8007354 <__ieee754_sqrt+0xfc>
 80073d6:	f7f8 ff05 	bl	80001e4 <__adddf3>
 80073da:	e9da 8900 	ldrd	r8, r9, [sl]
 80073de:	4602      	mov	r2, r0
 80073e0:	460b      	mov	r3, r1
 80073e2:	4640      	mov	r0, r8
 80073e4:	4649      	mov	r1, r9
 80073e6:	f7f9 fb25 	bl	8000a34 <__aeabi_dcmplt>
 80073ea:	b120      	cbz	r0, 80073f6 <__ieee754_sqrt+0x19e>
 80073ec:	1ca0      	adds	r0, r4, #2
 80073ee:	bf08      	it	eq
 80073f0:	3601      	addeq	r6, #1
 80073f2:	3402      	adds	r4, #2
 80073f4:	e7df      	b.n	80073b6 <__ieee754_sqrt+0x15e>
 80073f6:	1c63      	adds	r3, r4, #1
 80073f8:	f023 0401 	bic.w	r4, r3, #1
 80073fc:	e7db      	b.n	80073b6 <__ieee754_sqrt+0x15e>
 80073fe:	bf00      	nop
 8007400:	7ff00000 	.word	0x7ff00000
 8007404:	200000b0 	.word	0x200000b0
 8007408:	200000a8 	.word	0x200000a8
 800740c:	00000000 	.word	0x00000000

08007410 <__kernel_cos>:
 8007410:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007414:	ec57 6b10 	vmov	r6, r7, d0
 8007418:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800741c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8007420:	ed8d 1b00 	vstr	d1, [sp]
 8007424:	d206      	bcs.n	8007434 <__kernel_cos+0x24>
 8007426:	4630      	mov	r0, r6
 8007428:	4639      	mov	r1, r7
 800742a:	f7f9 fb41 	bl	8000ab0 <__aeabi_d2iz>
 800742e:	2800      	cmp	r0, #0
 8007430:	f000 8088 	beq.w	8007544 <__kernel_cos+0x134>
 8007434:	4632      	mov	r2, r6
 8007436:	463b      	mov	r3, r7
 8007438:	4630      	mov	r0, r6
 800743a:	4639      	mov	r1, r7
 800743c:	f7f9 f888 	bl	8000550 <__aeabi_dmul>
 8007440:	4b51      	ldr	r3, [pc, #324]	@ (8007588 <__kernel_cos+0x178>)
 8007442:	2200      	movs	r2, #0
 8007444:	4604      	mov	r4, r0
 8007446:	460d      	mov	r5, r1
 8007448:	f7f9 f882 	bl	8000550 <__aeabi_dmul>
 800744c:	a340      	add	r3, pc, #256	@ (adr r3, 8007550 <__kernel_cos+0x140>)
 800744e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007452:	4682      	mov	sl, r0
 8007454:	468b      	mov	fp, r1
 8007456:	4620      	mov	r0, r4
 8007458:	4629      	mov	r1, r5
 800745a:	f7f9 f879 	bl	8000550 <__aeabi_dmul>
 800745e:	a33e      	add	r3, pc, #248	@ (adr r3, 8007558 <__kernel_cos+0x148>)
 8007460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007464:	f7f8 febe 	bl	80001e4 <__adddf3>
 8007468:	4622      	mov	r2, r4
 800746a:	462b      	mov	r3, r5
 800746c:	f7f9 f870 	bl	8000550 <__aeabi_dmul>
 8007470:	a33b      	add	r3, pc, #236	@ (adr r3, 8007560 <__kernel_cos+0x150>)
 8007472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007476:	f7f8 feb3 	bl	80001e0 <__aeabi_dsub>
 800747a:	4622      	mov	r2, r4
 800747c:	462b      	mov	r3, r5
 800747e:	f7f9 f867 	bl	8000550 <__aeabi_dmul>
 8007482:	a339      	add	r3, pc, #228	@ (adr r3, 8007568 <__kernel_cos+0x158>)
 8007484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007488:	f7f8 feac 	bl	80001e4 <__adddf3>
 800748c:	4622      	mov	r2, r4
 800748e:	462b      	mov	r3, r5
 8007490:	f7f9 f85e 	bl	8000550 <__aeabi_dmul>
 8007494:	a336      	add	r3, pc, #216	@ (adr r3, 8007570 <__kernel_cos+0x160>)
 8007496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800749a:	f7f8 fea1 	bl	80001e0 <__aeabi_dsub>
 800749e:	4622      	mov	r2, r4
 80074a0:	462b      	mov	r3, r5
 80074a2:	f7f9 f855 	bl	8000550 <__aeabi_dmul>
 80074a6:	a334      	add	r3, pc, #208	@ (adr r3, 8007578 <__kernel_cos+0x168>)
 80074a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ac:	f7f8 fe9a 	bl	80001e4 <__adddf3>
 80074b0:	4622      	mov	r2, r4
 80074b2:	462b      	mov	r3, r5
 80074b4:	f7f9 f84c 	bl	8000550 <__aeabi_dmul>
 80074b8:	4622      	mov	r2, r4
 80074ba:	462b      	mov	r3, r5
 80074bc:	f7f9 f848 	bl	8000550 <__aeabi_dmul>
 80074c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80074c4:	4604      	mov	r4, r0
 80074c6:	460d      	mov	r5, r1
 80074c8:	4630      	mov	r0, r6
 80074ca:	4639      	mov	r1, r7
 80074cc:	f7f9 f840 	bl	8000550 <__aeabi_dmul>
 80074d0:	460b      	mov	r3, r1
 80074d2:	4602      	mov	r2, r0
 80074d4:	4629      	mov	r1, r5
 80074d6:	4620      	mov	r0, r4
 80074d8:	f7f8 fe82 	bl	80001e0 <__aeabi_dsub>
 80074dc:	4b2b      	ldr	r3, [pc, #172]	@ (800758c <__kernel_cos+0x17c>)
 80074de:	4598      	cmp	r8, r3
 80074e0:	4606      	mov	r6, r0
 80074e2:	460f      	mov	r7, r1
 80074e4:	d810      	bhi.n	8007508 <__kernel_cos+0xf8>
 80074e6:	4602      	mov	r2, r0
 80074e8:	460b      	mov	r3, r1
 80074ea:	4650      	mov	r0, sl
 80074ec:	4659      	mov	r1, fp
 80074ee:	f7f8 fe77 	bl	80001e0 <__aeabi_dsub>
 80074f2:	460b      	mov	r3, r1
 80074f4:	4926      	ldr	r1, [pc, #152]	@ (8007590 <__kernel_cos+0x180>)
 80074f6:	4602      	mov	r2, r0
 80074f8:	2000      	movs	r0, #0
 80074fa:	f7f8 fe71 	bl	80001e0 <__aeabi_dsub>
 80074fe:	ec41 0b10 	vmov	d0, r0, r1
 8007502:	b003      	add	sp, #12
 8007504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007508:	4b22      	ldr	r3, [pc, #136]	@ (8007594 <__kernel_cos+0x184>)
 800750a:	4921      	ldr	r1, [pc, #132]	@ (8007590 <__kernel_cos+0x180>)
 800750c:	4598      	cmp	r8, r3
 800750e:	bf8c      	ite	hi
 8007510:	4d21      	ldrhi	r5, [pc, #132]	@ (8007598 <__kernel_cos+0x188>)
 8007512:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8007516:	2400      	movs	r4, #0
 8007518:	4622      	mov	r2, r4
 800751a:	462b      	mov	r3, r5
 800751c:	2000      	movs	r0, #0
 800751e:	f7f8 fe5f 	bl	80001e0 <__aeabi_dsub>
 8007522:	4622      	mov	r2, r4
 8007524:	4680      	mov	r8, r0
 8007526:	4689      	mov	r9, r1
 8007528:	462b      	mov	r3, r5
 800752a:	4650      	mov	r0, sl
 800752c:	4659      	mov	r1, fp
 800752e:	f7f8 fe57 	bl	80001e0 <__aeabi_dsub>
 8007532:	4632      	mov	r2, r6
 8007534:	463b      	mov	r3, r7
 8007536:	f7f8 fe53 	bl	80001e0 <__aeabi_dsub>
 800753a:	4602      	mov	r2, r0
 800753c:	460b      	mov	r3, r1
 800753e:	4640      	mov	r0, r8
 8007540:	4649      	mov	r1, r9
 8007542:	e7da      	b.n	80074fa <__kernel_cos+0xea>
 8007544:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8007580 <__kernel_cos+0x170>
 8007548:	e7db      	b.n	8007502 <__kernel_cos+0xf2>
 800754a:	bf00      	nop
 800754c:	f3af 8000 	nop.w
 8007550:	be8838d4 	.word	0xbe8838d4
 8007554:	bda8fae9 	.word	0xbda8fae9
 8007558:	bdb4b1c4 	.word	0xbdb4b1c4
 800755c:	3e21ee9e 	.word	0x3e21ee9e
 8007560:	809c52ad 	.word	0x809c52ad
 8007564:	3e927e4f 	.word	0x3e927e4f
 8007568:	19cb1590 	.word	0x19cb1590
 800756c:	3efa01a0 	.word	0x3efa01a0
 8007570:	16c15177 	.word	0x16c15177
 8007574:	3f56c16c 	.word	0x3f56c16c
 8007578:	5555554c 	.word	0x5555554c
 800757c:	3fa55555 	.word	0x3fa55555
 8007580:	00000000 	.word	0x00000000
 8007584:	3ff00000 	.word	0x3ff00000
 8007588:	3fe00000 	.word	0x3fe00000
 800758c:	3fd33332 	.word	0x3fd33332
 8007590:	3ff00000 	.word	0x3ff00000
 8007594:	3fe90000 	.word	0x3fe90000
 8007598:	3fd20000 	.word	0x3fd20000
 800759c:	00000000 	.word	0x00000000

080075a0 <__kernel_sin>:
 80075a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075a4:	ec55 4b10 	vmov	r4, r5, d0
 80075a8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80075ac:	b085      	sub	sp, #20
 80075ae:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 80075b2:	ed8d 1b02 	vstr	d1, [sp, #8]
 80075b6:	4680      	mov	r8, r0
 80075b8:	d205      	bcs.n	80075c6 <__kernel_sin+0x26>
 80075ba:	4620      	mov	r0, r4
 80075bc:	4629      	mov	r1, r5
 80075be:	f7f9 fa77 	bl	8000ab0 <__aeabi_d2iz>
 80075c2:	2800      	cmp	r0, #0
 80075c4:	d052      	beq.n	800766c <__kernel_sin+0xcc>
 80075c6:	4622      	mov	r2, r4
 80075c8:	462b      	mov	r3, r5
 80075ca:	4620      	mov	r0, r4
 80075cc:	4629      	mov	r1, r5
 80075ce:	f7f8 ffbf 	bl	8000550 <__aeabi_dmul>
 80075d2:	4682      	mov	sl, r0
 80075d4:	468b      	mov	fp, r1
 80075d6:	4602      	mov	r2, r0
 80075d8:	460b      	mov	r3, r1
 80075da:	4620      	mov	r0, r4
 80075dc:	4629      	mov	r1, r5
 80075de:	f7f8 ffb7 	bl	8000550 <__aeabi_dmul>
 80075e2:	a342      	add	r3, pc, #264	@ (adr r3, 80076ec <__kernel_sin+0x14c>)
 80075e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e8:	e9cd 0100 	strd	r0, r1, [sp]
 80075ec:	4650      	mov	r0, sl
 80075ee:	4659      	mov	r1, fp
 80075f0:	f7f8 ffae 	bl	8000550 <__aeabi_dmul>
 80075f4:	a33f      	add	r3, pc, #252	@ (adr r3, 80076f4 <__kernel_sin+0x154>)
 80075f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075fa:	f7f8 fdf1 	bl	80001e0 <__aeabi_dsub>
 80075fe:	4652      	mov	r2, sl
 8007600:	465b      	mov	r3, fp
 8007602:	f7f8 ffa5 	bl	8000550 <__aeabi_dmul>
 8007606:	a33d      	add	r3, pc, #244	@ (adr r3, 80076fc <__kernel_sin+0x15c>)
 8007608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800760c:	f7f8 fdea 	bl	80001e4 <__adddf3>
 8007610:	4652      	mov	r2, sl
 8007612:	465b      	mov	r3, fp
 8007614:	f7f8 ff9c 	bl	8000550 <__aeabi_dmul>
 8007618:	a33a      	add	r3, pc, #232	@ (adr r3, 8007704 <__kernel_sin+0x164>)
 800761a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800761e:	f7f8 fddf 	bl	80001e0 <__aeabi_dsub>
 8007622:	4652      	mov	r2, sl
 8007624:	465b      	mov	r3, fp
 8007626:	f7f8 ff93 	bl	8000550 <__aeabi_dmul>
 800762a:	a338      	add	r3, pc, #224	@ (adr r3, 800770c <__kernel_sin+0x16c>)
 800762c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007630:	f7f8 fdd8 	bl	80001e4 <__adddf3>
 8007634:	4606      	mov	r6, r0
 8007636:	460f      	mov	r7, r1
 8007638:	f1b8 0f00 	cmp.w	r8, #0
 800763c:	d11b      	bne.n	8007676 <__kernel_sin+0xd6>
 800763e:	4602      	mov	r2, r0
 8007640:	460b      	mov	r3, r1
 8007642:	4650      	mov	r0, sl
 8007644:	4659      	mov	r1, fp
 8007646:	f7f8 ff83 	bl	8000550 <__aeabi_dmul>
 800764a:	a325      	add	r3, pc, #148	@ (adr r3, 80076e0 <__kernel_sin+0x140>)
 800764c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007650:	f7f8 fdc6 	bl	80001e0 <__aeabi_dsub>
 8007654:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007658:	f7f8 ff7a 	bl	8000550 <__aeabi_dmul>
 800765c:	4602      	mov	r2, r0
 800765e:	460b      	mov	r3, r1
 8007660:	4620      	mov	r0, r4
 8007662:	4629      	mov	r1, r5
 8007664:	f7f8 fdbe 	bl	80001e4 <__adddf3>
 8007668:	4604      	mov	r4, r0
 800766a:	460d      	mov	r5, r1
 800766c:	ec45 4b10 	vmov	d0, r4, r5
 8007670:	b005      	add	sp, #20
 8007672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007676:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800767a:	4b1b      	ldr	r3, [pc, #108]	@ (80076e8 <__kernel_sin+0x148>)
 800767c:	2200      	movs	r2, #0
 800767e:	f7f8 ff67 	bl	8000550 <__aeabi_dmul>
 8007682:	4632      	mov	r2, r6
 8007684:	4680      	mov	r8, r0
 8007686:	4689      	mov	r9, r1
 8007688:	463b      	mov	r3, r7
 800768a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800768e:	f7f8 ff5f 	bl	8000550 <__aeabi_dmul>
 8007692:	4602      	mov	r2, r0
 8007694:	460b      	mov	r3, r1
 8007696:	4640      	mov	r0, r8
 8007698:	4649      	mov	r1, r9
 800769a:	f7f8 fda1 	bl	80001e0 <__aeabi_dsub>
 800769e:	4652      	mov	r2, sl
 80076a0:	465b      	mov	r3, fp
 80076a2:	f7f8 ff55 	bl	8000550 <__aeabi_dmul>
 80076a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80076aa:	f7f8 fd99 	bl	80001e0 <__aeabi_dsub>
 80076ae:	a30c      	add	r3, pc, #48	@ (adr r3, 80076e0 <__kernel_sin+0x140>)
 80076b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076b4:	4606      	mov	r6, r0
 80076b6:	460f      	mov	r7, r1
 80076b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80076bc:	f7f8 ff48 	bl	8000550 <__aeabi_dmul>
 80076c0:	4602      	mov	r2, r0
 80076c2:	460b      	mov	r3, r1
 80076c4:	4630      	mov	r0, r6
 80076c6:	4639      	mov	r1, r7
 80076c8:	f7f8 fd8c 	bl	80001e4 <__adddf3>
 80076cc:	4602      	mov	r2, r0
 80076ce:	460b      	mov	r3, r1
 80076d0:	4620      	mov	r0, r4
 80076d2:	4629      	mov	r1, r5
 80076d4:	f7f8 fd84 	bl	80001e0 <__aeabi_dsub>
 80076d8:	e7c6      	b.n	8007668 <__kernel_sin+0xc8>
 80076da:	bf00      	nop
 80076dc:	f3af 8000 	nop.w
 80076e0:	55555549 	.word	0x55555549
 80076e4:	3fc55555 	.word	0x3fc55555
 80076e8:	3fe00000 	.word	0x3fe00000
 80076ec:	5acfd57c 	.word	0x5acfd57c
 80076f0:	3de5d93a 	.word	0x3de5d93a
 80076f4:	8a2b9ceb 	.word	0x8a2b9ceb
 80076f8:	3e5ae5e6 	.word	0x3e5ae5e6
 80076fc:	57b1fe7d 	.word	0x57b1fe7d
 8007700:	3ec71de3 	.word	0x3ec71de3
 8007704:	19c161d5 	.word	0x19c161d5
 8007708:	3f2a01a0 	.word	0x3f2a01a0
 800770c:	1110f8a6 	.word	0x1110f8a6
 8007710:	3f811111 	.word	0x3f811111
 8007714:	00000000 	.word	0x00000000

08007718 <__ieee754_asin>:
 8007718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800771c:	ec55 4b10 	vmov	r4, r5, d0
 8007720:	4bc7      	ldr	r3, [pc, #796]	@ (8007a40 <__ieee754_asin+0x328>)
 8007722:	b087      	sub	sp, #28
 8007724:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8007728:	429e      	cmp	r6, r3
 800772a:	9501      	str	r5, [sp, #4]
 800772c:	d92d      	bls.n	800778a <__ieee754_asin+0x72>
 800772e:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 8007732:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8007736:	4326      	orrs	r6, r4
 8007738:	d116      	bne.n	8007768 <__ieee754_asin+0x50>
 800773a:	a3a7      	add	r3, pc, #668	@ (adr r3, 80079d8 <__ieee754_asin+0x2c0>)
 800773c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007740:	4620      	mov	r0, r4
 8007742:	4629      	mov	r1, r5
 8007744:	f7f8 ff04 	bl	8000550 <__aeabi_dmul>
 8007748:	a3a5      	add	r3, pc, #660	@ (adr r3, 80079e0 <__ieee754_asin+0x2c8>)
 800774a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800774e:	4606      	mov	r6, r0
 8007750:	460f      	mov	r7, r1
 8007752:	4620      	mov	r0, r4
 8007754:	4629      	mov	r1, r5
 8007756:	f7f8 fefb 	bl	8000550 <__aeabi_dmul>
 800775a:	4602      	mov	r2, r0
 800775c:	460b      	mov	r3, r1
 800775e:	4630      	mov	r0, r6
 8007760:	4639      	mov	r1, r7
 8007762:	f7f8 fd3f 	bl	80001e4 <__adddf3>
 8007766:	e009      	b.n	800777c <__ieee754_asin+0x64>
 8007768:	4622      	mov	r2, r4
 800776a:	462b      	mov	r3, r5
 800776c:	4620      	mov	r0, r4
 800776e:	4629      	mov	r1, r5
 8007770:	f7f8 fd36 	bl	80001e0 <__aeabi_dsub>
 8007774:	4602      	mov	r2, r0
 8007776:	460b      	mov	r3, r1
 8007778:	f7f9 f814 	bl	80007a4 <__aeabi_ddiv>
 800777c:	4604      	mov	r4, r0
 800777e:	460d      	mov	r5, r1
 8007780:	ec45 4b10 	vmov	d0, r4, r5
 8007784:	b007      	add	sp, #28
 8007786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800778a:	4bae      	ldr	r3, [pc, #696]	@ (8007a44 <__ieee754_asin+0x32c>)
 800778c:	429e      	cmp	r6, r3
 800778e:	d810      	bhi.n	80077b2 <__ieee754_asin+0x9a>
 8007790:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 8007794:	f080 80ad 	bcs.w	80078f2 <__ieee754_asin+0x1da>
 8007798:	a393      	add	r3, pc, #588	@ (adr r3, 80079e8 <__ieee754_asin+0x2d0>)
 800779a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800779e:	4620      	mov	r0, r4
 80077a0:	4629      	mov	r1, r5
 80077a2:	f7f8 fd1f 	bl	80001e4 <__adddf3>
 80077a6:	4ba8      	ldr	r3, [pc, #672]	@ (8007a48 <__ieee754_asin+0x330>)
 80077a8:	2200      	movs	r2, #0
 80077aa:	f7f9 f961 	bl	8000a70 <__aeabi_dcmpgt>
 80077ae:	2800      	cmp	r0, #0
 80077b0:	d1e6      	bne.n	8007780 <__ieee754_asin+0x68>
 80077b2:	ec45 4b10 	vmov	d0, r4, r5
 80077b6:	f7ff fce9 	bl	800718c <fabs>
 80077ba:	49a3      	ldr	r1, [pc, #652]	@ (8007a48 <__ieee754_asin+0x330>)
 80077bc:	ec53 2b10 	vmov	r2, r3, d0
 80077c0:	2000      	movs	r0, #0
 80077c2:	f7f8 fd0d 	bl	80001e0 <__aeabi_dsub>
 80077c6:	4ba1      	ldr	r3, [pc, #644]	@ (8007a4c <__ieee754_asin+0x334>)
 80077c8:	2200      	movs	r2, #0
 80077ca:	f7f8 fec1 	bl	8000550 <__aeabi_dmul>
 80077ce:	a388      	add	r3, pc, #544	@ (adr r3, 80079f0 <__ieee754_asin+0x2d8>)
 80077d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d4:	4604      	mov	r4, r0
 80077d6:	460d      	mov	r5, r1
 80077d8:	f7f8 feba 	bl	8000550 <__aeabi_dmul>
 80077dc:	a386      	add	r3, pc, #536	@ (adr r3, 80079f8 <__ieee754_asin+0x2e0>)
 80077de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e2:	f7f8 fcff 	bl	80001e4 <__adddf3>
 80077e6:	4622      	mov	r2, r4
 80077e8:	462b      	mov	r3, r5
 80077ea:	f7f8 feb1 	bl	8000550 <__aeabi_dmul>
 80077ee:	a384      	add	r3, pc, #528	@ (adr r3, 8007a00 <__ieee754_asin+0x2e8>)
 80077f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f4:	f7f8 fcf4 	bl	80001e0 <__aeabi_dsub>
 80077f8:	4622      	mov	r2, r4
 80077fa:	462b      	mov	r3, r5
 80077fc:	f7f8 fea8 	bl	8000550 <__aeabi_dmul>
 8007800:	a381      	add	r3, pc, #516	@ (adr r3, 8007a08 <__ieee754_asin+0x2f0>)
 8007802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007806:	f7f8 fced 	bl	80001e4 <__adddf3>
 800780a:	4622      	mov	r2, r4
 800780c:	462b      	mov	r3, r5
 800780e:	f7f8 fe9f 	bl	8000550 <__aeabi_dmul>
 8007812:	a37f      	add	r3, pc, #508	@ (adr r3, 8007a10 <__ieee754_asin+0x2f8>)
 8007814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007818:	f7f8 fce2 	bl	80001e0 <__aeabi_dsub>
 800781c:	4622      	mov	r2, r4
 800781e:	462b      	mov	r3, r5
 8007820:	f7f8 fe96 	bl	8000550 <__aeabi_dmul>
 8007824:	a37c      	add	r3, pc, #496	@ (adr r3, 8007a18 <__ieee754_asin+0x300>)
 8007826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800782a:	f7f8 fcdb 	bl	80001e4 <__adddf3>
 800782e:	4622      	mov	r2, r4
 8007830:	462b      	mov	r3, r5
 8007832:	f7f8 fe8d 	bl	8000550 <__aeabi_dmul>
 8007836:	a37a      	add	r3, pc, #488	@ (adr r3, 8007a20 <__ieee754_asin+0x308>)
 8007838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800783c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007840:	4620      	mov	r0, r4
 8007842:	4629      	mov	r1, r5
 8007844:	f7f8 fe84 	bl	8000550 <__aeabi_dmul>
 8007848:	a377      	add	r3, pc, #476	@ (adr r3, 8007a28 <__ieee754_asin+0x310>)
 800784a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800784e:	f7f8 fcc7 	bl	80001e0 <__aeabi_dsub>
 8007852:	4622      	mov	r2, r4
 8007854:	462b      	mov	r3, r5
 8007856:	f7f8 fe7b 	bl	8000550 <__aeabi_dmul>
 800785a:	a375      	add	r3, pc, #468	@ (adr r3, 8007a30 <__ieee754_asin+0x318>)
 800785c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007860:	f7f8 fcc0 	bl	80001e4 <__adddf3>
 8007864:	4622      	mov	r2, r4
 8007866:	462b      	mov	r3, r5
 8007868:	f7f8 fe72 	bl	8000550 <__aeabi_dmul>
 800786c:	a372      	add	r3, pc, #456	@ (adr r3, 8007a38 <__ieee754_asin+0x320>)
 800786e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007872:	f7f8 fcb5 	bl	80001e0 <__aeabi_dsub>
 8007876:	4622      	mov	r2, r4
 8007878:	462b      	mov	r3, r5
 800787a:	f7f8 fe69 	bl	8000550 <__aeabi_dmul>
 800787e:	4b72      	ldr	r3, [pc, #456]	@ (8007a48 <__ieee754_asin+0x330>)
 8007880:	2200      	movs	r2, #0
 8007882:	f7f8 fcaf 	bl	80001e4 <__adddf3>
 8007886:	ec45 4b10 	vmov	d0, r4, r5
 800788a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800788e:	f7ff fce3 	bl	8007258 <__ieee754_sqrt>
 8007892:	4b6f      	ldr	r3, [pc, #444]	@ (8007a50 <__ieee754_asin+0x338>)
 8007894:	429e      	cmp	r6, r3
 8007896:	ec5b ab10 	vmov	sl, fp, d0
 800789a:	f240 80db 	bls.w	8007a54 <__ieee754_asin+0x33c>
 800789e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80078a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078a6:	f7f8 ff7d 	bl	80007a4 <__aeabi_ddiv>
 80078aa:	4652      	mov	r2, sl
 80078ac:	465b      	mov	r3, fp
 80078ae:	f7f8 fe4f 	bl	8000550 <__aeabi_dmul>
 80078b2:	4652      	mov	r2, sl
 80078b4:	465b      	mov	r3, fp
 80078b6:	f7f8 fc95 	bl	80001e4 <__adddf3>
 80078ba:	4602      	mov	r2, r0
 80078bc:	460b      	mov	r3, r1
 80078be:	f7f8 fc91 	bl	80001e4 <__adddf3>
 80078c2:	a347      	add	r3, pc, #284	@ (adr r3, 80079e0 <__ieee754_asin+0x2c8>)
 80078c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c8:	f7f8 fc8a 	bl	80001e0 <__aeabi_dsub>
 80078cc:	4602      	mov	r2, r0
 80078ce:	460b      	mov	r3, r1
 80078d0:	a141      	add	r1, pc, #260	@ (adr r1, 80079d8 <__ieee754_asin+0x2c0>)
 80078d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078d6:	f7f8 fc83 	bl	80001e0 <__aeabi_dsub>
 80078da:	9b01      	ldr	r3, [sp, #4]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	bfdc      	itt	le
 80078e0:	4602      	movle	r2, r0
 80078e2:	f101 4300 	addle.w	r3, r1, #2147483648	@ 0x80000000
 80078e6:	4604      	mov	r4, r0
 80078e8:	460d      	mov	r5, r1
 80078ea:	bfdc      	itt	le
 80078ec:	4614      	movle	r4, r2
 80078ee:	461d      	movle	r5, r3
 80078f0:	e746      	b.n	8007780 <__ieee754_asin+0x68>
 80078f2:	4622      	mov	r2, r4
 80078f4:	462b      	mov	r3, r5
 80078f6:	4620      	mov	r0, r4
 80078f8:	4629      	mov	r1, r5
 80078fa:	f7f8 fe29 	bl	8000550 <__aeabi_dmul>
 80078fe:	a33c      	add	r3, pc, #240	@ (adr r3, 80079f0 <__ieee754_asin+0x2d8>)
 8007900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007904:	4606      	mov	r6, r0
 8007906:	460f      	mov	r7, r1
 8007908:	f7f8 fe22 	bl	8000550 <__aeabi_dmul>
 800790c:	a33a      	add	r3, pc, #232	@ (adr r3, 80079f8 <__ieee754_asin+0x2e0>)
 800790e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007912:	f7f8 fc67 	bl	80001e4 <__adddf3>
 8007916:	4632      	mov	r2, r6
 8007918:	463b      	mov	r3, r7
 800791a:	f7f8 fe19 	bl	8000550 <__aeabi_dmul>
 800791e:	a338      	add	r3, pc, #224	@ (adr r3, 8007a00 <__ieee754_asin+0x2e8>)
 8007920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007924:	f7f8 fc5c 	bl	80001e0 <__aeabi_dsub>
 8007928:	4632      	mov	r2, r6
 800792a:	463b      	mov	r3, r7
 800792c:	f7f8 fe10 	bl	8000550 <__aeabi_dmul>
 8007930:	a335      	add	r3, pc, #212	@ (adr r3, 8007a08 <__ieee754_asin+0x2f0>)
 8007932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007936:	f7f8 fc55 	bl	80001e4 <__adddf3>
 800793a:	4632      	mov	r2, r6
 800793c:	463b      	mov	r3, r7
 800793e:	f7f8 fe07 	bl	8000550 <__aeabi_dmul>
 8007942:	a333      	add	r3, pc, #204	@ (adr r3, 8007a10 <__ieee754_asin+0x2f8>)
 8007944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007948:	f7f8 fc4a 	bl	80001e0 <__aeabi_dsub>
 800794c:	4632      	mov	r2, r6
 800794e:	463b      	mov	r3, r7
 8007950:	f7f8 fdfe 	bl	8000550 <__aeabi_dmul>
 8007954:	a330      	add	r3, pc, #192	@ (adr r3, 8007a18 <__ieee754_asin+0x300>)
 8007956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800795a:	f7f8 fc43 	bl	80001e4 <__adddf3>
 800795e:	4632      	mov	r2, r6
 8007960:	463b      	mov	r3, r7
 8007962:	f7f8 fdf5 	bl	8000550 <__aeabi_dmul>
 8007966:	a32e      	add	r3, pc, #184	@ (adr r3, 8007a20 <__ieee754_asin+0x308>)
 8007968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800796c:	4680      	mov	r8, r0
 800796e:	4689      	mov	r9, r1
 8007970:	4630      	mov	r0, r6
 8007972:	4639      	mov	r1, r7
 8007974:	f7f8 fdec 	bl	8000550 <__aeabi_dmul>
 8007978:	a32b      	add	r3, pc, #172	@ (adr r3, 8007a28 <__ieee754_asin+0x310>)
 800797a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800797e:	f7f8 fc2f 	bl	80001e0 <__aeabi_dsub>
 8007982:	4632      	mov	r2, r6
 8007984:	463b      	mov	r3, r7
 8007986:	f7f8 fde3 	bl	8000550 <__aeabi_dmul>
 800798a:	a329      	add	r3, pc, #164	@ (adr r3, 8007a30 <__ieee754_asin+0x318>)
 800798c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007990:	f7f8 fc28 	bl	80001e4 <__adddf3>
 8007994:	4632      	mov	r2, r6
 8007996:	463b      	mov	r3, r7
 8007998:	f7f8 fdda 	bl	8000550 <__aeabi_dmul>
 800799c:	a326      	add	r3, pc, #152	@ (adr r3, 8007a38 <__ieee754_asin+0x320>)
 800799e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a2:	f7f8 fc1d 	bl	80001e0 <__aeabi_dsub>
 80079a6:	4632      	mov	r2, r6
 80079a8:	463b      	mov	r3, r7
 80079aa:	f7f8 fdd1 	bl	8000550 <__aeabi_dmul>
 80079ae:	4b26      	ldr	r3, [pc, #152]	@ (8007a48 <__ieee754_asin+0x330>)
 80079b0:	2200      	movs	r2, #0
 80079b2:	f7f8 fc17 	bl	80001e4 <__adddf3>
 80079b6:	4602      	mov	r2, r0
 80079b8:	460b      	mov	r3, r1
 80079ba:	4640      	mov	r0, r8
 80079bc:	4649      	mov	r1, r9
 80079be:	f7f8 fef1 	bl	80007a4 <__aeabi_ddiv>
 80079c2:	4622      	mov	r2, r4
 80079c4:	462b      	mov	r3, r5
 80079c6:	f7f8 fdc3 	bl	8000550 <__aeabi_dmul>
 80079ca:	4602      	mov	r2, r0
 80079cc:	460b      	mov	r3, r1
 80079ce:	4620      	mov	r0, r4
 80079d0:	4629      	mov	r1, r5
 80079d2:	e6c6      	b.n	8007762 <__ieee754_asin+0x4a>
 80079d4:	f3af 8000 	nop.w
 80079d8:	54442d18 	.word	0x54442d18
 80079dc:	3ff921fb 	.word	0x3ff921fb
 80079e0:	33145c07 	.word	0x33145c07
 80079e4:	3c91a626 	.word	0x3c91a626
 80079e8:	8800759c 	.word	0x8800759c
 80079ec:	7e37e43c 	.word	0x7e37e43c
 80079f0:	0dfdf709 	.word	0x0dfdf709
 80079f4:	3f023de1 	.word	0x3f023de1
 80079f8:	7501b288 	.word	0x7501b288
 80079fc:	3f49efe0 	.word	0x3f49efe0
 8007a00:	b5688f3b 	.word	0xb5688f3b
 8007a04:	3fa48228 	.word	0x3fa48228
 8007a08:	0e884455 	.word	0x0e884455
 8007a0c:	3fc9c155 	.word	0x3fc9c155
 8007a10:	03eb6f7d 	.word	0x03eb6f7d
 8007a14:	3fd4d612 	.word	0x3fd4d612
 8007a18:	55555555 	.word	0x55555555
 8007a1c:	3fc55555 	.word	0x3fc55555
 8007a20:	b12e9282 	.word	0xb12e9282
 8007a24:	3fb3b8c5 	.word	0x3fb3b8c5
 8007a28:	1b8d0159 	.word	0x1b8d0159
 8007a2c:	3fe6066c 	.word	0x3fe6066c
 8007a30:	9c598ac8 	.word	0x9c598ac8
 8007a34:	40002ae5 	.word	0x40002ae5
 8007a38:	1c8a2d4b 	.word	0x1c8a2d4b
 8007a3c:	40033a27 	.word	0x40033a27
 8007a40:	3fefffff 	.word	0x3fefffff
 8007a44:	3fdfffff 	.word	0x3fdfffff
 8007a48:	3ff00000 	.word	0x3ff00000
 8007a4c:	3fe00000 	.word	0x3fe00000
 8007a50:	3fef3332 	.word	0x3fef3332
 8007a54:	4652      	mov	r2, sl
 8007a56:	465b      	mov	r3, fp
 8007a58:	4650      	mov	r0, sl
 8007a5a:	4659      	mov	r1, fp
 8007a5c:	f7f8 fbc2 	bl	80001e4 <__adddf3>
 8007a60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a64:	4606      	mov	r6, r0
 8007a66:	460f      	mov	r7, r1
 8007a68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a6c:	f7f8 fe9a 	bl	80007a4 <__aeabi_ddiv>
 8007a70:	4602      	mov	r2, r0
 8007a72:	460b      	mov	r3, r1
 8007a74:	4630      	mov	r0, r6
 8007a76:	4639      	mov	r1, r7
 8007a78:	f7f8 fd6a 	bl	8000550 <__aeabi_dmul>
 8007a7c:	f04f 0800 	mov.w	r8, #0
 8007a80:	4606      	mov	r6, r0
 8007a82:	460f      	mov	r7, r1
 8007a84:	4642      	mov	r2, r8
 8007a86:	465b      	mov	r3, fp
 8007a88:	4640      	mov	r0, r8
 8007a8a:	4659      	mov	r1, fp
 8007a8c:	f7f8 fd60 	bl	8000550 <__aeabi_dmul>
 8007a90:	4602      	mov	r2, r0
 8007a92:	460b      	mov	r3, r1
 8007a94:	4620      	mov	r0, r4
 8007a96:	4629      	mov	r1, r5
 8007a98:	f7f8 fba2 	bl	80001e0 <__aeabi_dsub>
 8007a9c:	4642      	mov	r2, r8
 8007a9e:	4604      	mov	r4, r0
 8007aa0:	460d      	mov	r5, r1
 8007aa2:	465b      	mov	r3, fp
 8007aa4:	4650      	mov	r0, sl
 8007aa6:	4659      	mov	r1, fp
 8007aa8:	f7f8 fb9c 	bl	80001e4 <__adddf3>
 8007aac:	4602      	mov	r2, r0
 8007aae:	460b      	mov	r3, r1
 8007ab0:	4620      	mov	r0, r4
 8007ab2:	4629      	mov	r1, r5
 8007ab4:	f7f8 fe76 	bl	80007a4 <__aeabi_ddiv>
 8007ab8:	4602      	mov	r2, r0
 8007aba:	460b      	mov	r3, r1
 8007abc:	f7f8 fb92 	bl	80001e4 <__adddf3>
 8007ac0:	4602      	mov	r2, r0
 8007ac2:	460b      	mov	r3, r1
 8007ac4:	a112      	add	r1, pc, #72	@ (adr r1, 8007b10 <__ieee754_asin+0x3f8>)
 8007ac6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007aca:	f7f8 fb89 	bl	80001e0 <__aeabi_dsub>
 8007ace:	4602      	mov	r2, r0
 8007ad0:	460b      	mov	r3, r1
 8007ad2:	4630      	mov	r0, r6
 8007ad4:	4639      	mov	r1, r7
 8007ad6:	f7f8 fb83 	bl	80001e0 <__aeabi_dsub>
 8007ada:	4642      	mov	r2, r8
 8007adc:	4604      	mov	r4, r0
 8007ade:	460d      	mov	r5, r1
 8007ae0:	465b      	mov	r3, fp
 8007ae2:	4640      	mov	r0, r8
 8007ae4:	4659      	mov	r1, fp
 8007ae6:	f7f8 fb7d 	bl	80001e4 <__adddf3>
 8007aea:	4602      	mov	r2, r0
 8007aec:	460b      	mov	r3, r1
 8007aee:	a10a      	add	r1, pc, #40	@ (adr r1, 8007b18 <__ieee754_asin+0x400>)
 8007af0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007af4:	f7f8 fb74 	bl	80001e0 <__aeabi_dsub>
 8007af8:	4602      	mov	r2, r0
 8007afa:	460b      	mov	r3, r1
 8007afc:	4620      	mov	r0, r4
 8007afe:	4629      	mov	r1, r5
 8007b00:	f7f8 fb6e 	bl	80001e0 <__aeabi_dsub>
 8007b04:	4602      	mov	r2, r0
 8007b06:	460b      	mov	r3, r1
 8007b08:	a103      	add	r1, pc, #12	@ (adr r1, 8007b18 <__ieee754_asin+0x400>)
 8007b0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b0e:	e6e2      	b.n	80078d6 <__ieee754_asin+0x1be>
 8007b10:	33145c07 	.word	0x33145c07
 8007b14:	3c91a626 	.word	0x3c91a626
 8007b18:	54442d18 	.word	0x54442d18
 8007b1c:	3fe921fb 	.word	0x3fe921fb

08007b20 <__ieee754_rem_pio2>:
 8007b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b24:	ec57 6b10 	vmov	r6, r7, d0
 8007b28:	4bc5      	ldr	r3, [pc, #788]	@ (8007e40 <__ieee754_rem_pio2+0x320>)
 8007b2a:	b08d      	sub	sp, #52	@ 0x34
 8007b2c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8007b30:	4598      	cmp	r8, r3
 8007b32:	4604      	mov	r4, r0
 8007b34:	9704      	str	r7, [sp, #16]
 8007b36:	d807      	bhi.n	8007b48 <__ieee754_rem_pio2+0x28>
 8007b38:	2200      	movs	r2, #0
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	ed80 0b00 	vstr	d0, [r0]
 8007b40:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8007b44:	2500      	movs	r5, #0
 8007b46:	e028      	b.n	8007b9a <__ieee754_rem_pio2+0x7a>
 8007b48:	4bbe      	ldr	r3, [pc, #760]	@ (8007e44 <__ieee754_rem_pio2+0x324>)
 8007b4a:	4598      	cmp	r8, r3
 8007b4c:	d878      	bhi.n	8007c40 <__ieee754_rem_pio2+0x120>
 8007b4e:	9b04      	ldr	r3, [sp, #16]
 8007b50:	4dbd      	ldr	r5, [pc, #756]	@ (8007e48 <__ieee754_rem_pio2+0x328>)
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	4630      	mov	r0, r6
 8007b56:	a3ac      	add	r3, pc, #688	@ (adr r3, 8007e08 <__ieee754_rem_pio2+0x2e8>)
 8007b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b5c:	4639      	mov	r1, r7
 8007b5e:	dd38      	ble.n	8007bd2 <__ieee754_rem_pio2+0xb2>
 8007b60:	f7f8 fb3e 	bl	80001e0 <__aeabi_dsub>
 8007b64:	45a8      	cmp	r8, r5
 8007b66:	4606      	mov	r6, r0
 8007b68:	460f      	mov	r7, r1
 8007b6a:	d01a      	beq.n	8007ba2 <__ieee754_rem_pio2+0x82>
 8007b6c:	a3a8      	add	r3, pc, #672	@ (adr r3, 8007e10 <__ieee754_rem_pio2+0x2f0>)
 8007b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b72:	f7f8 fb35 	bl	80001e0 <__aeabi_dsub>
 8007b76:	4602      	mov	r2, r0
 8007b78:	460b      	mov	r3, r1
 8007b7a:	4680      	mov	r8, r0
 8007b7c:	4689      	mov	r9, r1
 8007b7e:	4630      	mov	r0, r6
 8007b80:	4639      	mov	r1, r7
 8007b82:	f7f8 fb2d 	bl	80001e0 <__aeabi_dsub>
 8007b86:	a3a2      	add	r3, pc, #648	@ (adr r3, 8007e10 <__ieee754_rem_pio2+0x2f0>)
 8007b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b8c:	f7f8 fb28 	bl	80001e0 <__aeabi_dsub>
 8007b90:	e9c4 8900 	strd	r8, r9, [r4]
 8007b94:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007b98:	2501      	movs	r5, #1
 8007b9a:	4628      	mov	r0, r5
 8007b9c:	b00d      	add	sp, #52	@ 0x34
 8007b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ba2:	a39d      	add	r3, pc, #628	@ (adr r3, 8007e18 <__ieee754_rem_pio2+0x2f8>)
 8007ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ba8:	f7f8 fb1a 	bl	80001e0 <__aeabi_dsub>
 8007bac:	a39c      	add	r3, pc, #624	@ (adr r3, 8007e20 <__ieee754_rem_pio2+0x300>)
 8007bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb2:	4606      	mov	r6, r0
 8007bb4:	460f      	mov	r7, r1
 8007bb6:	f7f8 fb13 	bl	80001e0 <__aeabi_dsub>
 8007bba:	4602      	mov	r2, r0
 8007bbc:	460b      	mov	r3, r1
 8007bbe:	4680      	mov	r8, r0
 8007bc0:	4689      	mov	r9, r1
 8007bc2:	4630      	mov	r0, r6
 8007bc4:	4639      	mov	r1, r7
 8007bc6:	f7f8 fb0b 	bl	80001e0 <__aeabi_dsub>
 8007bca:	a395      	add	r3, pc, #596	@ (adr r3, 8007e20 <__ieee754_rem_pio2+0x300>)
 8007bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd0:	e7dc      	b.n	8007b8c <__ieee754_rem_pio2+0x6c>
 8007bd2:	f7f8 fb07 	bl	80001e4 <__adddf3>
 8007bd6:	45a8      	cmp	r8, r5
 8007bd8:	4606      	mov	r6, r0
 8007bda:	460f      	mov	r7, r1
 8007bdc:	d018      	beq.n	8007c10 <__ieee754_rem_pio2+0xf0>
 8007bde:	a38c      	add	r3, pc, #560	@ (adr r3, 8007e10 <__ieee754_rem_pio2+0x2f0>)
 8007be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be4:	f7f8 fafe 	bl	80001e4 <__adddf3>
 8007be8:	4602      	mov	r2, r0
 8007bea:	460b      	mov	r3, r1
 8007bec:	4680      	mov	r8, r0
 8007bee:	4689      	mov	r9, r1
 8007bf0:	4630      	mov	r0, r6
 8007bf2:	4639      	mov	r1, r7
 8007bf4:	f7f8 faf4 	bl	80001e0 <__aeabi_dsub>
 8007bf8:	a385      	add	r3, pc, #532	@ (adr r3, 8007e10 <__ieee754_rem_pio2+0x2f0>)
 8007bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bfe:	f7f8 faf1 	bl	80001e4 <__adddf3>
 8007c02:	f04f 35ff 	mov.w	r5, #4294967295
 8007c06:	e9c4 8900 	strd	r8, r9, [r4]
 8007c0a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007c0e:	e7c4      	b.n	8007b9a <__ieee754_rem_pio2+0x7a>
 8007c10:	a381      	add	r3, pc, #516	@ (adr r3, 8007e18 <__ieee754_rem_pio2+0x2f8>)
 8007c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c16:	f7f8 fae5 	bl	80001e4 <__adddf3>
 8007c1a:	a381      	add	r3, pc, #516	@ (adr r3, 8007e20 <__ieee754_rem_pio2+0x300>)
 8007c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c20:	4606      	mov	r6, r0
 8007c22:	460f      	mov	r7, r1
 8007c24:	f7f8 fade 	bl	80001e4 <__adddf3>
 8007c28:	4602      	mov	r2, r0
 8007c2a:	460b      	mov	r3, r1
 8007c2c:	4680      	mov	r8, r0
 8007c2e:	4689      	mov	r9, r1
 8007c30:	4630      	mov	r0, r6
 8007c32:	4639      	mov	r1, r7
 8007c34:	f7f8 fad4 	bl	80001e0 <__aeabi_dsub>
 8007c38:	a379      	add	r3, pc, #484	@ (adr r3, 8007e20 <__ieee754_rem_pio2+0x300>)
 8007c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c3e:	e7de      	b.n	8007bfe <__ieee754_rem_pio2+0xde>
 8007c40:	4b82      	ldr	r3, [pc, #520]	@ (8007e4c <__ieee754_rem_pio2+0x32c>)
 8007c42:	4598      	cmp	r8, r3
 8007c44:	f200 80d1 	bhi.w	8007dea <__ieee754_rem_pio2+0x2ca>
 8007c48:	f7ff faa0 	bl	800718c <fabs>
 8007c4c:	ec57 6b10 	vmov	r6, r7, d0
 8007c50:	a375      	add	r3, pc, #468	@ (adr r3, 8007e28 <__ieee754_rem_pio2+0x308>)
 8007c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c56:	4630      	mov	r0, r6
 8007c58:	4639      	mov	r1, r7
 8007c5a:	f7f8 fc79 	bl	8000550 <__aeabi_dmul>
 8007c5e:	4b7c      	ldr	r3, [pc, #496]	@ (8007e50 <__ieee754_rem_pio2+0x330>)
 8007c60:	2200      	movs	r2, #0
 8007c62:	f7f8 fabf 	bl	80001e4 <__adddf3>
 8007c66:	f7f8 ff23 	bl	8000ab0 <__aeabi_d2iz>
 8007c6a:	4605      	mov	r5, r0
 8007c6c:	f7f8 fc06 	bl	800047c <__aeabi_i2d>
 8007c70:	4602      	mov	r2, r0
 8007c72:	460b      	mov	r3, r1
 8007c74:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007c78:	a363      	add	r3, pc, #396	@ (adr r3, 8007e08 <__ieee754_rem_pio2+0x2e8>)
 8007c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c7e:	f7f8 fc67 	bl	8000550 <__aeabi_dmul>
 8007c82:	4602      	mov	r2, r0
 8007c84:	460b      	mov	r3, r1
 8007c86:	4630      	mov	r0, r6
 8007c88:	4639      	mov	r1, r7
 8007c8a:	f7f8 faa9 	bl	80001e0 <__aeabi_dsub>
 8007c8e:	a360      	add	r3, pc, #384	@ (adr r3, 8007e10 <__ieee754_rem_pio2+0x2f0>)
 8007c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c94:	4682      	mov	sl, r0
 8007c96:	468b      	mov	fp, r1
 8007c98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c9c:	f7f8 fc58 	bl	8000550 <__aeabi_dmul>
 8007ca0:	2d1f      	cmp	r5, #31
 8007ca2:	4606      	mov	r6, r0
 8007ca4:	460f      	mov	r7, r1
 8007ca6:	dc0c      	bgt.n	8007cc2 <__ieee754_rem_pio2+0x1a2>
 8007ca8:	4b6a      	ldr	r3, [pc, #424]	@ (8007e54 <__ieee754_rem_pio2+0x334>)
 8007caa:	1e6a      	subs	r2, r5, #1
 8007cac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cb0:	4543      	cmp	r3, r8
 8007cb2:	d006      	beq.n	8007cc2 <__ieee754_rem_pio2+0x1a2>
 8007cb4:	4632      	mov	r2, r6
 8007cb6:	463b      	mov	r3, r7
 8007cb8:	4650      	mov	r0, sl
 8007cba:	4659      	mov	r1, fp
 8007cbc:	f7f8 fa90 	bl	80001e0 <__aeabi_dsub>
 8007cc0:	e00e      	b.n	8007ce0 <__ieee754_rem_pio2+0x1c0>
 8007cc2:	463b      	mov	r3, r7
 8007cc4:	4632      	mov	r2, r6
 8007cc6:	4650      	mov	r0, sl
 8007cc8:	4659      	mov	r1, fp
 8007cca:	f7f8 fa89 	bl	80001e0 <__aeabi_dsub>
 8007cce:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007cd2:	9305      	str	r3, [sp, #20]
 8007cd4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007cd8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8007cdc:	2b10      	cmp	r3, #16
 8007cde:	dc02      	bgt.n	8007ce6 <__ieee754_rem_pio2+0x1c6>
 8007ce0:	e9c4 0100 	strd	r0, r1, [r4]
 8007ce4:	e039      	b.n	8007d5a <__ieee754_rem_pio2+0x23a>
 8007ce6:	a34c      	add	r3, pc, #304	@ (adr r3, 8007e18 <__ieee754_rem_pio2+0x2f8>)
 8007ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007cf0:	f7f8 fc2e 	bl	8000550 <__aeabi_dmul>
 8007cf4:	4606      	mov	r6, r0
 8007cf6:	460f      	mov	r7, r1
 8007cf8:	4602      	mov	r2, r0
 8007cfa:	460b      	mov	r3, r1
 8007cfc:	4650      	mov	r0, sl
 8007cfe:	4659      	mov	r1, fp
 8007d00:	f7f8 fa6e 	bl	80001e0 <__aeabi_dsub>
 8007d04:	4602      	mov	r2, r0
 8007d06:	460b      	mov	r3, r1
 8007d08:	4680      	mov	r8, r0
 8007d0a:	4689      	mov	r9, r1
 8007d0c:	4650      	mov	r0, sl
 8007d0e:	4659      	mov	r1, fp
 8007d10:	f7f8 fa66 	bl	80001e0 <__aeabi_dsub>
 8007d14:	4632      	mov	r2, r6
 8007d16:	463b      	mov	r3, r7
 8007d18:	f7f8 fa62 	bl	80001e0 <__aeabi_dsub>
 8007d1c:	a340      	add	r3, pc, #256	@ (adr r3, 8007e20 <__ieee754_rem_pio2+0x300>)
 8007d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d22:	4606      	mov	r6, r0
 8007d24:	460f      	mov	r7, r1
 8007d26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d2a:	f7f8 fc11 	bl	8000550 <__aeabi_dmul>
 8007d2e:	4632      	mov	r2, r6
 8007d30:	463b      	mov	r3, r7
 8007d32:	f7f8 fa55 	bl	80001e0 <__aeabi_dsub>
 8007d36:	4602      	mov	r2, r0
 8007d38:	460b      	mov	r3, r1
 8007d3a:	4606      	mov	r6, r0
 8007d3c:	460f      	mov	r7, r1
 8007d3e:	4640      	mov	r0, r8
 8007d40:	4649      	mov	r1, r9
 8007d42:	f7f8 fa4d 	bl	80001e0 <__aeabi_dsub>
 8007d46:	9a05      	ldr	r2, [sp, #20]
 8007d48:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007d4c:	1ad3      	subs	r3, r2, r3
 8007d4e:	2b31      	cmp	r3, #49	@ 0x31
 8007d50:	dc20      	bgt.n	8007d94 <__ieee754_rem_pio2+0x274>
 8007d52:	e9c4 0100 	strd	r0, r1, [r4]
 8007d56:	46c2      	mov	sl, r8
 8007d58:	46cb      	mov	fp, r9
 8007d5a:	e9d4 8900 	ldrd	r8, r9, [r4]
 8007d5e:	4650      	mov	r0, sl
 8007d60:	4642      	mov	r2, r8
 8007d62:	464b      	mov	r3, r9
 8007d64:	4659      	mov	r1, fp
 8007d66:	f7f8 fa3b 	bl	80001e0 <__aeabi_dsub>
 8007d6a:	463b      	mov	r3, r7
 8007d6c:	4632      	mov	r2, r6
 8007d6e:	f7f8 fa37 	bl	80001e0 <__aeabi_dsub>
 8007d72:	9b04      	ldr	r3, [sp, #16]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007d7a:	f6bf af0e 	bge.w	8007b9a <__ieee754_rem_pio2+0x7a>
 8007d7e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8007d82:	6063      	str	r3, [r4, #4]
 8007d84:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007d88:	f8c4 8000 	str.w	r8, [r4]
 8007d8c:	60a0      	str	r0, [r4, #8]
 8007d8e:	60e3      	str	r3, [r4, #12]
 8007d90:	426d      	negs	r5, r5
 8007d92:	e702      	b.n	8007b9a <__ieee754_rem_pio2+0x7a>
 8007d94:	a326      	add	r3, pc, #152	@ (adr r3, 8007e30 <__ieee754_rem_pio2+0x310>)
 8007d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d9e:	f7f8 fbd7 	bl	8000550 <__aeabi_dmul>
 8007da2:	4606      	mov	r6, r0
 8007da4:	460f      	mov	r7, r1
 8007da6:	4602      	mov	r2, r0
 8007da8:	460b      	mov	r3, r1
 8007daa:	4640      	mov	r0, r8
 8007dac:	4649      	mov	r1, r9
 8007dae:	f7f8 fa17 	bl	80001e0 <__aeabi_dsub>
 8007db2:	4602      	mov	r2, r0
 8007db4:	460b      	mov	r3, r1
 8007db6:	4682      	mov	sl, r0
 8007db8:	468b      	mov	fp, r1
 8007dba:	4640      	mov	r0, r8
 8007dbc:	4649      	mov	r1, r9
 8007dbe:	f7f8 fa0f 	bl	80001e0 <__aeabi_dsub>
 8007dc2:	4632      	mov	r2, r6
 8007dc4:	463b      	mov	r3, r7
 8007dc6:	f7f8 fa0b 	bl	80001e0 <__aeabi_dsub>
 8007dca:	a31b      	add	r3, pc, #108	@ (adr r3, 8007e38 <__ieee754_rem_pio2+0x318>)
 8007dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd0:	4606      	mov	r6, r0
 8007dd2:	460f      	mov	r7, r1
 8007dd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007dd8:	f7f8 fbba 	bl	8000550 <__aeabi_dmul>
 8007ddc:	4632      	mov	r2, r6
 8007dde:	463b      	mov	r3, r7
 8007de0:	f7f8 f9fe 	bl	80001e0 <__aeabi_dsub>
 8007de4:	4606      	mov	r6, r0
 8007de6:	460f      	mov	r7, r1
 8007de8:	e764      	b.n	8007cb4 <__ieee754_rem_pio2+0x194>
 8007dea:	4b1b      	ldr	r3, [pc, #108]	@ (8007e58 <__ieee754_rem_pio2+0x338>)
 8007dec:	4598      	cmp	r8, r3
 8007dee:	d935      	bls.n	8007e5c <__ieee754_rem_pio2+0x33c>
 8007df0:	4632      	mov	r2, r6
 8007df2:	463b      	mov	r3, r7
 8007df4:	4630      	mov	r0, r6
 8007df6:	4639      	mov	r1, r7
 8007df8:	f7f8 f9f2 	bl	80001e0 <__aeabi_dsub>
 8007dfc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007e00:	e9c4 0100 	strd	r0, r1, [r4]
 8007e04:	e69e      	b.n	8007b44 <__ieee754_rem_pio2+0x24>
 8007e06:	bf00      	nop
 8007e08:	54400000 	.word	0x54400000
 8007e0c:	3ff921fb 	.word	0x3ff921fb
 8007e10:	1a626331 	.word	0x1a626331
 8007e14:	3dd0b461 	.word	0x3dd0b461
 8007e18:	1a600000 	.word	0x1a600000
 8007e1c:	3dd0b461 	.word	0x3dd0b461
 8007e20:	2e037073 	.word	0x2e037073
 8007e24:	3ba3198a 	.word	0x3ba3198a
 8007e28:	6dc9c883 	.word	0x6dc9c883
 8007e2c:	3fe45f30 	.word	0x3fe45f30
 8007e30:	2e000000 	.word	0x2e000000
 8007e34:	3ba3198a 	.word	0x3ba3198a
 8007e38:	252049c1 	.word	0x252049c1
 8007e3c:	397b839a 	.word	0x397b839a
 8007e40:	3fe921fb 	.word	0x3fe921fb
 8007e44:	4002d97b 	.word	0x4002d97b
 8007e48:	3ff921fb 	.word	0x3ff921fb
 8007e4c:	413921fb 	.word	0x413921fb
 8007e50:	3fe00000 	.word	0x3fe00000
 8007e54:	080087fc 	.word	0x080087fc
 8007e58:	7fefffff 	.word	0x7fefffff
 8007e5c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8007e60:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8007e64:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8007e68:	4630      	mov	r0, r6
 8007e6a:	460f      	mov	r7, r1
 8007e6c:	f7f8 fe20 	bl	8000ab0 <__aeabi_d2iz>
 8007e70:	f7f8 fb04 	bl	800047c <__aeabi_i2d>
 8007e74:	4602      	mov	r2, r0
 8007e76:	460b      	mov	r3, r1
 8007e78:	4630      	mov	r0, r6
 8007e7a:	4639      	mov	r1, r7
 8007e7c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007e80:	f7f8 f9ae 	bl	80001e0 <__aeabi_dsub>
 8007e84:	4b22      	ldr	r3, [pc, #136]	@ (8007f10 <__ieee754_rem_pio2+0x3f0>)
 8007e86:	2200      	movs	r2, #0
 8007e88:	f7f8 fb62 	bl	8000550 <__aeabi_dmul>
 8007e8c:	460f      	mov	r7, r1
 8007e8e:	4606      	mov	r6, r0
 8007e90:	f7f8 fe0e 	bl	8000ab0 <__aeabi_d2iz>
 8007e94:	f7f8 faf2 	bl	800047c <__aeabi_i2d>
 8007e98:	4602      	mov	r2, r0
 8007e9a:	460b      	mov	r3, r1
 8007e9c:	4630      	mov	r0, r6
 8007e9e:	4639      	mov	r1, r7
 8007ea0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007ea4:	f7f8 f99c 	bl	80001e0 <__aeabi_dsub>
 8007ea8:	4b19      	ldr	r3, [pc, #100]	@ (8007f10 <__ieee754_rem_pio2+0x3f0>)
 8007eaa:	2200      	movs	r2, #0
 8007eac:	f7f8 fb50 	bl	8000550 <__aeabi_dmul>
 8007eb0:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8007eb4:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8007eb8:	f04f 0803 	mov.w	r8, #3
 8007ebc:	2600      	movs	r6, #0
 8007ebe:	2700      	movs	r7, #0
 8007ec0:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8007ec4:	4632      	mov	r2, r6
 8007ec6:	463b      	mov	r3, r7
 8007ec8:	46c2      	mov	sl, r8
 8007eca:	f108 38ff 	add.w	r8, r8, #4294967295
 8007ece:	f7f8 fda7 	bl	8000a20 <__aeabi_dcmpeq>
 8007ed2:	2800      	cmp	r0, #0
 8007ed4:	d1f4      	bne.n	8007ec0 <__ieee754_rem_pio2+0x3a0>
 8007ed6:	4b0f      	ldr	r3, [pc, #60]	@ (8007f14 <__ieee754_rem_pio2+0x3f4>)
 8007ed8:	9301      	str	r3, [sp, #4]
 8007eda:	2302      	movs	r3, #2
 8007edc:	9300      	str	r3, [sp, #0]
 8007ede:	462a      	mov	r2, r5
 8007ee0:	4653      	mov	r3, sl
 8007ee2:	4621      	mov	r1, r4
 8007ee4:	a806      	add	r0, sp, #24
 8007ee6:	f000 f817 	bl	8007f18 <__kernel_rem_pio2>
 8007eea:	9b04      	ldr	r3, [sp, #16]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	4605      	mov	r5, r0
 8007ef0:	f6bf ae53 	bge.w	8007b9a <__ieee754_rem_pio2+0x7a>
 8007ef4:	e9d4 2100 	ldrd	r2, r1, [r4]
 8007ef8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007efc:	e9c4 2300 	strd	r2, r3, [r4]
 8007f00:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8007f04:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007f08:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8007f0c:	e740      	b.n	8007d90 <__ieee754_rem_pio2+0x270>
 8007f0e:	bf00      	nop
 8007f10:	41700000 	.word	0x41700000
 8007f14:	0800887c 	.word	0x0800887c

08007f18 <__kernel_rem_pio2>:
 8007f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f1c:	ed2d 8b02 	vpush	{d8}
 8007f20:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8007f24:	f112 0f14 	cmn.w	r2, #20
 8007f28:	9306      	str	r3, [sp, #24]
 8007f2a:	9104      	str	r1, [sp, #16]
 8007f2c:	4bbe      	ldr	r3, [pc, #760]	@ (8008228 <__kernel_rem_pio2+0x310>)
 8007f2e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8007f30:	9008      	str	r0, [sp, #32]
 8007f32:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007f36:	9300      	str	r3, [sp, #0]
 8007f38:	9b06      	ldr	r3, [sp, #24]
 8007f3a:	f103 33ff 	add.w	r3, r3, #4294967295
 8007f3e:	bfa8      	it	ge
 8007f40:	1ed4      	subge	r4, r2, #3
 8007f42:	9305      	str	r3, [sp, #20]
 8007f44:	bfb2      	itee	lt
 8007f46:	2400      	movlt	r4, #0
 8007f48:	2318      	movge	r3, #24
 8007f4a:	fb94 f4f3 	sdivge	r4, r4, r3
 8007f4e:	f06f 0317 	mvn.w	r3, #23
 8007f52:	fb04 3303 	mla	r3, r4, r3, r3
 8007f56:	eb03 0b02 	add.w	fp, r3, r2
 8007f5a:	9b00      	ldr	r3, [sp, #0]
 8007f5c:	9a05      	ldr	r2, [sp, #20]
 8007f5e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8008218 <__kernel_rem_pio2+0x300>
 8007f62:	eb03 0802 	add.w	r8, r3, r2
 8007f66:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8007f68:	1aa7      	subs	r7, r4, r2
 8007f6a:	ae20      	add	r6, sp, #128	@ 0x80
 8007f6c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007f70:	2500      	movs	r5, #0
 8007f72:	4545      	cmp	r5, r8
 8007f74:	dd13      	ble.n	8007f9e <__kernel_rem_pio2+0x86>
 8007f76:	9b06      	ldr	r3, [sp, #24]
 8007f78:	aa20      	add	r2, sp, #128	@ 0x80
 8007f7a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8007f7e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8007f82:	f04f 0800 	mov.w	r8, #0
 8007f86:	9b00      	ldr	r3, [sp, #0]
 8007f88:	4598      	cmp	r8, r3
 8007f8a:	dc31      	bgt.n	8007ff0 <__kernel_rem_pio2+0xd8>
 8007f8c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8008218 <__kernel_rem_pio2+0x300>
 8007f90:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007f94:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007f98:	462f      	mov	r7, r5
 8007f9a:	2600      	movs	r6, #0
 8007f9c:	e01b      	b.n	8007fd6 <__kernel_rem_pio2+0xbe>
 8007f9e:	42ef      	cmn	r7, r5
 8007fa0:	d407      	bmi.n	8007fb2 <__kernel_rem_pio2+0x9a>
 8007fa2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8007fa6:	f7f8 fa69 	bl	800047c <__aeabi_i2d>
 8007faa:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007fae:	3501      	adds	r5, #1
 8007fb0:	e7df      	b.n	8007f72 <__kernel_rem_pio2+0x5a>
 8007fb2:	ec51 0b18 	vmov	r0, r1, d8
 8007fb6:	e7f8      	b.n	8007faa <__kernel_rem_pio2+0x92>
 8007fb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fbc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007fc0:	f7f8 fac6 	bl	8000550 <__aeabi_dmul>
 8007fc4:	4602      	mov	r2, r0
 8007fc6:	460b      	mov	r3, r1
 8007fc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fcc:	f7f8 f90a 	bl	80001e4 <__adddf3>
 8007fd0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007fd4:	3601      	adds	r6, #1
 8007fd6:	9b05      	ldr	r3, [sp, #20]
 8007fd8:	429e      	cmp	r6, r3
 8007fda:	f1a7 0708 	sub.w	r7, r7, #8
 8007fde:	ddeb      	ble.n	8007fb8 <__kernel_rem_pio2+0xa0>
 8007fe0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007fe4:	f108 0801 	add.w	r8, r8, #1
 8007fe8:	ecaa 7b02 	vstmia	sl!, {d7}
 8007fec:	3508      	adds	r5, #8
 8007fee:	e7ca      	b.n	8007f86 <__kernel_rem_pio2+0x6e>
 8007ff0:	9b00      	ldr	r3, [sp, #0]
 8007ff2:	f8dd 8000 	ldr.w	r8, [sp]
 8007ff6:	aa0c      	add	r2, sp, #48	@ 0x30
 8007ff8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007ffc:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ffe:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8008000:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008004:	9309      	str	r3, [sp, #36]	@ 0x24
 8008006:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800800a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800800c:	ab98      	add	r3, sp, #608	@ 0x260
 800800e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008012:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8008016:	ed8d 7b02 	vstr	d7, [sp, #8]
 800801a:	ac0c      	add	r4, sp, #48	@ 0x30
 800801c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800801e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8008022:	46a1      	mov	r9, r4
 8008024:	46c2      	mov	sl, r8
 8008026:	f1ba 0f00 	cmp.w	sl, #0
 800802a:	f1a5 0508 	sub.w	r5, r5, #8
 800802e:	dc77      	bgt.n	8008120 <__kernel_rem_pio2+0x208>
 8008030:	4658      	mov	r0, fp
 8008032:	ed9d 0b02 	vldr	d0, [sp, #8]
 8008036:	f000 fac7 	bl	80085c8 <scalbn>
 800803a:	ec57 6b10 	vmov	r6, r7, d0
 800803e:	2200      	movs	r2, #0
 8008040:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8008044:	4630      	mov	r0, r6
 8008046:	4639      	mov	r1, r7
 8008048:	f7f8 fa82 	bl	8000550 <__aeabi_dmul>
 800804c:	ec41 0b10 	vmov	d0, r0, r1
 8008050:	f000 fb3a 	bl	80086c8 <floor>
 8008054:	4b75      	ldr	r3, [pc, #468]	@ (800822c <__kernel_rem_pio2+0x314>)
 8008056:	ec51 0b10 	vmov	r0, r1, d0
 800805a:	2200      	movs	r2, #0
 800805c:	f7f8 fa78 	bl	8000550 <__aeabi_dmul>
 8008060:	4602      	mov	r2, r0
 8008062:	460b      	mov	r3, r1
 8008064:	4630      	mov	r0, r6
 8008066:	4639      	mov	r1, r7
 8008068:	f7f8 f8ba 	bl	80001e0 <__aeabi_dsub>
 800806c:	460f      	mov	r7, r1
 800806e:	4606      	mov	r6, r0
 8008070:	f7f8 fd1e 	bl	8000ab0 <__aeabi_d2iz>
 8008074:	9002      	str	r0, [sp, #8]
 8008076:	f7f8 fa01 	bl	800047c <__aeabi_i2d>
 800807a:	4602      	mov	r2, r0
 800807c:	460b      	mov	r3, r1
 800807e:	4630      	mov	r0, r6
 8008080:	4639      	mov	r1, r7
 8008082:	f7f8 f8ad 	bl	80001e0 <__aeabi_dsub>
 8008086:	f1bb 0f00 	cmp.w	fp, #0
 800808a:	4606      	mov	r6, r0
 800808c:	460f      	mov	r7, r1
 800808e:	dd6c      	ble.n	800816a <__kernel_rem_pio2+0x252>
 8008090:	f108 31ff 	add.w	r1, r8, #4294967295
 8008094:	ab0c      	add	r3, sp, #48	@ 0x30
 8008096:	9d02      	ldr	r5, [sp, #8]
 8008098:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800809c:	f1cb 0018 	rsb	r0, fp, #24
 80080a0:	fa43 f200 	asr.w	r2, r3, r0
 80080a4:	4415      	add	r5, r2
 80080a6:	4082      	lsls	r2, r0
 80080a8:	1a9b      	subs	r3, r3, r2
 80080aa:	aa0c      	add	r2, sp, #48	@ 0x30
 80080ac:	9502      	str	r5, [sp, #8]
 80080ae:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80080b2:	f1cb 0217 	rsb	r2, fp, #23
 80080b6:	fa43 f902 	asr.w	r9, r3, r2
 80080ba:	f1b9 0f00 	cmp.w	r9, #0
 80080be:	dd64      	ble.n	800818a <__kernel_rem_pio2+0x272>
 80080c0:	9b02      	ldr	r3, [sp, #8]
 80080c2:	2200      	movs	r2, #0
 80080c4:	3301      	adds	r3, #1
 80080c6:	9302      	str	r3, [sp, #8]
 80080c8:	4615      	mov	r5, r2
 80080ca:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 80080ce:	4590      	cmp	r8, r2
 80080d0:	f300 80b8 	bgt.w	8008244 <__kernel_rem_pio2+0x32c>
 80080d4:	f1bb 0f00 	cmp.w	fp, #0
 80080d8:	dd07      	ble.n	80080ea <__kernel_rem_pio2+0x1d2>
 80080da:	f1bb 0f01 	cmp.w	fp, #1
 80080de:	f000 80bf 	beq.w	8008260 <__kernel_rem_pio2+0x348>
 80080e2:	f1bb 0f02 	cmp.w	fp, #2
 80080e6:	f000 80c6 	beq.w	8008276 <__kernel_rem_pio2+0x35e>
 80080ea:	f1b9 0f02 	cmp.w	r9, #2
 80080ee:	d14c      	bne.n	800818a <__kernel_rem_pio2+0x272>
 80080f0:	4632      	mov	r2, r6
 80080f2:	463b      	mov	r3, r7
 80080f4:	494e      	ldr	r1, [pc, #312]	@ (8008230 <__kernel_rem_pio2+0x318>)
 80080f6:	2000      	movs	r0, #0
 80080f8:	f7f8 f872 	bl	80001e0 <__aeabi_dsub>
 80080fc:	4606      	mov	r6, r0
 80080fe:	460f      	mov	r7, r1
 8008100:	2d00      	cmp	r5, #0
 8008102:	d042      	beq.n	800818a <__kernel_rem_pio2+0x272>
 8008104:	4658      	mov	r0, fp
 8008106:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8008220 <__kernel_rem_pio2+0x308>
 800810a:	f000 fa5d 	bl	80085c8 <scalbn>
 800810e:	4630      	mov	r0, r6
 8008110:	4639      	mov	r1, r7
 8008112:	ec53 2b10 	vmov	r2, r3, d0
 8008116:	f7f8 f863 	bl	80001e0 <__aeabi_dsub>
 800811a:	4606      	mov	r6, r0
 800811c:	460f      	mov	r7, r1
 800811e:	e034      	b.n	800818a <__kernel_rem_pio2+0x272>
 8008120:	4b44      	ldr	r3, [pc, #272]	@ (8008234 <__kernel_rem_pio2+0x31c>)
 8008122:	2200      	movs	r2, #0
 8008124:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008128:	f7f8 fa12 	bl	8000550 <__aeabi_dmul>
 800812c:	f7f8 fcc0 	bl	8000ab0 <__aeabi_d2iz>
 8008130:	f7f8 f9a4 	bl	800047c <__aeabi_i2d>
 8008134:	4b40      	ldr	r3, [pc, #256]	@ (8008238 <__kernel_rem_pio2+0x320>)
 8008136:	2200      	movs	r2, #0
 8008138:	4606      	mov	r6, r0
 800813a:	460f      	mov	r7, r1
 800813c:	f7f8 fa08 	bl	8000550 <__aeabi_dmul>
 8008140:	4602      	mov	r2, r0
 8008142:	460b      	mov	r3, r1
 8008144:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008148:	f7f8 f84a 	bl	80001e0 <__aeabi_dsub>
 800814c:	f7f8 fcb0 	bl	8000ab0 <__aeabi_d2iz>
 8008150:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008154:	f849 0b04 	str.w	r0, [r9], #4
 8008158:	4639      	mov	r1, r7
 800815a:	4630      	mov	r0, r6
 800815c:	f7f8 f842 	bl	80001e4 <__adddf3>
 8008160:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008164:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008168:	e75d      	b.n	8008026 <__kernel_rem_pio2+0x10e>
 800816a:	d107      	bne.n	800817c <__kernel_rem_pio2+0x264>
 800816c:	f108 33ff 	add.w	r3, r8, #4294967295
 8008170:	aa0c      	add	r2, sp, #48	@ 0x30
 8008172:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008176:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800817a:	e79e      	b.n	80080ba <__kernel_rem_pio2+0x1a2>
 800817c:	4b2f      	ldr	r3, [pc, #188]	@ (800823c <__kernel_rem_pio2+0x324>)
 800817e:	2200      	movs	r2, #0
 8008180:	f7f8 fc6c 	bl	8000a5c <__aeabi_dcmpge>
 8008184:	2800      	cmp	r0, #0
 8008186:	d143      	bne.n	8008210 <__kernel_rem_pio2+0x2f8>
 8008188:	4681      	mov	r9, r0
 800818a:	2200      	movs	r2, #0
 800818c:	2300      	movs	r3, #0
 800818e:	4630      	mov	r0, r6
 8008190:	4639      	mov	r1, r7
 8008192:	f7f8 fc45 	bl	8000a20 <__aeabi_dcmpeq>
 8008196:	2800      	cmp	r0, #0
 8008198:	f000 80bf 	beq.w	800831a <__kernel_rem_pio2+0x402>
 800819c:	f108 33ff 	add.w	r3, r8, #4294967295
 80081a0:	2200      	movs	r2, #0
 80081a2:	9900      	ldr	r1, [sp, #0]
 80081a4:	428b      	cmp	r3, r1
 80081a6:	da6e      	bge.n	8008286 <__kernel_rem_pio2+0x36e>
 80081a8:	2a00      	cmp	r2, #0
 80081aa:	f000 8089 	beq.w	80082c0 <__kernel_rem_pio2+0x3a8>
 80081ae:	f108 38ff 	add.w	r8, r8, #4294967295
 80081b2:	ab0c      	add	r3, sp, #48	@ 0x30
 80081b4:	f1ab 0b18 	sub.w	fp, fp, #24
 80081b8:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d0f6      	beq.n	80081ae <__kernel_rem_pio2+0x296>
 80081c0:	4658      	mov	r0, fp
 80081c2:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8008220 <__kernel_rem_pio2+0x308>
 80081c6:	f000 f9ff 	bl	80085c8 <scalbn>
 80081ca:	f108 0301 	add.w	r3, r8, #1
 80081ce:	00da      	lsls	r2, r3, #3
 80081d0:	9205      	str	r2, [sp, #20]
 80081d2:	ec55 4b10 	vmov	r4, r5, d0
 80081d6:	aa70      	add	r2, sp, #448	@ 0x1c0
 80081d8:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8008234 <__kernel_rem_pio2+0x31c>
 80081dc:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 80081e0:	4646      	mov	r6, r8
 80081e2:	f04f 0a00 	mov.w	sl, #0
 80081e6:	2e00      	cmp	r6, #0
 80081e8:	f280 80cf 	bge.w	800838a <__kernel_rem_pio2+0x472>
 80081ec:	4644      	mov	r4, r8
 80081ee:	2c00      	cmp	r4, #0
 80081f0:	f2c0 80fd 	blt.w	80083ee <__kernel_rem_pio2+0x4d6>
 80081f4:	4b12      	ldr	r3, [pc, #72]	@ (8008240 <__kernel_rem_pio2+0x328>)
 80081f6:	461f      	mov	r7, r3
 80081f8:	ab70      	add	r3, sp, #448	@ 0x1c0
 80081fa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80081fe:	9306      	str	r3, [sp, #24]
 8008200:	f04f 0a00 	mov.w	sl, #0
 8008204:	f04f 0b00 	mov.w	fp, #0
 8008208:	2600      	movs	r6, #0
 800820a:	eba8 0504 	sub.w	r5, r8, r4
 800820e:	e0e2      	b.n	80083d6 <__kernel_rem_pio2+0x4be>
 8008210:	f04f 0902 	mov.w	r9, #2
 8008214:	e754      	b.n	80080c0 <__kernel_rem_pio2+0x1a8>
 8008216:	bf00      	nop
	...
 8008224:	3ff00000 	.word	0x3ff00000
 8008228:	080089c8 	.word	0x080089c8
 800822c:	40200000 	.word	0x40200000
 8008230:	3ff00000 	.word	0x3ff00000
 8008234:	3e700000 	.word	0x3e700000
 8008238:	41700000 	.word	0x41700000
 800823c:	3fe00000 	.word	0x3fe00000
 8008240:	08008988 	.word	0x08008988
 8008244:	f854 3b04 	ldr.w	r3, [r4], #4
 8008248:	b945      	cbnz	r5, 800825c <__kernel_rem_pio2+0x344>
 800824a:	b123      	cbz	r3, 8008256 <__kernel_rem_pio2+0x33e>
 800824c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8008250:	f844 3c04 	str.w	r3, [r4, #-4]
 8008254:	2301      	movs	r3, #1
 8008256:	3201      	adds	r2, #1
 8008258:	461d      	mov	r5, r3
 800825a:	e738      	b.n	80080ce <__kernel_rem_pio2+0x1b6>
 800825c:	1acb      	subs	r3, r1, r3
 800825e:	e7f7      	b.n	8008250 <__kernel_rem_pio2+0x338>
 8008260:	f108 32ff 	add.w	r2, r8, #4294967295
 8008264:	ab0c      	add	r3, sp, #48	@ 0x30
 8008266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800826a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800826e:	a90c      	add	r1, sp, #48	@ 0x30
 8008270:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008274:	e739      	b.n	80080ea <__kernel_rem_pio2+0x1d2>
 8008276:	f108 32ff 	add.w	r2, r8, #4294967295
 800827a:	ab0c      	add	r3, sp, #48	@ 0x30
 800827c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008280:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008284:	e7f3      	b.n	800826e <__kernel_rem_pio2+0x356>
 8008286:	a90c      	add	r1, sp, #48	@ 0x30
 8008288:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800828c:	3b01      	subs	r3, #1
 800828e:	430a      	orrs	r2, r1
 8008290:	e787      	b.n	80081a2 <__kernel_rem_pio2+0x28a>
 8008292:	3401      	adds	r4, #1
 8008294:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008298:	2a00      	cmp	r2, #0
 800829a:	d0fa      	beq.n	8008292 <__kernel_rem_pio2+0x37a>
 800829c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800829e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80082a2:	eb0d 0503 	add.w	r5, sp, r3
 80082a6:	9b06      	ldr	r3, [sp, #24]
 80082a8:	aa20      	add	r2, sp, #128	@ 0x80
 80082aa:	4443      	add	r3, r8
 80082ac:	f108 0701 	add.w	r7, r8, #1
 80082b0:	3d98      	subs	r5, #152	@ 0x98
 80082b2:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 80082b6:	4444      	add	r4, r8
 80082b8:	42bc      	cmp	r4, r7
 80082ba:	da04      	bge.n	80082c6 <__kernel_rem_pio2+0x3ae>
 80082bc:	46a0      	mov	r8, r4
 80082be:	e6a2      	b.n	8008006 <__kernel_rem_pio2+0xee>
 80082c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80082c2:	2401      	movs	r4, #1
 80082c4:	e7e6      	b.n	8008294 <__kernel_rem_pio2+0x37c>
 80082c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082c8:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80082cc:	f7f8 f8d6 	bl	800047c <__aeabi_i2d>
 80082d0:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8008598 <__kernel_rem_pio2+0x680>
 80082d4:	e8e6 0102 	strd	r0, r1, [r6], #8
 80082d8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80082dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80082e0:	46b2      	mov	sl, r6
 80082e2:	f04f 0800 	mov.w	r8, #0
 80082e6:	9b05      	ldr	r3, [sp, #20]
 80082e8:	4598      	cmp	r8, r3
 80082ea:	dd05      	ble.n	80082f8 <__kernel_rem_pio2+0x3e0>
 80082ec:	ed9d 7b02 	vldr	d7, [sp, #8]
 80082f0:	3701      	adds	r7, #1
 80082f2:	eca5 7b02 	vstmia	r5!, {d7}
 80082f6:	e7df      	b.n	80082b8 <__kernel_rem_pio2+0x3a0>
 80082f8:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 80082fc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8008300:	f7f8 f926 	bl	8000550 <__aeabi_dmul>
 8008304:	4602      	mov	r2, r0
 8008306:	460b      	mov	r3, r1
 8008308:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800830c:	f7f7 ff6a 	bl	80001e4 <__adddf3>
 8008310:	f108 0801 	add.w	r8, r8, #1
 8008314:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008318:	e7e5      	b.n	80082e6 <__kernel_rem_pio2+0x3ce>
 800831a:	f1cb 0000 	rsb	r0, fp, #0
 800831e:	ec47 6b10 	vmov	d0, r6, r7
 8008322:	f000 f951 	bl	80085c8 <scalbn>
 8008326:	ec55 4b10 	vmov	r4, r5, d0
 800832a:	4b9d      	ldr	r3, [pc, #628]	@ (80085a0 <__kernel_rem_pio2+0x688>)
 800832c:	2200      	movs	r2, #0
 800832e:	4620      	mov	r0, r4
 8008330:	4629      	mov	r1, r5
 8008332:	f7f8 fb93 	bl	8000a5c <__aeabi_dcmpge>
 8008336:	b300      	cbz	r0, 800837a <__kernel_rem_pio2+0x462>
 8008338:	4b9a      	ldr	r3, [pc, #616]	@ (80085a4 <__kernel_rem_pio2+0x68c>)
 800833a:	2200      	movs	r2, #0
 800833c:	4620      	mov	r0, r4
 800833e:	4629      	mov	r1, r5
 8008340:	f7f8 f906 	bl	8000550 <__aeabi_dmul>
 8008344:	f7f8 fbb4 	bl	8000ab0 <__aeabi_d2iz>
 8008348:	4606      	mov	r6, r0
 800834a:	f7f8 f897 	bl	800047c <__aeabi_i2d>
 800834e:	4b94      	ldr	r3, [pc, #592]	@ (80085a0 <__kernel_rem_pio2+0x688>)
 8008350:	2200      	movs	r2, #0
 8008352:	f7f8 f8fd 	bl	8000550 <__aeabi_dmul>
 8008356:	460b      	mov	r3, r1
 8008358:	4602      	mov	r2, r0
 800835a:	4629      	mov	r1, r5
 800835c:	4620      	mov	r0, r4
 800835e:	f7f7 ff3f 	bl	80001e0 <__aeabi_dsub>
 8008362:	f7f8 fba5 	bl	8000ab0 <__aeabi_d2iz>
 8008366:	ab0c      	add	r3, sp, #48	@ 0x30
 8008368:	f10b 0b18 	add.w	fp, fp, #24
 800836c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8008370:	f108 0801 	add.w	r8, r8, #1
 8008374:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8008378:	e722      	b.n	80081c0 <__kernel_rem_pio2+0x2a8>
 800837a:	4620      	mov	r0, r4
 800837c:	4629      	mov	r1, r5
 800837e:	f7f8 fb97 	bl	8000ab0 <__aeabi_d2iz>
 8008382:	ab0c      	add	r3, sp, #48	@ 0x30
 8008384:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8008388:	e71a      	b.n	80081c0 <__kernel_rem_pio2+0x2a8>
 800838a:	ab0c      	add	r3, sp, #48	@ 0x30
 800838c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008390:	f7f8 f874 	bl	800047c <__aeabi_i2d>
 8008394:	4622      	mov	r2, r4
 8008396:	462b      	mov	r3, r5
 8008398:	f7f8 f8da 	bl	8000550 <__aeabi_dmul>
 800839c:	4652      	mov	r2, sl
 800839e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 80083a2:	465b      	mov	r3, fp
 80083a4:	4620      	mov	r0, r4
 80083a6:	4629      	mov	r1, r5
 80083a8:	f7f8 f8d2 	bl	8000550 <__aeabi_dmul>
 80083ac:	3e01      	subs	r6, #1
 80083ae:	4604      	mov	r4, r0
 80083b0:	460d      	mov	r5, r1
 80083b2:	e718      	b.n	80081e6 <__kernel_rem_pio2+0x2ce>
 80083b4:	9906      	ldr	r1, [sp, #24]
 80083b6:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 80083ba:	9106      	str	r1, [sp, #24]
 80083bc:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 80083c0:	f7f8 f8c6 	bl	8000550 <__aeabi_dmul>
 80083c4:	4602      	mov	r2, r0
 80083c6:	460b      	mov	r3, r1
 80083c8:	4650      	mov	r0, sl
 80083ca:	4659      	mov	r1, fp
 80083cc:	f7f7 ff0a 	bl	80001e4 <__adddf3>
 80083d0:	3601      	adds	r6, #1
 80083d2:	4682      	mov	sl, r0
 80083d4:	468b      	mov	fp, r1
 80083d6:	9b00      	ldr	r3, [sp, #0]
 80083d8:	429e      	cmp	r6, r3
 80083da:	dc01      	bgt.n	80083e0 <__kernel_rem_pio2+0x4c8>
 80083dc:	42b5      	cmp	r5, r6
 80083de:	dae9      	bge.n	80083b4 <__kernel_rem_pio2+0x49c>
 80083e0:	ab48      	add	r3, sp, #288	@ 0x120
 80083e2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80083e6:	e9c5 ab00 	strd	sl, fp, [r5]
 80083ea:	3c01      	subs	r4, #1
 80083ec:	e6ff      	b.n	80081ee <__kernel_rem_pio2+0x2d6>
 80083ee:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80083f0:	2b02      	cmp	r3, #2
 80083f2:	dc0b      	bgt.n	800840c <__kernel_rem_pio2+0x4f4>
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	dc39      	bgt.n	800846c <__kernel_rem_pio2+0x554>
 80083f8:	d05d      	beq.n	80084b6 <__kernel_rem_pio2+0x59e>
 80083fa:	9b02      	ldr	r3, [sp, #8]
 80083fc:	f003 0007 	and.w	r0, r3, #7
 8008400:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8008404:	ecbd 8b02 	vpop	{d8}
 8008408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800840c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800840e:	2b03      	cmp	r3, #3
 8008410:	d1f3      	bne.n	80083fa <__kernel_rem_pio2+0x4e2>
 8008412:	9b05      	ldr	r3, [sp, #20]
 8008414:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008418:	eb0d 0403 	add.w	r4, sp, r3
 800841c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8008420:	4625      	mov	r5, r4
 8008422:	46c2      	mov	sl, r8
 8008424:	f1ba 0f00 	cmp.w	sl, #0
 8008428:	f1a5 0508 	sub.w	r5, r5, #8
 800842c:	dc6b      	bgt.n	8008506 <__kernel_rem_pio2+0x5ee>
 800842e:	4645      	mov	r5, r8
 8008430:	2d01      	cmp	r5, #1
 8008432:	f1a4 0408 	sub.w	r4, r4, #8
 8008436:	f300 8087 	bgt.w	8008548 <__kernel_rem_pio2+0x630>
 800843a:	9c05      	ldr	r4, [sp, #20]
 800843c:	ab48      	add	r3, sp, #288	@ 0x120
 800843e:	441c      	add	r4, r3
 8008440:	2000      	movs	r0, #0
 8008442:	2100      	movs	r1, #0
 8008444:	f1b8 0f01 	cmp.w	r8, #1
 8008448:	f300 809c 	bgt.w	8008584 <__kernel_rem_pio2+0x66c>
 800844c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8008450:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8008454:	f1b9 0f00 	cmp.w	r9, #0
 8008458:	f040 80a6 	bne.w	80085a8 <__kernel_rem_pio2+0x690>
 800845c:	9b04      	ldr	r3, [sp, #16]
 800845e:	e9c3 7800 	strd	r7, r8, [r3]
 8008462:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8008466:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800846a:	e7c6      	b.n	80083fa <__kernel_rem_pio2+0x4e2>
 800846c:	9d05      	ldr	r5, [sp, #20]
 800846e:	ab48      	add	r3, sp, #288	@ 0x120
 8008470:	441d      	add	r5, r3
 8008472:	4644      	mov	r4, r8
 8008474:	2000      	movs	r0, #0
 8008476:	2100      	movs	r1, #0
 8008478:	2c00      	cmp	r4, #0
 800847a:	da35      	bge.n	80084e8 <__kernel_rem_pio2+0x5d0>
 800847c:	f1b9 0f00 	cmp.w	r9, #0
 8008480:	d038      	beq.n	80084f4 <__kernel_rem_pio2+0x5dc>
 8008482:	4602      	mov	r2, r0
 8008484:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008488:	9c04      	ldr	r4, [sp, #16]
 800848a:	e9c4 2300 	strd	r2, r3, [r4]
 800848e:	4602      	mov	r2, r0
 8008490:	460b      	mov	r3, r1
 8008492:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8008496:	f7f7 fea3 	bl	80001e0 <__aeabi_dsub>
 800849a:	ad4a      	add	r5, sp, #296	@ 0x128
 800849c:	2401      	movs	r4, #1
 800849e:	45a0      	cmp	r8, r4
 80084a0:	da2b      	bge.n	80084fa <__kernel_rem_pio2+0x5e2>
 80084a2:	f1b9 0f00 	cmp.w	r9, #0
 80084a6:	d002      	beq.n	80084ae <__kernel_rem_pio2+0x596>
 80084a8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80084ac:	4619      	mov	r1, r3
 80084ae:	9b04      	ldr	r3, [sp, #16]
 80084b0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80084b4:	e7a1      	b.n	80083fa <__kernel_rem_pio2+0x4e2>
 80084b6:	9c05      	ldr	r4, [sp, #20]
 80084b8:	ab48      	add	r3, sp, #288	@ 0x120
 80084ba:	441c      	add	r4, r3
 80084bc:	2000      	movs	r0, #0
 80084be:	2100      	movs	r1, #0
 80084c0:	f1b8 0f00 	cmp.w	r8, #0
 80084c4:	da09      	bge.n	80084da <__kernel_rem_pio2+0x5c2>
 80084c6:	f1b9 0f00 	cmp.w	r9, #0
 80084ca:	d002      	beq.n	80084d2 <__kernel_rem_pio2+0x5ba>
 80084cc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80084d0:	4619      	mov	r1, r3
 80084d2:	9b04      	ldr	r3, [sp, #16]
 80084d4:	e9c3 0100 	strd	r0, r1, [r3]
 80084d8:	e78f      	b.n	80083fa <__kernel_rem_pio2+0x4e2>
 80084da:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80084de:	f7f7 fe81 	bl	80001e4 <__adddf3>
 80084e2:	f108 38ff 	add.w	r8, r8, #4294967295
 80084e6:	e7eb      	b.n	80084c0 <__kernel_rem_pio2+0x5a8>
 80084e8:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80084ec:	f7f7 fe7a 	bl	80001e4 <__adddf3>
 80084f0:	3c01      	subs	r4, #1
 80084f2:	e7c1      	b.n	8008478 <__kernel_rem_pio2+0x560>
 80084f4:	4602      	mov	r2, r0
 80084f6:	460b      	mov	r3, r1
 80084f8:	e7c6      	b.n	8008488 <__kernel_rem_pio2+0x570>
 80084fa:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80084fe:	f7f7 fe71 	bl	80001e4 <__adddf3>
 8008502:	3401      	adds	r4, #1
 8008504:	e7cb      	b.n	800849e <__kernel_rem_pio2+0x586>
 8008506:	ed95 7b00 	vldr	d7, [r5]
 800850a:	ed8d 7b00 	vstr	d7, [sp]
 800850e:	ed95 7b02 	vldr	d7, [r5, #8]
 8008512:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008516:	ec53 2b17 	vmov	r2, r3, d7
 800851a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800851e:	f7f7 fe61 	bl	80001e4 <__adddf3>
 8008522:	4602      	mov	r2, r0
 8008524:	460b      	mov	r3, r1
 8008526:	4606      	mov	r6, r0
 8008528:	460f      	mov	r7, r1
 800852a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800852e:	f7f7 fe57 	bl	80001e0 <__aeabi_dsub>
 8008532:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008536:	f7f7 fe55 	bl	80001e4 <__adddf3>
 800853a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800853e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8008542:	e9c5 6700 	strd	r6, r7, [r5]
 8008546:	e76d      	b.n	8008424 <__kernel_rem_pio2+0x50c>
 8008548:	ed94 7b00 	vldr	d7, [r4]
 800854c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8008550:	ec51 0b17 	vmov	r0, r1, d7
 8008554:	4652      	mov	r2, sl
 8008556:	465b      	mov	r3, fp
 8008558:	ed8d 7b00 	vstr	d7, [sp]
 800855c:	f7f7 fe42 	bl	80001e4 <__adddf3>
 8008560:	4602      	mov	r2, r0
 8008562:	460b      	mov	r3, r1
 8008564:	4606      	mov	r6, r0
 8008566:	460f      	mov	r7, r1
 8008568:	e9dd 0100 	ldrd	r0, r1, [sp]
 800856c:	f7f7 fe38 	bl	80001e0 <__aeabi_dsub>
 8008570:	4652      	mov	r2, sl
 8008572:	465b      	mov	r3, fp
 8008574:	f7f7 fe36 	bl	80001e4 <__adddf3>
 8008578:	3d01      	subs	r5, #1
 800857a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800857e:	e9c4 6700 	strd	r6, r7, [r4]
 8008582:	e755      	b.n	8008430 <__kernel_rem_pio2+0x518>
 8008584:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008588:	f7f7 fe2c 	bl	80001e4 <__adddf3>
 800858c:	f108 38ff 	add.w	r8, r8, #4294967295
 8008590:	e758      	b.n	8008444 <__kernel_rem_pio2+0x52c>
 8008592:	bf00      	nop
 8008594:	f3af 8000 	nop.w
	...
 80085a0:	41700000 	.word	0x41700000
 80085a4:	3e700000 	.word	0x3e700000
 80085a8:	9b04      	ldr	r3, [sp, #16]
 80085aa:	9a04      	ldr	r2, [sp, #16]
 80085ac:	601f      	str	r7, [r3, #0]
 80085ae:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 80085b2:	605c      	str	r4, [r3, #4]
 80085b4:	609d      	str	r5, [r3, #8]
 80085b6:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80085ba:	60d3      	str	r3, [r2, #12]
 80085bc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80085c0:	6110      	str	r0, [r2, #16]
 80085c2:	6153      	str	r3, [r2, #20]
 80085c4:	e719      	b.n	80083fa <__kernel_rem_pio2+0x4e2>
 80085c6:	bf00      	nop

080085c8 <scalbn>:
 80085c8:	b570      	push	{r4, r5, r6, lr}
 80085ca:	ec55 4b10 	vmov	r4, r5, d0
 80085ce:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80085d2:	4606      	mov	r6, r0
 80085d4:	462b      	mov	r3, r5
 80085d6:	b991      	cbnz	r1, 80085fe <scalbn+0x36>
 80085d8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80085dc:	4323      	orrs	r3, r4
 80085de:	d03d      	beq.n	800865c <scalbn+0x94>
 80085e0:	4b35      	ldr	r3, [pc, #212]	@ (80086b8 <scalbn+0xf0>)
 80085e2:	4620      	mov	r0, r4
 80085e4:	4629      	mov	r1, r5
 80085e6:	2200      	movs	r2, #0
 80085e8:	f7f7 ffb2 	bl	8000550 <__aeabi_dmul>
 80085ec:	4b33      	ldr	r3, [pc, #204]	@ (80086bc <scalbn+0xf4>)
 80085ee:	429e      	cmp	r6, r3
 80085f0:	4604      	mov	r4, r0
 80085f2:	460d      	mov	r5, r1
 80085f4:	da0f      	bge.n	8008616 <scalbn+0x4e>
 80085f6:	a328      	add	r3, pc, #160	@ (adr r3, 8008698 <scalbn+0xd0>)
 80085f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085fc:	e01e      	b.n	800863c <scalbn+0x74>
 80085fe:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8008602:	4291      	cmp	r1, r2
 8008604:	d10b      	bne.n	800861e <scalbn+0x56>
 8008606:	4622      	mov	r2, r4
 8008608:	4620      	mov	r0, r4
 800860a:	4629      	mov	r1, r5
 800860c:	f7f7 fdea 	bl	80001e4 <__adddf3>
 8008610:	4604      	mov	r4, r0
 8008612:	460d      	mov	r5, r1
 8008614:	e022      	b.n	800865c <scalbn+0x94>
 8008616:	460b      	mov	r3, r1
 8008618:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800861c:	3936      	subs	r1, #54	@ 0x36
 800861e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8008622:	4296      	cmp	r6, r2
 8008624:	dd0d      	ble.n	8008642 <scalbn+0x7a>
 8008626:	2d00      	cmp	r5, #0
 8008628:	a11d      	add	r1, pc, #116	@ (adr r1, 80086a0 <scalbn+0xd8>)
 800862a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800862e:	da02      	bge.n	8008636 <scalbn+0x6e>
 8008630:	a11d      	add	r1, pc, #116	@ (adr r1, 80086a8 <scalbn+0xe0>)
 8008632:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008636:	a31a      	add	r3, pc, #104	@ (adr r3, 80086a0 <scalbn+0xd8>)
 8008638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800863c:	f7f7 ff88 	bl	8000550 <__aeabi_dmul>
 8008640:	e7e6      	b.n	8008610 <scalbn+0x48>
 8008642:	1872      	adds	r2, r6, r1
 8008644:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8008648:	428a      	cmp	r2, r1
 800864a:	dcec      	bgt.n	8008626 <scalbn+0x5e>
 800864c:	2a00      	cmp	r2, #0
 800864e:	dd08      	ble.n	8008662 <scalbn+0x9a>
 8008650:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8008654:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8008658:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800865c:	ec45 4b10 	vmov	d0, r4, r5
 8008660:	bd70      	pop	{r4, r5, r6, pc}
 8008662:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8008666:	da08      	bge.n	800867a <scalbn+0xb2>
 8008668:	2d00      	cmp	r5, #0
 800866a:	a10b      	add	r1, pc, #44	@ (adr r1, 8008698 <scalbn+0xd0>)
 800866c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008670:	dac1      	bge.n	80085f6 <scalbn+0x2e>
 8008672:	a10f      	add	r1, pc, #60	@ (adr r1, 80086b0 <scalbn+0xe8>)
 8008674:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008678:	e7bd      	b.n	80085f6 <scalbn+0x2e>
 800867a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800867e:	3236      	adds	r2, #54	@ 0x36
 8008680:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8008684:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008688:	4620      	mov	r0, r4
 800868a:	4b0d      	ldr	r3, [pc, #52]	@ (80086c0 <scalbn+0xf8>)
 800868c:	4629      	mov	r1, r5
 800868e:	2200      	movs	r2, #0
 8008690:	e7d4      	b.n	800863c <scalbn+0x74>
 8008692:	bf00      	nop
 8008694:	f3af 8000 	nop.w
 8008698:	c2f8f359 	.word	0xc2f8f359
 800869c:	01a56e1f 	.word	0x01a56e1f
 80086a0:	8800759c 	.word	0x8800759c
 80086a4:	7e37e43c 	.word	0x7e37e43c
 80086a8:	8800759c 	.word	0x8800759c
 80086ac:	fe37e43c 	.word	0xfe37e43c
 80086b0:	c2f8f359 	.word	0xc2f8f359
 80086b4:	81a56e1f 	.word	0x81a56e1f
 80086b8:	43500000 	.word	0x43500000
 80086bc:	ffff3cb0 	.word	0xffff3cb0
 80086c0:	3c900000 	.word	0x3c900000
 80086c4:	00000000 	.word	0x00000000

080086c8 <floor>:
 80086c8:	ec51 0b10 	vmov	r0, r1, d0
 80086cc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80086d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086d4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 80086d8:	2e13      	cmp	r6, #19
 80086da:	460c      	mov	r4, r1
 80086dc:	4605      	mov	r5, r0
 80086de:	4680      	mov	r8, r0
 80086e0:	dc34      	bgt.n	800874c <floor+0x84>
 80086e2:	2e00      	cmp	r6, #0
 80086e4:	da17      	bge.n	8008716 <floor+0x4e>
 80086e6:	a332      	add	r3, pc, #200	@ (adr r3, 80087b0 <floor+0xe8>)
 80086e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ec:	f7f7 fd7a 	bl	80001e4 <__adddf3>
 80086f0:	2200      	movs	r2, #0
 80086f2:	2300      	movs	r3, #0
 80086f4:	f7f8 f9bc 	bl	8000a70 <__aeabi_dcmpgt>
 80086f8:	b150      	cbz	r0, 8008710 <floor+0x48>
 80086fa:	2c00      	cmp	r4, #0
 80086fc:	da55      	bge.n	80087aa <floor+0xe2>
 80086fe:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8008702:	432c      	orrs	r4, r5
 8008704:	2500      	movs	r5, #0
 8008706:	42ac      	cmp	r4, r5
 8008708:	4c2b      	ldr	r4, [pc, #172]	@ (80087b8 <floor+0xf0>)
 800870a:	bf08      	it	eq
 800870c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8008710:	4621      	mov	r1, r4
 8008712:	4628      	mov	r0, r5
 8008714:	e023      	b.n	800875e <floor+0x96>
 8008716:	4f29      	ldr	r7, [pc, #164]	@ (80087bc <floor+0xf4>)
 8008718:	4137      	asrs	r7, r6
 800871a:	ea01 0307 	and.w	r3, r1, r7
 800871e:	4303      	orrs	r3, r0
 8008720:	d01d      	beq.n	800875e <floor+0x96>
 8008722:	a323      	add	r3, pc, #140	@ (adr r3, 80087b0 <floor+0xe8>)
 8008724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008728:	f7f7 fd5c 	bl	80001e4 <__adddf3>
 800872c:	2200      	movs	r2, #0
 800872e:	2300      	movs	r3, #0
 8008730:	f7f8 f99e 	bl	8000a70 <__aeabi_dcmpgt>
 8008734:	2800      	cmp	r0, #0
 8008736:	d0eb      	beq.n	8008710 <floor+0x48>
 8008738:	2c00      	cmp	r4, #0
 800873a:	bfbe      	ittt	lt
 800873c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8008740:	4133      	asrlt	r3, r6
 8008742:	18e4      	addlt	r4, r4, r3
 8008744:	ea24 0407 	bic.w	r4, r4, r7
 8008748:	2500      	movs	r5, #0
 800874a:	e7e1      	b.n	8008710 <floor+0x48>
 800874c:	2e33      	cmp	r6, #51	@ 0x33
 800874e:	dd0a      	ble.n	8008766 <floor+0x9e>
 8008750:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8008754:	d103      	bne.n	800875e <floor+0x96>
 8008756:	4602      	mov	r2, r0
 8008758:	460b      	mov	r3, r1
 800875a:	f7f7 fd43 	bl	80001e4 <__adddf3>
 800875e:	ec41 0b10 	vmov	d0, r0, r1
 8008762:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008766:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800876a:	f04f 37ff 	mov.w	r7, #4294967295
 800876e:	40df      	lsrs	r7, r3
 8008770:	4207      	tst	r7, r0
 8008772:	d0f4      	beq.n	800875e <floor+0x96>
 8008774:	a30e      	add	r3, pc, #56	@ (adr r3, 80087b0 <floor+0xe8>)
 8008776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800877a:	f7f7 fd33 	bl	80001e4 <__adddf3>
 800877e:	2200      	movs	r2, #0
 8008780:	2300      	movs	r3, #0
 8008782:	f7f8 f975 	bl	8000a70 <__aeabi_dcmpgt>
 8008786:	2800      	cmp	r0, #0
 8008788:	d0c2      	beq.n	8008710 <floor+0x48>
 800878a:	2c00      	cmp	r4, #0
 800878c:	da0a      	bge.n	80087a4 <floor+0xdc>
 800878e:	2e14      	cmp	r6, #20
 8008790:	d101      	bne.n	8008796 <floor+0xce>
 8008792:	3401      	adds	r4, #1
 8008794:	e006      	b.n	80087a4 <floor+0xdc>
 8008796:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800879a:	2301      	movs	r3, #1
 800879c:	40b3      	lsls	r3, r6
 800879e:	441d      	add	r5, r3
 80087a0:	4545      	cmp	r5, r8
 80087a2:	d3f6      	bcc.n	8008792 <floor+0xca>
 80087a4:	ea25 0507 	bic.w	r5, r5, r7
 80087a8:	e7b2      	b.n	8008710 <floor+0x48>
 80087aa:	2500      	movs	r5, #0
 80087ac:	462c      	mov	r4, r5
 80087ae:	e7af      	b.n	8008710 <floor+0x48>
 80087b0:	8800759c 	.word	0x8800759c
 80087b4:	7e37e43c 	.word	0x7e37e43c
 80087b8:	bff00000 	.word	0xbff00000
 80087bc:	000fffff 	.word	0x000fffff

080087c0 <_init>:
 80087c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087c2:	bf00      	nop
 80087c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087c6:	bc08      	pop	{r3}
 80087c8:	469e      	mov	lr, r3
 80087ca:	4770      	bx	lr

080087cc <_fini>:
 80087cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ce:	bf00      	nop
 80087d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087d2:	bc08      	pop	{r3}
 80087d4:	469e      	mov	lr, r3
 80087d6:	4770      	bx	lr
